<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://HDqjl317.github.io</id>
    <title></title>
    <subtitle>加楽的小站</subtitle>
    <icon>https://hdqjl317.github.io/images/favicon.ico</icon>
    <link href="https://HDqjl317.github.io" />
    <author>
      <name>Caleb</name>
    </author>
    <updated>2023-06-30T12:18:31.000Z</updated>
    <entry>
        <id>https://hdqjl317.github.io/2023/06/30/computer-science/C%E5%AE%8F%E5%88%B0Rust%E5%AE%8F%E8%BD%AC%E5%8C%96%E8%A7%84%E5%88%99%E8%AE%BE%E8%AE%A1/</id>
        <title>C宏到Rust宏转化规则设计</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2023/06/30/computer-science/C%E5%AE%8F%E5%88%B0Rust%E5%AE%8F%E8%BD%AC%E5%8C%96%E8%A7%84%E5%88%99%E8%AE%BE%E8%AE%A1/"/>
        <content type="html">&lt;h3 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;C2Rust是一个将符合C99标准的代码迁移到Rust的转换器，本项目需要基于C2Rust将C预处理阶段的宏转换为Rust编译阶段的宏。因此，需要对C宏进行分析，并利用Rust宏的性质来寻找它们之间可能的映射关系和转换方案。&lt;/p&gt;
&lt;h3 id=&#34;研究对象&#34;&gt;&lt;a href=&#34;#研究对象&#34; class=&#34;headerlink&#34; title=&#34;研究对象&#34;&gt;&lt;/a&gt;研究对象&lt;/h3&gt;&lt;p&gt;根据C99标准，C宏大体上可以分为替换文本宏（Replacing Text Macros）和条件包含（Conditional Inclusion）两种，而我们要根据这两类宏设计与之对应的Rust宏的转换规则。&lt;/p&gt;
&lt;p&gt;替换文本宏的句法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;#define identifier replacement-list(optional)       // Object-like Macros
#define identifier( parameters ) replacement-list     // Function-like Macros
#define identifier** **( parameters, ... ) replacement-list // Function-like Macros
#define identifier** **( ... ) replacement-list       // Function-like Macros
#undef identifier                    // #undef directive
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件包含的句法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;#if expression
#ifdef identifier
#ifndef identifier
#elif expression
#else
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;具体转换方案&#34;&gt;&lt;a href=&#34;#具体转换方案&#34; class=&#34;headerlink&#34; title=&#34;具体转换方案&#34;&gt;&lt;/a&gt;具体转换方案&lt;/h3&gt;&lt;h4 id=&#34;define宏指令的转换&#34;&gt;&lt;a href=&#34;#define宏指令的转换&#34; class=&#34;headerlink&#34; title=&#34;define宏指令的转换&#34;&gt;&lt;/a&gt;define宏指令的转换&lt;/h4&gt;&lt;p&gt;C中define指令定义标识符为宏，即它们指示编译器将所有标识符的后继出现替换为替换列表，可以可选地附加地处理。我们此阶段define指令宏的转换规则主要适用于以下这两种常用的语法形式：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;#define identifier replacement-list(optional)    		（1）
#define identifier( parameters ) replacement-list		（2）
#define identifier( parameters, ... ) replacement-list	（3）
#define identifier( ... ) replacement-list				（4）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里将第一类define宏指令归为常量宏，第二、三、四类define宏指令归为语句宏或函数宏，下面针对这两种形式的define语法给出具体的转化规则。&lt;/p&gt;
&lt;p&gt;考虑到为了在rust中能够设计一个通用的声明宏来对应C中define定义的不同变量类型的宏指令，这里将上诉C种的常量宏具体使用形式大致归为以下四种：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;#define MAX_SIZE 1024
#define MY_STR &amp;quot;root/api/&amp;quot;
#define MYTY int
#define MYNIL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;针对这四种形式的常量宏，设计如下rust对应的声明宏：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;my_def!(MAX_SIZE: i32, 1024);
my_def!(MY_STR: &amp;amp;&amp;#39;static str, &amp;quot;root/api/&amp;quot;);
my_def!(MYTY, i32);
my_def!(MYNIL: bool, true);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述四种形式的define指令的常量宏包含了基础类型的定义、String非基础类型的定义、取类型别名和无替换文本的情况。据此，设计如下声明宏my_def：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;macro_rules! my_def &amp;#123;

     ($name: ident : $ty: ty, $value: expr) =&amp;gt; &amp;#123;

        #[allow(non_upper_case_globals)]

        pub const $name: $ty = $value;

      &amp;#125;;

  ($name: ident, $ty: ty) =&amp;gt; &amp;#123;

        #[allow(non_camel_case_types)]

        pub type $name = *mut $ty;

      &amp;#125;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;匹配规则中的ty标识为类型，expr标识为表达式，通过定义一个公开的const类型变量名为传入的name、值为传入的value来实现C中的常量宏的定义。使用方式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;my_def!(MAX_SIZE: i32, 1024);
my_def!(MY_STR: &amp;amp;&amp;#39;static str, &amp;quot;root/api/&amp;quot;);
my_def!(MYTY, i32);
my_def!(MYNIL: bool, true)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;功能与上述C中的define的四条宏指令功能一致。&lt;/p&gt;
&lt;p&gt;对于语句宏或函数宏，类似于C中的函数调用，替换文本replacement-list一般也是函数调用或者函数的函数体语句块。针对此种用法，设计如下与之功能对应的rust声明宏：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;macro_rules! function_macro &amp;#123;
      (
        $(#[$attr:meta])
        $vis:vis fn $name:ident ( $( $arg:ident : $t:ty ),* ) -&amp;gt; $ret:ty &amp;#123;
          $($body:tt)
        &amp;#125;
      ) =&amp;gt; &amp;#123;
        $(#[$attr])
        $vis fn $name ( $( $arg : $t ),* ) -&amp;gt; $ret &amp;#123;
          $($body)
        &amp;#125;
      &amp;#125;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;标识vis标明函数的可见性，**$( $arg:ident : $t:ty ),*&lt;strong&gt;和&lt;/strong&gt;$( $arg : $t ),*** 重复零次或者多次，因此参数的个数可以不受限制，而函数体的标识符为tt标识，是Token 树，可以被匹配的定界符 &lt;code&gt;(&lt;/code&gt;、&lt;code&gt;[]&lt;/code&gt; 或 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt; 中的单个或多个 token，因此该声明宏也能完成声明宏的嵌套，而对于函数体body部分可以借用c2rust进行代码转换。&lt;/p&gt;
&lt;p&gt;C中define语句：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;#define add(a, b) ((a) + (b))
#define myprint(a, b) 
&amp;#123; 
    printf(&amp;quot;%d\n&amp;quot;, (a) * (b)); 
    (a) * (b); 
&amp;#125;

#define mytotal(a, b) 
(&amp;#123; 
    int sum = 0; 
    for (int i = (a); i &amp;lt;= (b); i++) &amp;#123; 
        sum += i;
    &amp;#125; 
    sum; 
&amp;#125;)

#define factorial(n) 
(&amp;#123; 
    unsigned long long result; 
    if ((n) &amp;lt;= 1) &amp;#123; 
        result = 1; 
    &amp;#125; else &amp;#123; 
        result = (n) * factorial((n) - 1); 
    &amp;#125; 
    result; 
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用设计的声明宏模板，则对应rust以下形式：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;function_macro!(
    pub fn add(a: i32, b: i32) -&amp;gt; i32 &amp;#123;
        a + b
    &amp;#125;
);

function_macro!(
    pub fn myprint(a: i32, b: i32) -&amp;gt; i32 &amp;#123;
        println!(&amp;quot;&amp;#123;&amp;#125;&amp;quot;, a*b);
        a*b
    &amp;#125;
);

function_macro!(
    pub fn mytotal(a: i32, b: i32) -&amp;gt; i32 &amp;#123;
        let mut sum = 0;
        for i in a..=b &amp;#123;
               sum += i;
        &amp;#125;
        sum
    &amp;#125;
);

function_macro! &amp;#123;
    pub fn factorial(n: u64) -&amp;gt; u64 &amp;#123;
        if n &amp;lt;= 1 &amp;#123;
            1
        &amp;#125; else &amp;#123;
            n * factorial(n - 1)
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;条件编译宏指令&#34;&gt;&lt;a href=&#34;#条件编译宏指令&#34; class=&#34;headerlink&#34; title=&#34;条件编译宏指令&#34;&gt;&lt;/a&gt;&lt;strong&gt;条件编译宏指令&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;C中的条件编译相关的宏指令常用于各类C相关项目中，本课题也需考虑此类宏指令的对应规则。C中条件编译指令可分为以下几类:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;#ifdef 和 #ifndef 用于检查某个宏标识是否被定义，但只处理其后的第一个标识符，如#ifdef ABCD &amp;amp;&amp;amp; ABCD &amp;#x3D;&amp;#x3D; 1，只要#define了ABCD，其后ABCD &amp;#x3D;&amp;#x3D; 1无论为true或者false都将被丢弃，C中编译器只会对此写法提示warning，不会阻止编译。&lt;/li&gt;
&lt;li&gt;#if 、#elif 和 #else 用于条件编译判断&lt;/li&gt;
&lt;li&gt;#if defined() 和#if !defined()功能上等价于#ifdef 和 #ifndef，但其后的 &amp;amp;&amp;amp; 或者 || 接的标识符仍旧有效。&lt;/li&gt;
&lt;li&gt;#if 条件表达式，用于更为复杂的条件编译判断&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了便于统一处理，当处理#ifdef 和#ifndef时统一转换成#if defined() 和#if !defined()，并且抛弃#ifdef 和#ifndef后面的 &amp;amp;&amp;amp; 或者 || 的内容。进一步处理类似#if defined(ABCD) 和#if !defined(DCBA)时可以等价转化于#if (F_ABCD &amp;#x3D;&amp;#x3D; true) 和 #if !(F_DCBA &amp;#x3D;&amp;#x3D; true)给ABCD或DCBA加上前缀F_进行判断。考虑到在实际C编程中用#if 进行条件编译判断时可能出现未#define AAA的标识出现，所以在进行rust代码条件编译整个过程之前，需进行如下操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用我们的shell文件提取C中所有用于条件编译的符号，加上前缀F_保存到用户指定目标文件symbols.txt中，指令如下：.&amp;#x2F;extract_symbols.sh -c scan_condition.c -o symbols.txt   &lt;/li&gt;
&lt;li&gt;然后提取C文件中所有#define 的符号，保存到用户的指定目标文件defsyb.txt中，指令如下：.&amp;#x2F;extract_def.sh -c scan_condition.c -o defsyb.txt &lt;/li&gt;
&lt;li&gt;再通过将define过的符号设置true，未定义的符号设置为false，将这些符号作为bool变量保存起来，用于后续条件编译的判断，指令如下：. &amp;#x2F;codename symbols.txt defsyb.txt&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至此，C中条件编译皆可转化为#if #elif #else此类形式的指令了，对于此种形式指令我们设计了如下rust声明宏进行替换：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;macro_rules! c_conditional &amp;#123;
    (if $condition:expr =&amp;gt; &amp;#123; $($if_block:tt)* &amp;#125; $(else if $elif_condition:expr =&amp;gt; &amp;#123; 			$($elif_block:tt)* &amp;#125;) $(else =&amp;gt; &amp;#123; $($else_block:tt)* &amp;#125;)?)
    =&amp;gt; &amp;#123;
        if $condition &amp;#123;
            $($if_block)
        &amp;#125;
        $(else if $elif_condition &amp;#123;
            $($elif_block)
        &amp;#125;)
        $(else &amp;#123;
            $($else_block)
        &amp;#125;)?
    &amp;#125;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 调用方法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;c_conditional!(
    if !(F_ABCD == true) =&amp;gt; &amp;#123; // some code
        println!(&amp;quot;F_ABCD is false&amp;quot;);
    &amp;#125;
    else if F_ABCD == true &amp;amp;&amp;amp; ABCD == 3 =&amp;gt; &amp;#123; // some code
        println!(&amp;quot;F_ABCD is true and ABCD is 3&amp;quot;);
    &amp;#125;
    else =&amp;gt; &amp;#123; // some code
        println!(&amp;quot;F_ABCD is true and ABCD is not 3&amp;quot;);
    &amp;#125;
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同时支持条件编译的嵌套：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;c_conditional!(
    if !(F_ABCD == true) =&amp;gt; &amp;#123; // some code
        c_conditional!(
            if !(F_ABCD == true) =&amp;gt; &amp;#123; // some code
                println!(&amp;quot;F_ABCD is false&amp;quot;);
            &amp;#125;
            else if F_ABCD == true &amp;amp;&amp;amp; ABCD == 3 =&amp;gt; &amp;#123; // some code
                println!(&amp;quot;F_ABCD is true and ABCD is 3&amp;quot;);
            &amp;#125;
            else =&amp;gt; &amp;#123; // some code
                println!(&amp;quot;F_ABCD is true and ABCD is not 3&amp;quot;);
            &amp;#125;
        );
    &amp;#125;
    else if F_ABCD == true &amp;amp;&amp;amp; ABCD == 3 =&amp;gt; &amp;#123; // some code
        println!(&amp;quot;F_ABCD is true and ABCD is 3&amp;quot;);
    &amp;#125;
    else =&amp;gt; &amp;#123; // some code
        println!(&amp;quot;111&amp;quot;);
        c_conditional!(
            if !(F_ABCD == true) =&amp;gt; &amp;#123; // some code
                println!(&amp;quot;F_ABCD is false&amp;quot;);
            &amp;#125;
            else if F_ABCD == true &amp;amp;&amp;amp; ABCD == 3 =&amp;gt; &amp;#123; // some code
                println!(&amp;quot;F_ABCD is true and ABCD is 3&amp;quot;);
            &amp;#125;
            else =&amp;gt; &amp;#123; // some code
                println!(&amp;quot;000000  F_ABCD is true and ABCD is not 3&amp;quot;);
            &amp;#125;
        );
    &amp;#125;
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;关于C中的条件编译，常常使用一些操作系统或者其他一些环境相关的预定义宏作为条件编译判断的部分，如以下形式：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;#ifdef __LINUX__
    #include &amp;quot;a.h&amp;quot;
      // some code
#elif __WINDOWS__
    #include &amp;quot;b.h&amp;quot;
    // some code
#else
    // some code
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;关于此类情景，通过收集当前系统执行环境的环境变量，在进行整个C宏转化为Rust宏之前，就用define中的常量宏进行定义设置为true，后续再正常进行相关宏的替换操作。&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;在本文中我们提出了一种C语言自动转换为Rust语言的对应规则。该规则设计的关键点在于采用Rust声明宏完成C的替换文本宏和条件编译宏的对应，当编译器在编译代码时遇到使用声明宏的地方，它会根据声明宏的规则进行模式匹配，并将匹配的代码进行相应的替换，也即是声明宏的替换是在编译时进行的，而不是在运行时。通过对设计的相关声明宏模板进行单元测试，测试结果证明我们设计的对应规则是有效可行的。&lt;/p&gt;
</content>
        <category term="计算机科学" scheme="https://hdqjl317.github.io/categories/computer-science/" />
        <category term="C2Rust" scheme="https://hdqjl317.github.io/tags/C2Rust/" />
        <updated>2023-06-30T12:18:31.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2023/04/25/computer-science/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%BF%9B%E7%A8%8B%E5%88%87%E6%8D%A2/</id>
        <title>Linux操作系统深入理解进程切换</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2023/04/25/computer-science/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%BF%9B%E7%A8%8B%E5%88%87%E6%8D%A2/"/>
        <content type="html">&lt;h3 id=&#34;概述&#34;&gt;&lt;a href=&#34;#概述&#34; class=&#34;headerlink&#34; title=&#34;概述&#34;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;当一个进程正在运行时触发系统调用或被中断，将进行中断上下文的切换，之后执行ISR中断服务，在中断处理结束后，使用_schedule()函数进行进程切换。&lt;/p&gt;
&lt;p&gt;schedule()函数首先从CPU任务队列中取出当前进程的标识符记为prev进程。然后通过进程调度算法确定下一个要被换上的进程，记为next进程。之后，检查next如果和prev进程不一样，调用context_switch()函数进行上下文切换，next进程进入CPU运行。&lt;/p&gt;
&lt;p&gt;在context_switch()中调用switch_to()进行寄存器和堆栈的切换，switch_to()会调用switch_to_asm()函数，在switch_to_asm()的中进行了从prev内核堆栈到next内核堆栈的切换，在最后不使用ret指令，而是通过jmp指令跳转到switch_to()函数，在switch_to()函数的结尾调用return返回，因为在switch_to_asm()中进行了堆栈的切换，因此_switch_to()返回后，回到的是next进程的内核堆栈，而不是prev进程的内核堆栈。&lt;/p&gt;
&lt;h3 id=&#34;具体过程分析&#34;&gt;&lt;a href=&#34;#具体过程分析&#34; class=&#34;headerlink&#34; title=&#34;具体过程分析&#34;&gt;&lt;/a&gt;具体过程分析&lt;/h3&gt;&lt;p&gt;schedule()函数调用context_switch()函数进行上下文切换，在kernel&amp;#x2F;sched&amp;#x2F;core.c中查看函数的定义：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;context_switch(struct rq *rq, struct task_struct *prev,
           struct task_struct *next, struct rq_flags *rf)
&amp;#123;
    prepare_task_switch(rq, prev, next);

    arch_start_context_switch(prev);

    if (!next-&amp;gt;mm) &amp;#123;                                // to kernel
        enter_lazy_tlb(prev-&amp;gt;active_mm, next);

        next-&amp;gt;active_mm = prev-&amp;gt;active_mm;
        if (prev-&amp;gt;mm)                           // from user
            mmgrab(prev-&amp;gt;active_mm);
        else
            prev-&amp;gt;active_mm = NULL;
    &amp;#125; else &amp;#123;                                        // to user
        membarrier_switch_mm(rq, prev-&amp;gt;active_mm, next-&amp;gt;mm);
        switch_mm_irqs_off(prev-&amp;gt;active_mm, next-&amp;gt;mm, next);

        if (!prev-&amp;gt;mm) &amp;#123;                        // from kernel
            /* will mmdrop() in finish_task_switch(). */
            rq-&amp;gt;prev_mm = prev-&amp;gt;active_mm;
            prev-&amp;gt;active_mm = NULL;
        &amp;#125;
    &amp;#125;

    rq-&amp;gt;clock_update_flags &amp;amp;= ~(RQCF_ACT_SKIP|RQCF_REQ_SKIP);

    prepare_lock_switch(rq, next, rf);

    switch_to(prev, next, prev);
    barrier();

    return finish_task_switch(prev);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;content_switch 函数有三个参数：rq、prev、next，其中 rq 指向本次进程切换发生的 running queue(进程就绪队列)；prev 和 next 分别指向切换前后进程的进程描述符。实现的功能如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在进程切换之前调用prepare_task_switch()，然后内核会执行与体系结构相关的一些调测指令，该函数和 finish_task_switch()成对出现，表示完成上下文的切换。&lt;/li&gt;
&lt;li&gt;arch_start_context_switch()给各个体系结构专有的开始上下文切换的工作提供入口&lt;/li&gt;
&lt;li&gt;完成进程地址空间的切换。这里通过判断一个 task_struct 的 mm 成员是否为空来判断它是一个用户进程还是内核级线程，为内核级线程则调用enter_lazy_tlb()。&lt;/li&gt;
&lt;li&gt;调用switch_to()切换寄存器状态和栈，swtich_to 函数会进一步调用 __switch_to_asm()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;__switch_to_asm()实现是与体系结构相关的，这里我们先以X86_64为例进行分析：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;assembly&#34;&gt;ENTRY(__switch_to_asm)
  UNWIND_HINT_FUNC
  /*
   * Save callee-saved registers
   * This must match the order in inactive_task_frame
   */
  pushq  %rbp
  pushq  %rbx
  pushq  %r12
  pushq  %r13
  pushq  %r14
  pushq  %r15

  /* switch stack */
  movq  %rsp, TASK_threadsp(%rdi) // 保存旧进程的栈顶
  movq  TASK_threadsp(%rsi), %rsp // 恢复新进程的栈顶

  /* restore callee-saved registers */
  popq  %r15
  popq  %r14
  popq  %r13
  popq  %r12
  popq  %rbx
  popq  %rbp

  jmp  __switch_to
END(__switch_to_asm)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;两条 movq 语句就是新旧进程的分界线，随着内核栈顶的切换，内核栈空间也就切换到了新进程，之后只需要弹出栈中保存的各个寄存器的值即可恢复寄存器状态。将__switch_to_asm和switch_to结合起来，发现是call指令和ret指令的配对出现。call指令压栈RIP寄存器到进程切换前的prev进程内核堆栈，而ret指令出栈存入RIP寄存器的是进程切换之后的next进程的内核堆栈栈顶数据，所以 ret 恢复的就是 next 进程内核堆栈中的 rip 值，即实现了 rip 值的保存与修改。&lt;/p&gt;
&lt;p&gt;再看一下arm64架构下__switch_to_asm()的实现 ，其过程就是保存和恢复cpu_context 结构体，在arm中其函数和宏调用过程：switch_to -&amp;gt; switch_to -&amp;gt; cpu_switch_to，具体的切换发生在cpu_switch_to中其代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;assembly&#34;&gt;ENTRY(cpu_switch_to) 			
    mov	x10, #THREAD_CPU_CONTEXT 	// 寄存器x10存放thread.cpu_context偏移
    add	x8, x0, x10 				// x0与偏移量相加后存入x8，获取旧进程cpu_context的地址
    mov	x9, sp 						// 将栈顶指针sp保存在x9寄存器
    stp	x19, x20, [x8], #16			// 将寄存器x19～x29保存，保存现场
    stp	x21, x22, [x8], #16
    stp	x23, x24, [x8], #16
    stp	x25, x26, [x8], #16
    stp	x27, x28, [x8], #16
    stp	x29, x9, [x8], #16 //x29是frame pointer，x9是stack pointer，lr是pc值
    str	lr, [x8]
    
    add	x8, x1, x10 				// 获取访问next进程的cpu_context的指针
    ldp	x19, x20, [x8], #16			// 恢复next进程的现场
    ldp	x21, x22, [x8], #16
    ldp	x23, x24, [x8], #16
    ldp	x25, x26, [x8], #16
    ldp	x27, x28, [x8], #16
    ldp	x29, x9, [x8], #16
    ldr	lr, [x8]
    mov	sp, x9	
    msr	sp_el0, x1
    
    ret			 					// 此时ret将next进程的lr寄存器的值加载到PC，进程切换完毕
ENDPROC(cpu_switch_to)
NOKPROBE(cpu_switch_to)
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="计算机科学" scheme="https://hdqjl317.github.io/categories/computer-science/" />
        <category term="Linux" scheme="https://hdqjl317.github.io/tags/Linux/" />
        <updated>2023-04-25T12:35:51.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2023/04/25/computer-science/c2rust%E5%AE%8F%E6%8C%87%E4%BB%A4%E8%BD%AC%E5%8C%96%E8%A7%84%E5%88%992/</id>
        <title>c2rust宏指令转化规则2</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2023/04/25/computer-science/c2rust%E5%AE%8F%E6%8C%87%E4%BB%A4%E8%BD%AC%E5%8C%96%E8%A7%84%E5%88%992/"/>
        <content type="html">&lt;p&gt;c2rust条件编译转化对应的实际例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;// C
#ifdef ABCD
    printf(&amp;quot;1: yes\n&amp;quot;);
#else
    printf(&amp;quot;1: no\n&amp;quot;);
#endif

#ifndef ABCD
    printf(&amp;quot;2: no1\n&amp;quot;);
#elif ABCD == 2
    printf(&amp;quot;2: yes\n&amp;quot;);
#else
    printf(&amp;quot;2: no2\n&amp;quot;);
#endif


// Rust example
my_def!(F_ABCD: bool, true);
my_def!(ABCD: i32, 1);
my_def!(F_DCBA: bool, true);
my_def!(DCBA: i32, 2);       
/*
#ifdef ABCD    
    &amp;#123;&amp;#125;
#else
    &amp;#123;&amp;#125;
*/
cfg_if::cfg_if! &amp;#123;
    if F_ABCD == true &amp;#123;
        // specific code
    &amp;#125; else &amp;#123;
        // generic code
    &amp;#125;
&amp;#125;
/*
#ifdef ABCD 
    &amp;#123;&amp;#125;
#elif ABCD == 3
    &amp;#123;&amp;#125;
#else
    &amp;#123;&amp;#125;
*/     
cfg_if::cfg_if! &amp;#123;
    if F_ABCD == true  &amp;#123;
        // some code
    &amp;#125; else if F_ABCD == true &amp;amp;&amp;amp; ABCD == 3 &amp;#123;
        // some code
    &amp;#125; else &amp;#123;
        // some code
    &amp;#125;
&amp;#125;
/*     
#if  define(ABCD) &amp;amp;&amp;amp; ABCD == 1 || DCBA == 2
    &amp;#123;&amp;#125;
#else
    &amp;#123;&amp;#125;
*/ 
cfg_if::cfg_if! &amp;#123;
    if F_ABCD == true &amp;amp;&amp;amp; ABCD == 1 || F_DCBA == true &amp;amp;&amp;amp; DCBA == 2 &amp;#123;
        // some code
    &amp;#125; else &amp;#123;
        // some code
    &amp;#125;
&amp;#125;
/*     
#if  !define(DDD) &amp;amp;&amp;amp; ABCD == 1 || DCBA == 2
    &amp;#123;&amp;#125;
#elif DCBA == 3 
    &amp;#123;&amp;#125;
#else
    &amp;#123;&amp;#125;
*/ 
cfg_if::cfg_if! &amp;#123;
    if !(F_DDD == true) &amp;amp;&amp;amp; F_ABCD == true &amp;amp;&amp;amp; ABCD == 1 || F_DCBA == true &amp;amp;&amp;amp; DCBA == 2 &amp;#123;
        // some code
    &amp;#125; else if F_DCBA == true &amp;amp;&amp;amp; DCBA == 3 &amp;#123;
        // some code
    &amp;#125; else &amp;#123;
        // some code
    &amp;#125;
&amp;#125;
                
/*
#ifndef ABCD
    &amp;#123;&amp;#125;
#else
    &amp;#123;&amp;#125;
*/
cfg_if::cfg_if! &amp;#123;
    if !(F_ABCD == true) &amp;#123;
        // some code
    &amp;#125; else &amp;#123;
        // some code
    &amp;#125;
&amp;#125;
/*
#ifndef ABCD 
    &amp;#123;&amp;#125;
#elif ABCD == 3
    &amp;#123;&amp;#125;
#else
    &amp;#123;&amp;#125;
*/ 
cfg_if::cfg_if! &amp;#123;
    if !(F_ABCD == true) &amp;#123;
        // some code
    &amp;#125; else if F_ABCD == true &amp;amp;&amp;amp; ABCD == 3 &amp;#123;
        // some code
    &amp;#125; else &amp;#123;
        // some code
    &amp;#125;
&amp;#125;
// “#ifdef 标识符”与“#if defined 标识符”实质上等价。
// “#ifndef 标识符”与“#if !defined 标识符”实质上等价。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;声明宏c_conditional用于rust条件编译的选择，结合rust常量宏的定义方法进行条件编译：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;// Rust
my_def!(MAX_SIZE: i32, 1024);
my_def!(MY_STR: &amp;amp;&amp;#39;static str, &amp;quot;root/api/&amp;quot;);
my_def!(MYTY, i32);
my_def!(MYNIL: bool, true);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;声明宏c_conditional具体的定义及使用示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;#[macro_export]
macro_rules! c_conditional &amp;#123;
    (if $condition:expr =&amp;gt; &amp;#123; $($if_block:tt)* &amp;#125; $(else if $elif_condition:expr =&amp;gt; &amp;#123; $($elif_block:tt)* &amp;#125;)* $(else =&amp;gt; &amp;#123; $($else_block:tt)* &amp;#125;)?) =&amp;gt; &amp;#123;
        if $condition &amp;#123;
            $($if_block)*
        &amp;#125; 
        $(else if $elif_condition &amp;#123;
            $($elif_block)*
        &amp;#125;)*
        $(else &amp;#123;
            $($else_block)*
        &amp;#125;)?
    &amp;#125;;
&amp;#125;

// 定义一些变量
const F_ABCD: bool = true;
const ABCD: i32 = 1;
const F_DCBA: bool = true;
const DCBA: i32 = 2;
const F_DDD: bool = false;

// 定义一个测试函数，用于测试声明宏
fn test_macro() &amp;#123;
    c_conditional!(
        if F_ABCD == true =&amp;gt; &amp;#123; // specific code
            println!(&amp;quot;F_ABCD is true&amp;quot;);
        &amp;#125;
        else =&amp;gt; &amp;#123; // generic code
            println!(&amp;quot;F_ABCD is false&amp;quot;);
        &amp;#125;
    );
    
    c_conditional!(
        if !(F_DCBA == true) =&amp;gt; &amp;#123; // some code
            println!(&amp;quot;F_DCBA is false&amp;quot;);
        &amp;#125;
        else if F_ABCD == true &amp;amp;&amp;amp; ABCD == 3 =&amp;gt; &amp;#123; // some code
            println!(&amp;quot;F_ABCD is true and ABCD is 3&amp;quot;);
        &amp;#125;
        else =&amp;gt; &amp;#123; // some code
            println!(&amp;quot;F_ABCD is true but ABCD is not 3&amp;quot;);
        &amp;#125;
    );
    
    c_conditional!(
        if F_ABCD == true &amp;amp;&amp;amp; ABCD == 1 || F_DCBA == true &amp;amp;&amp;amp; DCBA == 2 =&amp;gt; &amp;#123; // some code
            println!(&amp;quot;F_ABCD is true and ABCD is 1 or F_DCBA is true and DCBA is 2&amp;quot;);
        &amp;#125;
        else =&amp;gt; &amp;#123; // some code
            println!(&amp;quot;F_ABCD is false or ABCD is not 1 and F_DCBA is false or DCBA is not 2&amp;quot;);
        &amp;#125;
    );
    
    c_conditional!(
        if !(F_DDD == true) &amp;amp;&amp;amp; F_ABCD == true &amp;amp;&amp;amp; ABCD == 1 || F_DCBA == true &amp;amp;&amp;amp; DCBA == 2 =&amp;gt; &amp;#123; // some code
            println!(&amp;quot;F_DDD is false and F_ABCD is true and ABCD is 1 or F_DCBA is true and DCBA is 2&amp;quot;);
        &amp;#125;
        else if F_DCBA == true &amp;amp;&amp;amp; DCBA == 3 =&amp;gt; &amp;#123; // some code
            println!(&amp;quot;F_DDD is false and F_DCBA is true and DCBA is 3&amp;quot;);
        &amp;#125;
        else =&amp;gt; &amp;#123; // some code
            println!(&amp;quot;F_DDD is true or F_ABCD is false or ABCD is not 1 and F_DCBA is false or DCBA is not 2 or 3&amp;quot;);
        &amp;#125;
    );
    
    c_conditional!(
        if !(F_ABCD == true) =&amp;gt; &amp;#123; // some code
            println!(&amp;quot;F_ABCD is false&amp;quot;);
        &amp;#125;
        else if F_ABCD == true &amp;amp;&amp;amp; ABCD == 3 =&amp;gt; &amp;#123; // some code
            println!(&amp;quot;F_ABCD is true and ABCD is 3&amp;quot;);
        &amp;#125;
        else =&amp;gt; &amp;#123; // some code
            println!(&amp;quot;F_ABCD is true and ABCD is not 3&amp;quot;);
        &amp;#125;
    );

    c_conditional!(
        if !(F_ABCD == true) =&amp;gt; &amp;#123; // some code
            c_conditional!(
                if !(F_ABCD == true) =&amp;gt; &amp;#123; // some code
                    println!(&amp;quot;F_ABCD is false&amp;quot;);
                &amp;#125;
                else if F_ABCD == true &amp;amp;&amp;amp; ABCD == 3 =&amp;gt; &amp;#123; // some code
                    println!(&amp;quot;F_ABCD is true and ABCD is 3&amp;quot;);
                &amp;#125;
                else =&amp;gt; &amp;#123; // some code
                    println!(&amp;quot;F_ABCD is true and ABCD is not 3&amp;quot;);
                &amp;#125;
            );
        &amp;#125;
        else if F_ABCD == true &amp;amp;&amp;amp; ABCD == 3 =&amp;gt; &amp;#123; // some code
            println!(&amp;quot;F_ABCD is true and ABCD is 3&amp;quot;);
        &amp;#125;
        else =&amp;gt; &amp;#123; // some code
            println!(&amp;quot;111&amp;quot;);
            c_conditional!(
                if !(F_ABCD == true) =&amp;gt; &amp;#123; // some code
                    println!(&amp;quot;F_ABCD is false&amp;quot;);
                &amp;#125;
                else if F_ABCD == true &amp;amp;&amp;amp; ABCD == 3 =&amp;gt; &amp;#123; // some code
                    println!(&amp;quot;F_ABCD is true and ABCD is 3&amp;quot;);
                &amp;#125;
                else =&amp;gt; &amp;#123; // some code
                    println!(&amp;quot;000000   F_ABCD is true and ABCD is not 3&amp;quot;);
                &amp;#125;
            );
        &amp;#125;
    );
&amp;#125;

// main 函数
fn main() &amp;#123;
    test_macro();
&amp;#125;

/*输出
F_ABCD is true
F_ABCD is true but ABCD is not 3
F_ABCD is true and ABCD is 1 or F_DCBA is true and DCBA is 2
F_DDD is false and F_ABCD is true and ABCD is 1 or F_DCBA is true and DCBA is 2
F_ABCD is true and ABCD is not 3
111
000000   F_ABCD is true and ABCD is not 3
*/
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="计算机科学" scheme="https://hdqjl317.github.io/categories/computer-science/" />
        <category term="C2Rust" scheme="https://hdqjl317.github.io/tags/C2Rust/" />
        <updated>2023-04-25T12:28:21.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2023/04/25/computer-science/c2rust%E5%AE%8F%E6%8C%87%E4%BB%A4%E8%BD%AC%E5%8C%96%E8%A7%84%E5%88%991/</id>
        <title>c2rust宏指令转化规则1</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2023/04/25/computer-science/c2rust%E5%AE%8F%E6%8C%87%E4%BB%A4%E8%BD%AC%E5%8C%96%E8%A7%84%E5%88%991/"/>
        <content type="html">&lt;h3 id=&#34;常量宏&#34;&gt;&lt;a href=&#34;#常量宏&#34; class=&#34;headerlink&#34; title=&#34;常量宏&#34;&gt;&lt;/a&gt;常量宏&lt;/h3&gt;&lt;p&gt;C中常量宏的四种使用方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#define MAX_SIZE 1024
#define MY_STR &amp;quot;root/api/&amp;quot;
#define MYTY int
#define MYNIL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下是对应的Rust版本的处理方案：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;macro_rules! my_def &amp;#123;
    ($name: ident : $ty: ty, $value: expr) =&amp;gt; &amp;#123;
        #[allow(non_upper_case_globals)]
        pub const $name: $ty = $value;
    &amp;#125;;
    ($name: ident, $ty: ty) =&amp;gt; &amp;#123;
        #[allow(non_camel_case_types)]
        pub type $name = *mut $ty;
    &amp;#125;;
&amp;#125;

my_def!(MAX_SIZE: i32, 1024);
my_def!(MY_STR: &amp;amp;&amp;#39;static str, &amp;quot;root/api/&amp;quot;);
my_def!(MYTY, i32);
my_def!(MYNIL: bool, true);

fn main() &amp;#123;
    let num = MAX_SIZE;
    println!(&amp;quot;MAX_SIZE = &amp;#123;&amp;#125;&amp;quot;, num);

    let mystr = MY_STR;
    let user = MY_STR.to_owned() + &amp;quot;jiale/&amp;quot;;
    println!(&amp;quot;MY_STR = &amp;#123;&amp;#125;, user = &amp;#123;&amp;#125;&amp;quot;, mystr, user);

    let jude = MYNIL;
    if jude == true &amp;#123;
        println!(&amp;quot;This is MYNIL.&amp;quot;);
    &amp;#125;

    let mut x: i32 = 42;
    let p: MYTY = &amp;amp;mut x;
    unsafe &amp;#123;
        *p = 123;
        println!(&amp;quot;x = &amp;#123;&amp;#125;&amp;quot;, x); // 输出 x = 123
    &amp;#125;
&amp;#125;

/*
输出：
MAX_SIZE = 1024
MY_STR = root/api/, user = root/api/jiale/
This is MYNIL.
x = 123
*/
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;语句宏和函数宏&#34;&gt;&lt;a href=&#34;#语句宏和函数宏&#34; class=&#34;headerlink&#34; title=&#34;语句宏和函数宏&#34;&gt;&lt;/a&gt;语句宏和函数宏&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;macro_rules! function_macro &amp;#123;
    (
        $(#[$attr:meta])*
        $vis:vis fn $name:ident ( $( $arg:ident : $t:ty ),* ) -&amp;gt; $ret:ty &amp;#123;
            $($body:tt)*
        &amp;#125;
    ) =&amp;gt; &amp;#123;
        $(#[$attr])*
        $vis fn $name ( $( $arg : $t ),* ) -&amp;gt; $ret &amp;#123;
            $($body)*
        &amp;#125;
    &amp;#125;;
&amp;#125;
function_macro!(
    pub fn add(a: i32, b: i32) -&amp;gt; i32 &amp;#123;
        a + b
    &amp;#125;
);
function_macro!(
    pub fn myprint(a: i32, b: i32) -&amp;gt; i32 &amp;#123;
        println!(&amp;quot;&amp;#123;&amp;#125;&amp;quot;, a*b);
        a*b
    &amp;#125;
);
function_macro!(
    pub fn mymax(a: i32, b: i32) -&amp;gt; i32 &amp;#123;
        if a &amp;gt; b &amp;#123;
            a
        &amp;#125; else &amp;#123;
            b
        &amp;#125;
    &amp;#125;
);
function_macro!(
    pub fn mytotal(a: i32, b: i32) -&amp;gt; i32 &amp;#123;
        let mut sum = 0;
        for i in a..=b &amp;#123;
            sum += i;
        &amp;#125;
        sum
    &amp;#125;
);
function_macro! &amp;#123;
    pub fn factorial(n: u64) -&amp;gt; u64 &amp;#123;
        if n &amp;lt;= 1 &amp;#123;
            1
        &amp;#125; else &amp;#123;
            n * factorial(n - 1)
        &amp;#125;
    &amp;#125;
&amp;#125;

fn main() &amp;#123;
    let a = 1;
    let b = 2;
    let c = add(a, b);
    println!(&amp;quot;&amp;#123;&amp;#125;&amp;quot;, c);

    let d = myprint(a,b);
    println!(&amp;quot;a * b = &amp;#123;&amp;#125;&amp;quot;, d);

    let maxnum = mymax(1,2);
    println!(&amp;quot;maxnum = &amp;#123;&amp;#125;&amp;quot;, maxnum);

    let total = mytotal(1,10);
    println!(&amp;quot;total = &amp;#123;&amp;#125;&amp;quot;, total);

    let result = factorial(5);
    println!(&amp;quot;5! = &amp;#123;&amp;#125;&amp;quot;, result); 
&amp;#125;

/*
输出：
3
2
a * b = 2
maxnum = 2
total = 55
5! = 120
*/
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="计算机科学" scheme="https://hdqjl317.github.io/categories/computer-science/" />
        <category term="C2Rust" scheme="https://hdqjl317.github.io/tags/C2Rust/" />
        <updated>2023-04-25T12:24:23.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2023/04/02/computer-science/Rust%E5%A3%B0%E6%98%8E%E5%AE%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BE%8B%E5%AD%90/</id>
        <title>Rust声明宏的一些例子</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2023/04/02/computer-science/Rust%E5%A3%B0%E6%98%8E%E5%AE%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BE%8B%E5%AD%90/"/>
        <content type="html">&lt;p&gt;eg1:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;macro_rules! my_macro &amp;#123;
    // 定义宏函数
    ($arg1:expr, $arg2:expr) =&amp;gt; &amp;#123;
        // 定义宏函数体，此处为求两个参数的和
        ($arg1) + ($arg2)
    &amp;#125;;
&amp;#125;

fn main() &amp;#123;
    // 调用宏函数
    let x = my_macro!(1, 2);
    println!(&amp;quot;&amp;#123;&amp;#125;&amp;quot;, x);  // 输出 &amp;quot;3&amp;quot;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;eg2:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;macro_rules! c_max &amp;#123;
    ($x:expr, $y:expr) =&amp;gt; &amp;#123;
        if $x &amp;gt; $y &amp;#123;
            $x
        &amp;#125; else &amp;#123;
            $y
        &amp;#125;
    &amp;#125;;
&amp;#125;

fn main() &amp;#123;
    let a = 3;
    let b = 5;
    let max = c_max!(a, b);
    println!(&amp;quot;The max value is &amp;#123;&amp;#125;&amp;quot;, max);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;eg3:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;macro_rules! SQUARE &amp;#123;
    ($x:expr) =&amp;gt; &amp;#123;
        ($x) * ($x)
    &amp;#125;;
&amp;#125;

fn main() &amp;#123;
    let x = 2;
    let result = SQUARE!(x + x);
    println!(&amp;quot;The square of &amp;#123;&amp;#125; is &amp;#123;&amp;#125;&amp;quot;, x + x, result);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;eg4:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;macro_rules! print_fmt &amp;#123;
    ($fmt:expr) =&amp;gt; (print!(&amp;quot;&amp;#123;&amp;#125;&amp;quot;, $fmt));
    ($fmt:expr, $($arg:tt)*) =&amp;gt; (print_fmt_args!($fmt, $($arg)*));
&amp;#125;

macro_rules! print_fmt_args &amp;#123;
    ($fmt:expr, $($arg:tt)*) =&amp;gt; &amp;#123;&amp;#123;
        #[cfg(target_os = &#34;linux&#34;)]
        &amp;#123;
            print!($fmt, $($arg)*);
        &amp;#125;

        #[cfg(target_os = &#34;windows&#34;)]
        &amp;#123;
            use std::os::windows::raw::c_int;
            extern &#34;system&#34; &amp;#123;
                fn printf(_: *const i8, ...) -&gt; c_int;
            &amp;#125;

            let c_str = std::ffi::CString::new($fmt).unwrap();
            unsafe &amp;#123; printf(c_str.as_ptr(), $($arg)*) &amp;#125;;
        &amp;#125;
    &amp;#125;&amp;#125;;
&amp;#125;

fn main() &amp;#123;
    let name = &amp;quot;Rust&amp;quot;;
    let age = 5;
    let pi = 3.14159;

    print_fmt!(&amp;quot;Hello, my name is &amp;#123;&amp;#125; and I&amp;#39;m &amp;#123;&amp;#125; years old. PI is &amp;#123;:.2&amp;#125;\n&amp;quot;, name, age, pi);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp5:&lt;/p&gt;
&lt;p&gt;这个例子是一个使用 Rust 声明宏来实现一个简单的链表的例子。这个宏叫做 &lt;code&gt;list!&lt;/code&gt;，它可以帮助我们生成一个链表。这个宏支持三种不同的用法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;list!()&lt;/code&gt;：生成一个空链表（&lt;code&gt;Nil&lt;/code&gt;）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list!(expr)&lt;/code&gt;：生成一个只有一个元素的链表，元素的值为 &lt;code&gt;expr&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list!(expr1, expr2, ..., exprn)&lt;/code&gt;：生成一个包含多个元素的链表，元素的值分别为 &lt;code&gt;expr1&lt;/code&gt; 到 &lt;code&gt;exprn&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在这个例子中，我们使用了 &lt;code&gt;Box&lt;/code&gt; 来实现链表的尾部指针，以避免使用递归结构导致的栈溢出问题。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;macro_rules! list &amp;#123;
    () =&amp;gt; &amp;#123;
        Nil
    &amp;#125;;
    ($e:expr) =&amp;gt; &amp;#123;
        Cons($e, Box::new(Nil))
    &amp;#125;;
    ($e:expr, $($tail:tt)*) =&amp;gt; &amp;#123;&amp;#123;
        let tail = list!($($tail)*);
        Cons($e, Box::new(tail))
    &amp;#125;&amp;#125;;
&amp;#125;

enum List &amp;#123;
    Cons(i32, Box&amp;lt;List&amp;gt;),
    Nil,
&amp;#125;

fn main() &amp;#123;
    let list = list![1, 2, 3];
    println!(&amp;quot;&amp;#123;:?&amp;#125;&amp;quot;, list);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp6:&lt;/p&gt;
&lt;p&gt;这个例子实现了一个计算平均数的宏，可以接受任意数量的参数，忽略空值，计算非空值的平均值并返回。宏使用了 Rust 的模式匹配语法，同时也用到了 Rust 的闭包和类型推导等特性。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;macro_rules! calculate &amp;#123;
    ($($args:tt)*) =&amp;gt; &amp;#123;&amp;#123;
        let mut sum = 0;
        let mut count = 0;
        $(
            if let Some(val) = $args &amp;#123;
                sum += val;
                count += 1;
            &amp;#125;
        )*
        if count &gt; 0 &amp;#123;
            Some(sum / count)
        &amp;#125; else &amp;#123;
            None
        &amp;#125;
    &amp;#125;&amp;#125;;
&amp;#125;

fn main() &amp;#123;
    let result = calculate!(Some(10), None, Some(20), Some(30), None, Some(40));
    println!(&amp;quot;&amp;#123;:?&amp;#125;&amp;quot;, result);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp7:&lt;/p&gt;
&lt;p&gt;这个宏定义了一个结构体和一组方法，其中方法可以有不同的参数和返回值。通过使用宏规则中的 &lt;code&gt;$($method:ident ($($param:ident : $type:ty),*) -&amp;gt; $ret:ty)*&lt;/code&gt;，可以将方法名称、参数列表和返回值类型分别提取出来，然后使用嵌套的宏规则实现方法的实现。这个例子相比之前的例子更加复杂，宏规则中涉及到了宏的嵌套、可变参数和泛型类型等高级特性。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;macro_rules! define_struct_and_methods &amp;#123;
    ($name:ident, $field:ident, $($method:ident ($($param:ident : $type:ty),*) -&amp;gt; $ret:ty)*) =&amp;gt; &amp;#123;
        struct $name &amp;#123;
            $field: i32,
        &amp;#125;
        
        impl $name &amp;#123;
            fn new($field: i32) -&amp;gt; Self &amp;#123;
                $name &amp;#123; $field &amp;#125;
            &amp;#125;
            $($(
            fn $method(&amp;amp;self, $($param : $type),*) -&amp;gt; $ret &amp;#123;
                // method implementation here
            &amp;#125;
            )*)*
        &amp;#125;
    &amp;#125;;
&amp;#125;

define_struct_and_methods!(
    MyStruct, 
    my_field, 
    method1() -&amp;gt; i32, 
    method2(x: i32) -&amp;gt; bool, 
    method3(x: i32, y: i32) -&amp;gt; String
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp8:&lt;/p&gt;
&lt;p&gt;这是一个用于生成哈希映射的声明宏。这个宏可以接受 1 个或多个键值对参数，每个键值对之间使用逗号分隔，键和值之间使用 &lt;code&gt;=&amp;gt;&lt;/code&gt; 分隔。&lt;/p&gt;
&lt;p&gt;这个宏会生成一个 &lt;code&gt;HashMap&lt;/code&gt;，其中包含三个键值对。如果调用时只传入一个参数，则该参数必须是偶数个，因为每个键都必须有一个对应的值。如果键或值是表达式，则需要用括号将它们括起来。&lt;/p&gt;
&lt;p&gt;这个宏的实现使用了 Rust 中的 &lt;code&gt;std::collections::HashMap&lt;/code&gt;，并且使用了一些比较复杂的宏技巧来计算参数个数，并生成一个指定容量的哈希映射。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;macro_rules! map &amp;#123;
    (@single $($x:tt)*) =&amp;gt; (());
    (@count $($rest:expr),*) =&amp;gt; (&amp;lt;[()]&amp;gt;::len(&amp;amp;[$(map!(@single $rest)),*]));
    ($($key:expr =&amp;gt; $value:expr,)+) =&amp;gt; &amp;#123; map!($($key =&amp;gt; $value),+) &amp;#125;;
    ($($key:expr =&amp;gt; $value:expr),*) =&amp;gt; &amp;#123;
        &amp;#123;
            let _cap = map!(@count $($key),*);
            let mut _map = ::std::collections::HashMap::with_capacity(_cap);
            $(
                let _ = _map.insert($key, $value);
            )*
            _map
        &amp;#125;
    &amp;#125;;
&amp;#125;

let m = map! &amp;#123;
    &amp;quot;a&amp;quot; =&amp;gt; 1,
    &amp;quot;b&amp;quot; =&amp;gt; 2,
    &amp;quot;c&amp;quot; =&amp;gt; 3,
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="计算机科学" scheme="https://hdqjl317.github.io/categories/computer-science/" />
        <category term="C2Rust" scheme="https://hdqjl317.github.io/tags/C2Rust/" />
        <updated>2023-04-02T12:42:08.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2023/04/02/computer-science/Rust%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91/</id>
        <title>Rust条件编译</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2023/04/02/computer-science/Rust%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91/"/>
        <content type="html">&lt;h1 id=&#34;Rust条件编译&#34;&gt;&lt;a href=&#34;#Rust条件编译&#34; class=&#34;headerlink&#34; title=&#34;Rust条件编译&#34;&gt;&lt;/a&gt;Rust条件编译&lt;/h1&gt;&lt;p&gt;下面是一个简单的 Rust 条件编译的例子，它展示了如何使用 &lt;code&gt;cfg&lt;/code&gt; 属性来选择在哪个平台上编译代码。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;#[cfg(target_os = &amp;quot;windows&amp;quot;)]
fn main() &amp;#123;
    println!(&amp;quot;This is Windows.&amp;quot;);
&amp;#125;

#[cfg(target_os = &amp;quot;linux&amp;quot;)]
fn main() &amp;#123;
    println!(&amp;quot;This is Linux.&amp;quot;);
&amp;#125;

#[cfg(not(any(target_os = &amp;quot;windows&amp;quot;, target_os = &amp;quot;linux&amp;quot;)))]
fn main() &amp;#123;
    println!(&amp;quot;This is neither Windows nor Linux.&amp;quot;);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面使用了 &lt;code&gt;any&lt;/code&gt;、&lt;code&gt;not&lt;/code&gt;、&lt;code&gt;all&lt;/code&gt; 三个关键字，分别表示“任意一个特性被启用”、“没有任何一个特性被启用”、“所有特性都被启用”等条件。这个例子可以根据不同的特性组合打印出不同的信息，可以在编译时根据需要指定不同的特性来编译程序。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;fn main() &amp;#123;
    #[cfg(any(feature = &amp;quot;foo&amp;quot;, feature = &amp;quot;bar&amp;quot;))]
    println!(&amp;quot;Foo or Bar feature is enabled&amp;quot;);

    #[cfg(not(any(feature = &amp;quot;foo&amp;quot;, feature = &amp;quot;bar&amp;quot;)))]
    println!(&amp;quot;Neither Foo nor Bar feature is enabled&amp;quot;);

    #[cfg(all(feature = &amp;quot;foo&amp;quot;, not(feature = &amp;quot;bar&amp;quot;)))]
    println!(&amp;quot;Only Foo feature is enabled&amp;quot;);

    #[cfg(all(not(feature = &amp;quot;foo&amp;quot;), feature = &amp;quot;bar&amp;quot;))]
    println!(&amp;quot;Only Bar feature is enabled&amp;quot;);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个例子展示了如何使用&lt;code&gt;#[cfg]&lt;/code&gt;属性来针对不同的平台和条件进行条件编译。这个程序输出当前系统的操作系统名称，架构，指针位数和调试模式状态。&lt;code&gt;#[cfg]&lt;/code&gt;属性还支持逻辑运算符，使得可以更灵活地控制编译时执行的代码块。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;fn main() &amp;#123;
    #[cfg(target_os = &amp;quot;windows&amp;quot;)]
    println!(&amp;quot;This is Windows.&amp;quot;);

    #[cfg(target_os = &amp;quot;macos&amp;quot;)]
    println!(&amp;quot;This is macOS.&amp;quot;);

    #[cfg(target_os = &amp;quot;linux&amp;quot;)]
    println!(&amp;quot;This is Linux.&amp;quot;);

    #[cfg(all(target_arch = &amp;quot;x86_64&amp;quot;, target_os = &amp;quot;linux&amp;quot;))]
    println!(&amp;quot;This is a 64-bit Linux system.&amp;quot;);

    #[cfg(any(target_arch = &amp;quot;arm&amp;quot;, target_arch = &amp;quot;aarch64&amp;quot;))]
    println!(&amp;quot;This is an ARM system.&amp;quot;);

    #[cfg(target_pointer_width = &amp;quot;32&amp;quot;)]
    println!(&amp;quot;This is a 32-bit system.&amp;quot;);

    #[cfg(target_pointer_width = &amp;quot;64&amp;quot;)]
    println!(&amp;quot;This is a 64-bit system.&amp;quot;);

    #[cfg(debug_assertions)]
    println!(&amp;quot;Debug mode is on.&amp;quot;);

    #[cfg(not(debug_assertions))]
    println!(&amp;quot;Debug mode is off.&amp;quot;);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面这个例子根据不同的平台选择不同的实现，其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#[cfg(any(unix, windows))]&lt;/code&gt; 表示只有在 Unix 或者 Windows 平台才编译这个模块；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#[cfg_attr(all(unix, not(target_os = &amp;quot;macos&amp;quot;)), path = &amp;quot;platforms/linux.rs&amp;quot;)]&lt;/code&gt; 表示如果是 Linux 平台则使用 &lt;code&gt;platforms/linux.rs&lt;/code&gt; 文件，否则跳过；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#[cfg_attr(all(unix, target_os = &amp;quot;macos&amp;quot;), path = &amp;quot;platforms/macos.rs&amp;quot;)]&lt;/code&gt; 表示如果是 macOS 平台则使用 &lt;code&gt;platforms/macos.rs&lt;/code&gt; 文件，否则跳过；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#[cfg(windows)]&lt;/code&gt; 表示如果是 Windows 平台则使用 &lt;code&gt;platforms/windows.rs&lt;/code&gt; 文件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mod platform;&lt;/code&gt; 表示引入 &lt;code&gt;platform&lt;/code&gt; 模块，实际上会根据条件编译的结果选择不同的实现文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个例子比之前的例子更加复杂，它涉及到了多个条件的判断，以及根据条件选择不同的文件进行编译。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;#[cfg(any(unix, windows))]
#[cfg_attr(
    all(unix, not(target_os = &amp;quot;macos&amp;quot;)),
    path = &amp;quot;platforms/linux.rs&amp;quot;
)]
#[cfg_attr(
    all(unix, target_os = &amp;quot;macos&amp;quot;),
    path = &amp;quot;platforms/macos.rs&amp;quot;
)]
#[cfg(windows)]
#[path = &amp;quot;platforms/windows.rs&amp;quot;]
mod platform;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面是一个使用&lt;code&gt;#[cfg_attr]&lt;/code&gt;属性的例子：&lt;/p&gt;
&lt;p&gt;在这个例子中，&lt;code&gt;#[cfg_attr(debug_assertions, allow(dead_code))]&lt;/code&gt;指定了在debug模式下允许未使用的函数。另外，根据不同的目标架构，使用了不同的代码。如果目标架构是x86_64，则&lt;code&gt;let x = 42&lt;/code&gt;语句会被编译，如果是aarch64，则&lt;code&gt;let x = 0&lt;/code&gt;语句会被编译。在实际编译时，根据条件会为代码添加不同的属性。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;#[cfg_attr(debug_assertions, allow(dead_code))]
fn foo() &amp;#123;
    #[cfg(target_arch = &amp;quot;x86_64&amp;quot;)]
    let x = 42;
    #[cfg(target_arch = &amp;quot;aarch64&amp;quot;)]
    let x = 0;
    println!(&amp;quot;x = &amp;#123;&amp;#125;&amp;quot;, x);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在下面的例子中，&lt;code&gt;foo&lt;/code&gt; 函数只有在 &lt;code&gt;foo&lt;/code&gt; 特性启用时才会编译。&lt;code&gt;bar_or_baz&lt;/code&gt; 函数只有在 &lt;code&gt;bar&lt;/code&gt; 或 &lt;code&gt;baz&lt;/code&gt; 两个特性之一启用时才会编译，并使用了 &lt;code&gt;cfg!(...)&lt;/code&gt; 宏来检查当前是否启用了 &lt;code&gt;bar&lt;/code&gt; 特性。&lt;code&gt;qux_without_baz&lt;/code&gt; 函数只有在 &lt;code&gt;qux&lt;/code&gt; 特性启用且 &lt;code&gt;baz&lt;/code&gt; 特性未启用时才会编译。最后，&lt;code&gt;no_features_enabled&lt;/code&gt; 函数只有在没有任何特性启用时才会编译。&lt;/p&gt;
&lt;p&gt;你可以根据需要调整特性的名称和条件来满足你的要求。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;#[cfg(feature = &amp;quot;foo&amp;quot;)]
fn foo() &amp;#123;
    println!(&amp;quot;foo feature enabled&amp;quot;);
&amp;#125;

#[cfg(any(feature = &amp;quot;bar&amp;quot;, feature = &amp;quot;baz&amp;quot;))]
fn bar_or_baz() &amp;#123;
    if cfg!(feature = &amp;quot;bar&amp;quot;) &amp;#123;
        println!(&amp;quot;bar feature enabled&amp;quot;);
    &amp;#125; else &amp;#123;
        println!(&amp;quot;baz feature enabled&amp;quot;);
    &amp;#125;
&amp;#125;

#[cfg(all(feature = &amp;quot;qux&amp;quot;, not(feature = &amp;quot;baz&amp;quot;)))]
fn qux_without_baz() &amp;#123;
    println!(&amp;quot;qux feature enabled, but baz is not enabled&amp;quot;);
&amp;#125;

#[cfg(not(any(feature = &amp;quot;foo&amp;quot;, feature = &amp;quot;bar&amp;quot;, feature = &amp;quot;baz&amp;quot;, feature = &amp;quot;qux&amp;quot;)))]
fn no_features_enabled() &amp;#123;
    println!(&amp;quot;No features enabled&amp;quot;);
&amp;#125;

fn main() &amp;#123;
    foo();
    bar_or_baz();
    qux_without_baz();
    no_features_enabled();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;还可以通过结合其他宏实现更复杂的条件编译。以下是一个稍微复杂一些的例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;macro_rules! debug_println &amp;#123;
    () =&amp;gt; &amp;#123;&amp;#125;;
    ($($args:expr),*) =&amp;gt; &amp;#123;
        #[cfg(feature = &amp;quot;debug_print&amp;quot;)]
        &amp;#123;
            println!(&amp;quot;[DEBUG] &amp;#123;&amp;#125;&amp;quot;, format_args!($($args),*));
        &amp;#125;
    &amp;#125;;
&amp;#125;

macro_rules! error_println &amp;#123;
    () =&amp;gt; &amp;#123;&amp;#125;;
    ($($args:expr),*) =&amp;gt; &amp;#123;
        #[cfg(feature = &amp;quot;error_print&amp;quot;)]
        &amp;#123;
            println!(&amp;quot;[ERROR] &amp;#123;&amp;#125;&amp;quot;, format_args!($($args),*));
        &amp;#125;
    &amp;#125;;
&amp;#125;

macro_rules! info_println &amp;#123;
    () =&amp;gt; &amp;#123;&amp;#125;;
    ($($args:expr),*) =&amp;gt; &amp;#123;
        #[cfg(feature = &amp;quot;info_print&amp;quot;)]
        &amp;#123;
            println!(&amp;quot;[INFO] &amp;#123;&amp;#125;&amp;quot;, format_args!($($args),*));
        &amp;#125;
    &amp;#125;;
&amp;#125;

fn main() &amp;#123;
    let x = 10;
    debug_println!(&amp;quot;The value of x is &amp;#123;&amp;#125;&amp;quot;, x);
    error_println!(&amp;quot;An error occurred!&amp;quot;);
    info_println!(&amp;quot;This is an information message.&amp;quot;);
&amp;#125;

/*这个例子使用了三个宏来打印不同类型的日志，每个宏都带有条件编译，仅在启用相应特性时才会执行打印操作。可以在编译时使用不同的特性来控制打印哪些日志，例如：*/
$ cargo run --features debug_print # 打印调试信息
[DEBUG] The value of x is 10

$ cargo run --features error_print # 打印错误信息
[ERROR] An error occurred!

$ cargo run --features info_print # 打印信息日志
[INFO] This is an information message.

//这种方法可以帮助开发人员在不同的情况下，对代码进行不同程度的详细度调试。同时，还可以根据项目需要轻松地开启或关闭日志输出。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下是一个结合条件编译和声明宏的复杂例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;#[macro_use]
#[cfg(feature = &amp;quot;my_feature&amp;quot;)]
mod my_module &amp;#123;
    #[cfg(target_arch = &amp;quot;x86&amp;quot;)]
    macro_rules! my_macro &amp;#123;
        () =&amp;gt; &amp;#123;
            println!(&amp;quot;my_macro for x86&amp;quot;);
        &amp;#125;;
    &amp;#125;
    #[cfg(target_arch = &amp;quot;x86_64&amp;quot;)]
    macro_rules! my_macro &amp;#123;
        () =&amp;gt; &amp;#123;
            println!(&amp;quot;my_macro for x86_64&amp;quot;);
        &amp;#125;;
    &amp;#125;
    pub fn my_function() &amp;#123;
        my_macro!();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Rust的条件编译，可以总结为以下几个部分：&#34;&gt;&lt;a href=&#34;#Rust的条件编译，可以总结为以下几个部分：&#34; class=&#34;headerlink&#34; title=&#34;Rust的条件编译，可以总结为以下几个部分：&#34;&gt;&lt;/a&gt;&lt;strong&gt;Rust的条件编译，可以总结为以下几个部分：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;1.cfg属性(attribute)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;句法
CfgAttrAttribute :
   cfg ( ConfigurationPredicate )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;#[attribute]&lt;/code&gt;可以应用于表达式、函数、模块、变量等各种语法结构，用于控制编译器的行为。可以使用&lt;code&gt;cfg&lt;/code&gt;属性指定条件编译。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;#[cfg(feature = &amp;quot;my_feature&amp;quot;)]
fn my_func() &amp;#123;
    // do something
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这段代码中，&lt;code&gt;#[cfg(feature = &amp;quot;my_feature&amp;quot;)]&lt;/code&gt;属性表明&lt;code&gt;my_func()&lt;/code&gt;函数只有在启用了名为&lt;code&gt;my_feature&lt;/code&gt;的特性时才会被编译。&lt;/p&gt;
&lt;p&gt;2.cfg_if&lt;/p&gt;
&lt;p&gt;这段代码中，&lt;code&gt;#[cfg(target_os = &amp;quot;linux&amp;quot;)]&lt;/code&gt;属性表明&lt;code&gt;my_func()&lt;/code&gt;函数只有在编译目标平台为Linux时才会被编译。&lt;code&gt;cfg_if!&lt;/code&gt;宏则根据不同的条件编译选项选择不同的代码块。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;#[cfg(target_os = &amp;quot;linux&amp;quot;)]
fn my_func() &amp;#123;
    // do something
&amp;#125;

// ...

fn main() &amp;#123;
    cfg_if::cfg_if! &amp;#123;
        if #[cfg(target_os = &amp;quot;linux&amp;quot;)] &amp;#123;
            // linux-specific code
        &amp;#125; else if #[cfg(target_os = &amp;quot;macos&amp;quot;)] &amp;#123;
            // macos-specific code
        &amp;#125; else &amp;#123;
            // generic code
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.cfg_matches!宏&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cfg_matches!&lt;/code&gt;宏用于检查一个属性是否与指定的条件匹配。可以使用它来自定义条件编译选项。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;fn my_func() &amp;#123;
    cfg_if::cfg_if! &amp;#123;
        if #[cfg_matches!(feature = &amp;quot;my_feature&amp;quot;)] &amp;#123;
            // feature-specific code
        &amp;#125; else &amp;#123;
            // generic code
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这段代码中，&lt;code&gt;#[cfg_matches!(feature = &amp;quot;my_feature&amp;quot;)]&lt;/code&gt;属性表明&lt;code&gt;my_func()&lt;/code&gt;函数只有在启用了名为&lt;code&gt;my_feature&lt;/code&gt;的特性时才会执行特定的代码块。&lt;/p&gt;
&lt;p&gt;4.if&amp;#x2F;else块&lt;/p&gt;
&lt;p&gt;Rust的条件编译也可以使用if&amp;#x2F;else块来实现。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;fn my_func() &amp;#123;
    #[cfg(feature = &amp;quot;my_feature&amp;quot;)]
    &amp;#123;
        // feature-specific code
    &amp;#125;
    #[cfg(not(feature = &amp;quot;my_feature&amp;quot;))]
    &amp;#123;
        // generic code
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这段代码中，&lt;code&gt;#[cfg(feature = &amp;quot;my_feature&amp;quot;)]&lt;/code&gt;和&lt;code&gt;#[cfg(not(feature = &amp;quot;my_feature&amp;quot;))]&lt;/code&gt;分别表示在启用和禁用&lt;code&gt;my_feature&lt;/code&gt;特性时执行不同的代码块。&lt;/p&gt;
&lt;h1 id=&#34;Rust条件编译上下文无关文法&#34;&gt;&lt;a href=&#34;#Rust条件编译上下文无关文法&#34; class=&#34;headerlink&#34; title=&#34;Rust条件编译上下文无关文法&#34;&gt;&lt;/a&gt;Rust条件编译上下文无关文法&lt;/h1&gt;&lt;p&gt;Rust的条件编译系统提供了一种强大的方法，使得开发者能够根据不同的条件来编写和编译代码。条件编译的语法类似于C++和C#，使用&lt;code&gt;#[cfg(condition)]&lt;/code&gt;属性来指定编译条件。Rust的条件编译语法可以总结为以下上下文无关文法：&lt;/p&gt;
&lt;p&gt;cfg属性的上下文无关文法:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;其中，meta_item表示一个元数据项，可以是一个标识符、一个带值的标识符、一个带参数的标识符或者一个代码块。meta_item_list表示一个元数据项列表，包含若干个用逗号分隔的元数据项。meta表示一个元数据，可以是一个单独的元数据项，或者由多个元数据项组成的列表。attribute表示一个属性，包含一个由方括号括起来的元数据列表。

meta_item ::=
     IDENTIFIER
   |  IDENTIFIER &amp;#39;=&amp;#39; LITERAL
   |  IDENTIFIER &amp;#39;(&amp;#39; meta_item_list? &amp;#39;)&amp;#39;
   |  IDENTIFIER &amp;#39;&amp;#123;&amp;#39; meta_item* &amp;#39;&amp;#125;&amp;#39;

meta_item_list ::=
    meta_item (&amp;#39;,&amp;#39; meta_item)*

meta ::=
    meta_item
   | meta_item &amp;#39;,&amp;#39; meta

attribute ::=
    &amp;#39;#&amp;#39; &amp;#39;[&amp;#39; meta &amp;#39;]&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;cfg-if宏&#34;&gt;&lt;a href=&#34;#cfg-if宏&#34; class=&#34;headerlink&#34; title=&#34;cfg_if宏&#34;&gt;&lt;/a&gt;cfg_if宏&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;#[macro_export]
macro_rules! my_cfg_if &amp;#123;
    (
        $(if #[$attr:meta] $type_alias:ident = $ty:ty;)+
        $(else if #[$attr_else:meta] $type_alias_else:ident = $ty_else:ty;)+
        $(else $type_alias_default:ident = $ty_default:ty;)*
    ) =&amp;gt; &amp;#123;
        $(
            #[cfg($attr)]
            pub type $type_alias = $ty;
        )+
        $(
            #[cfg(not($attr))][cfg($attr_else)]
            pub type $type_alias_else = $ty_else;
        )*
        $(
            #[cfg(not(any($($attr),+)))]
            pub type $type_alias_default = $ty_default;
        )*
    &amp;#125;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;my_cfg_if!(
    if #[cfg(feature = &amp;quot;a&amp;quot;)] MyType = i32;
    else if #[cfg(feature = &amp;quot;b&amp;quot;)] MyType = f32;
    else MyType = u32;
);
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="计算机科学" scheme="https://hdqjl317.github.io/categories/computer-science/" />
        <category term="C2Rust" scheme="https://hdqjl317.github.io/tags/C2Rust/" />
        <updated>2023-04-02T12:41:05.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2023/03/29/computer-science/%E4%BB%A5time-gettimeofday%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B8%BA%E4%BE%8B%E5%88%86%E6%9E%90ARM64-Linux5-4-34/</id>
        <title>以time/gettimeofday系统调用为例分析ARM64-Linux5.4.34</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2023/03/29/computer-science/%E4%BB%A5time-gettimeofday%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B8%BA%E4%BE%8B%E5%88%86%E6%9E%90ARM64-Linux5-4-34/"/>
        <content type="html">&lt;h3 id=&#34;使用内嵌汇编触发-time-x2F-gettimeofday-系统调用&#34;&gt;&lt;a href=&#34;#使用内嵌汇编触发-time-x2F-gettimeofday-系统调用&#34; class=&#34;headerlink&#34; title=&#34;使用内嵌汇编触发 time&amp;#x2F;gettimeofday 系统调用&#34;&gt;&lt;/a&gt;使用内嵌汇编触发 time&amp;#x2F;gettimeofday 系统调用&lt;/h3&gt;&lt;p&gt;首先编写一个test.c程序，该程序会通过gettimeofday库函数来触发系统调用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gettimeofday&lt;/code&gt; 是 C 库提供的函数，它封装了内核里的&lt;code&gt;sys_gettimeofday&lt;/code&gt; 系统调用。&lt;/p&gt;
&lt;p&gt;在 ARM64 架构下 Linux 系统调用由同步异常 svc 指令触发。当用户态（EL0级）程序调用库函数从而触发系统调用的时候，先把系统调用的参数依次放入X0-X5 这 6 个寄存器（ Linux 系统调用最多有 6 个参数，ARM64 函数调用参数可以使用 X0-X7 这 8 个寄存器），然后把系统调用号放在 X8 寄存器 里，最后执行 svc 指令，CPU 即进入内核态（EL1级）。svc 指令一般会带一个立即数参数，一般是 0x0，但并没有被 Linux 内核使用，而是把系统调用号放到了 X8 寄存器 里。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;time.h&amp;gt;
#include &amp;lt;sys/time.h&amp;gt;
 
int main()
&amp;#123;
      time_t tt;
      struct timeval tv;
      struct tm *t;
#if 0
      gettimeofday(&amp;amp;tv,NULL); // 使用库函数的方式触发系统调用
#else
      asm volatile( // 使用内嵌汇编的方式触发系统调用
          &amp;quot;add   x0, x29, 16\n\t&amp;quot;  //X0寄存器用于传递参数&amp;amp;tv
          &amp;quot;mov   x1, #0x0\n\t&amp;quot;     //X1寄存器用于传递参数NULL
          &amp;quot;mov   x8, #0xa9\n\t&amp;quot;   //使用X8传递系统调用号169
          &amp;quot;svc   #0x0\n\t&amp;quot;            //触发系统调用
      );
#endif
      tt = tv.tv_sec;                    //tv是保存获取时间结果的结构体
      t = localtime(&amp;amp;tt);                //将世纪秒转换成对应的年月日时分秒
      printf(&amp;quot;time: %d/%d/%d %d:%d:%d\n&amp;quot;,
             t-&amp;gt;tm_year + 1900,
             t-&amp;gt;tm_mon,
             t-&amp;gt;tm_mday,
             t-&amp;gt;tm_hour,
             t-&amp;gt;tm_min,
             t-&amp;gt;tm_sec);
      return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;交叉编译test.c，这里要使用静态编译，因为默认的动态链接编译产生的二进制文件并不会有 gettimeofday 系统调用的入口，只有相应的库函数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;aarch64-linux-gnu-gcc -o test test.c -static
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后把test复制到根文件系统中，用 ARM 环境下编译的 busybox 重新制作一个根文件系统，test 可执行文件就在虚拟机的根目录下了。然后重新编译下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;make ARCH=arm64 Image -j8  CROSS_COMPILE=aarch64-linux-gnu-
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;分析&#34;&gt;&lt;a href=&#34;#分析&#34; class=&#34;headerlink&#34; title=&#34;分析&#34;&gt;&lt;/a&gt;分析&lt;/h3&gt;&lt;p&gt;启动qemu：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt; qemu-system-aarch64 -m 512M -smp 4 -cpu cortex-a57 -machine virt -kernel arch/arm64/boot/Image -append &amp;quot;rdinit=/linuxrc nokaslr console=ttyAMA0 loglevel=8&amp;quot; -nographic -s 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 VSCode 中启动调试。这里触发的系统调用对应的内核函数是__arm64_sys_gettimeofday。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%BB%A5time-gettimeofday%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B8%BA%E4%BE%8B%E5%88%86%E6%9E%90ARM64-Linux5-4-34/image-20230330092727353.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;ARM64 架构的 CPU 中的 系统调用和其他异常的处理过程大致相同。异常发生时，CPU 首先把异常的原因，这里是比如执行 svc 指令触发系统调用放在 ESR_EL1 寄存器里，然后把当前的处理器状态PSTATE放入 SPSR_EL1 寄存器里，把当前程序指针寄存器 PC 的值存入 ELR_EL1 寄存器里来保存断点，然后 CPU 通过异常向量表基地址和异常的类型计算出异常处理程序的入口地址，即 VBAR_EL1 寄存器加上偏移量取得异常处理的入口地址，接着开始执行异常处理入口的第一行代码。&lt;/p&gt;
&lt;p&gt;以 svc 指令对应的 el0_sync 为例。&lt;/p&gt;
&lt;p&gt;el0_sync主要分为两部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一部分实现从用户空间到内核空间的上下文切换： kernel_entry 0；&lt;/li&gt;
&lt;li&gt;第二部是根据异常症状寄存器esr_el1判断异常原因，然后再进入具体处理函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;el0_sync首先执行kernel_entry 0，将通用寄存器x0~x29保存到当前进程的内核栈，然后是从SP_EL0、SPSR_EL1、ELR_EL1寄存器中读取用户栈栈顶地址、发生异常时的处理器状态和返回地址，将这三个值以及发生异常时的LR寄存器中的值都保存到当前进程的内核栈中，以struct pt_regs结构体的格式保存在当前进程内核栈的栈底，完成保存现场过程。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%BB%A5time-gettimeofday%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B8%BA%E4%BE%8B%E5%88%86%E6%9E%90ARM64-Linux5-4-34/image-20230330102417429.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;系统调用是用户态执行SVC指令导致的，因此要进入el0_svc处理函数，根据ESR_EL1 寄存器中的内容跳转到 el0_svc，el0_svc 会调用 el0_svc_handler、el0_svc_common 函数，将 X8 寄存器（regs-&amp;gt;regs[8]）中存放的系统调用号传递给 invoke_syscall 函数。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%BB%A5time-gettimeofday%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B8%BA%E4%BE%8B%E5%88%86%E6%9E%90ARM64-Linux5-4-34/image-20230330094042682.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%BB%A5time-gettimeofday%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B8%BA%E4%BE%8B%E5%88%86%E6%9E%90ARM64-Linux5-4-34/image-20230330093847343.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%BB%A5time-gettimeofday%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B8%BA%E4%BE%8B%E5%88%86%E6%9E%90ARM64-Linux5-4-34/image-20230330095034638.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%BB%A5time-gettimeofday%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B8%BA%E4%BE%8B%E5%88%86%E6%9E%90ARM64-Linux5-4-34/image-20230330094929209.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;接着执行 invoke_syscall 函数，将通用寄存器中的内容传入 syscall_fn()，引出系统调用内核处理函数 __arm64_sys_gettimeofday，然后等系统调用内核处理函数执行完成，会将系统调用的返回值存放在 X0 寄存器中。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%BB%A5time-gettimeofday%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B8%BA%E4%BE%8B%E5%88%86%E6%9E%90ARM64-Linux5-4-34/image-20230330095311264.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%BB%A5time-gettimeofday%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B8%BA%E4%BE%8B%E5%88%86%E6%9E%90ARM64-Linux5-4-34/image-20230330095419963.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;从系统调用返回前会处理一些工作（work_pending），比如处理信号、判断是否需要进程调度等，ret_to_user的最后是kernel_exit 0负责恢复现场，与保存现场kernel_entry 0相对应，kernel_exit 0的最后会执行eret指令系统调用返回。eret指令所做的工作与svc指令相对应，eret指令会将ELR_EL1寄存器里值恢复到程序指针寄存器PC中，把SPSR_EL1寄存器里的值恢复到PSTATE处理器状态中，同时会从内核态转换到用户态。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%BB%A5time-gettimeofday%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B8%BA%E4%BE%8B%E5%88%86%E6%9E%90ARM64-Linux5-4-34/image-20230330100637352.png&#34;&gt;&lt;/p&gt;
</content>
        <category term="计算机科学" scheme="https://hdqjl317.github.io/categories/computer-science/" />
        <category term="Linux" scheme="https://hdqjl317.github.io/tags/Linux/" />
        <updated>2023-03-29T12:39:29.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2023/03/26/computer-science/Rust%E5%A3%B0%E6%98%8E%E5%AE%8F%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/</id>
        <title>Rust声明宏上下文无关文法</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2023/03/26/computer-science/Rust%E5%A3%B0%E6%98%8E%E5%AE%8F%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/"/>
        <content type="html">&lt;p&gt;&lt;strong&gt;Rust声明宏：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;MacroRulesDefinition :
   macro_rules ! IDENTIFIER MacroRulesDef

MacroRulesDef :
      ( MacroRules ) ;
   | [ MacroRules ] ;
   | &amp;#123; MacroRules &amp;#125;

MacroRules :
   MacroRule ( ; MacroRule )* ;?

MacroRule :
   MacroMatcher =&amp;gt; MacroTranscriber

MacroMatcher :
      ( MacroMatch* )
   | [ MacroMatch* ]
   | &amp;#123; MacroMatch* &amp;#125;

MacroMatch :
      Token排除 $ 和 定界符
   | MacroMatcher
   | $ IDENTIFIER : MacroFragSpec
   | $ ( MacroMatch+ ) MacroRepSep? MacroRepOp

MacroFragSpec :
      block | expr | ident | item | lifetime | literal
   | meta | pat | path | stmt | tt | ty | vis

MacroRepSep :
   Token排除 定界符 和 重复操作符

MacroRepOp :
   * | + | ?

MacroTranscriber :
   DelimTokenTree
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;条件编译：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;ConfigurationPredicate :
      ConfigurationOption
   | ConfigurationAll
   | ConfigurationAny
   | ConfigurationNot

ConfigurationOption :
   IDENTIFIER (= (STRING_LITERAL | RAW_STRING_LITERAL))?

ConfigurationAll
   all ( ConfigurationPredicateList? )

ConfigurationAny
   any ( ConfigurationPredicateList? )

ConfigurationNot
   not ( ConfigurationPredicate )

ConfigurationPredicateList
   ConfigurationPredicate (, ConfigurationPredicate)* ,?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;每种形式的编译条件都有一个计算结果为真或假的*配置谓词(configuration predicate)*。谓词是以下内容之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个配置选项。如果设置了该选项，则为真，如果未设置则为假。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all()&lt;/code&gt; 这样的配置谓词列表，列表内的配置谓词以逗号分隔。如果至少有一个谓词为假，则为假。如果没有谓词，则为真。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;any()&lt;/code&gt; 这样的配置谓词列表，列表内的配置谓词以逗号分隔。如果至少有一个谓词为真，则为真。如果没有谓词，则为假。&lt;/li&gt;
&lt;li&gt;带一个配置谓词的 &lt;code&gt;not()&lt;/code&gt; 模式 。如果此谓词为假，整个配置它为真；如果此谓词为真，整个配置为假。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;配置选项&lt;/em&gt;可以是名称，也可以是键值对，它们可以设置，也可以不设置。名称以单个标识符形式写入，例如 &lt;code&gt;unix&lt;/code&gt;。键值对被写为标识符后跟 &lt;code&gt;=&lt;/code&gt;，然后再跟一个字符串。例如，&lt;code&gt;target_arch=“x86_64”&lt;/code&gt; 就是一个配置选项。键在键值对配置选项列表中不是唯一的。例如，&lt;code&gt;feature = &amp;quot;std&amp;quot;&lt;/code&gt; and &lt;code&gt;feature = &amp;quot;serde&amp;quot;&lt;/code&gt; 可以同时设置。&lt;/p&gt;
</content>
        <category term="计算机科学" scheme="https://hdqjl317.github.io/categories/computer-science/" />
        <category term="C2Rust" scheme="https://hdqjl317.github.io/tags/C2Rust/" />
        <updated>2023-03-26T12:34:32.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2023/03/26/computer-science/Rust%E5%A3%B0%E6%98%8E%E5%AE%8F%E4%B8%8E%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91/</id>
        <title>Rust声明宏与条件编译</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2023/03/26/computer-science/Rust%E5%A3%B0%E6%98%8E%E5%AE%8F%E4%B8%8E%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91/"/>
        <content type="html">&lt;p&gt;在rust中，声明宏本质就是匹配规则 + 转译替换规则，也是代码模版按照匹配规则进行代码化替换。调用声明宏时，就是传入一串代码片段，在编译期由编译期根据传入代码片段来匹配宏自身定义的匹配规则，再经过转译替换规则，将宏调用代码替换为转译后的代码。&lt;/p&gt;
&lt;h3 id=&#34;声明式宏的几类写法：&#34;&gt;&lt;a href=&#34;#声明式宏的几类写法：&#34; class=&#34;headerlink&#34; title=&#34;声明式宏的几类写法：&#34;&gt;&lt;/a&gt;声明式宏的几类写法：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;常量宏，简单模式匹配替换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;语句宏，语句替换，返回表达式结果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数宏（Function-like macro），和过程中的类函数式宏极为相似。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里对前两种用法做个总结，然后对Rust中条件编译宏cfg和cfg_if用法做简要总结。&lt;/p&gt;
&lt;h3 id=&#34;声明宏一般形式：&#34;&gt;&lt;a href=&#34;#声明宏一般形式：&#34; class=&#34;headerlink&#34; title=&#34;声明宏一般形式：&#34;&gt;&lt;/a&gt;声明宏一般形式：&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;macro_rules! $name &amp;#123;
    $pattern0 =&amp;gt; ($expansion);
    $pattern1 =&amp;gt; ($expansion);
    _ =&amp;gt; ($expansion);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$name&lt;/code&gt;表示宏的名字，内部一般由1个或者多个模式匹配组成。匹配上规则之后就用&lt;code&gt;($expansion)&lt;/code&gt;代替。 举个栗子。&lt;/li&gt;
&lt;li&gt;每个 &lt;code&gt;rule&lt;/code&gt; 的格式：&lt;code&gt;($pattern) =&amp;gt; &amp;#123;$expansion&amp;#125;&lt;/code&gt;，其中括号和大括号不是特定的。可以使用 &lt;code&gt;[]&lt;/code&gt;、&lt;code&gt;()&lt;/code&gt;、&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt; 中的任意一种，在调用宏的时候也是，而过程宏中的类函数式宏后面只能是&lt;code&gt;()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;从最具体到最不具体的顺序编写宏规则很重要&lt;/strong&gt;，pattern越准确书写的pattern的位置越靠前，否则会有意想不到的错误。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;常量宏形式：&#34;&gt;&lt;a href=&#34;#常量宏形式：&#34; class=&#34;headerlink&#34; title=&#34;常量宏形式：&#34;&gt;&lt;/a&gt;常量宏形式：&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;#define pi 3.14
#define p
int a = pi;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以使用 &lt;code&gt;[]&lt;/code&gt;、&lt;code&gt;()&lt;/code&gt;、&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt; 中的任意一种。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;macro_rules! pi &amp;#123;
    () =&amp;gt; &amp;#123; 3.14 &amp;#125;;
&amp;#125;

let a = pi();
let b = pi[];
let c = pi&amp;#123;&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;语句宏形式：&#34;&gt;&lt;a href=&#34;#语句宏形式：&#34; class=&#34;headerlink&#34; title=&#34;语句宏形式：&#34;&gt;&lt;/a&gt;语句宏形式：&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;// demo mutliply(2 + 3, 4 + 5)
#define multiply(x, y) x * y // 错误，宏展开: 2 + 3 * 4 + 5，结果19
#define multiply(x, y) ((x) * (y)) // 正确，红展开: ((2 + 3) * (4 + 5))，结果45
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;而Rust中不用考虑这((x) * (y))加括号的情况&lt;/strong&gt;，Rust中的Token trees介于tokens和 AST 之间，tokens是Token trees的叶子，而值得注意的是(…)、[…]和{…}不是叶子，而是Token trees的内部节点。比如：a + b + (c + d[0]) + e将有如下Token trees的结构：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;«a» «+» «b» «+» «(   )» «+» «e»
          ╭────────┴──────────╮
           «c» «+» «d» «[   ]»
                        ╭─┴─╮
                         «0»
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;这与表达式将产生的 AST没有关系&lt;/strong&gt;；根级别有七棵Token trees，而不是单个根节点。&lt;/p&gt;
&lt;p&gt;所以之前的例子可以翻译为如下rust代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;macro_rules! multiply &amp;#123;
    ($x:expr, $y:expr) =&amp;gt; &amp;#123;				//匹配模式越精准的要放在前面，否则可能有意想不到的错误！
        $x * $y
    &amp;#125;;
    ($x:expr) =&amp;gt; &amp;#123;
        $x
    &amp;#125;;
&amp;#125;

fn main() &amp;#123;
    let a = multiply!(2 + 3, 4 + 5);
    let b = multiply!(2);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果是有多个expr，add_as(x,y,z) 或 add_as(x,y,z,m) 或 add_as(x,y,z,m,n) ……&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;macro_rules! add_as&amp;#123;
    ( $($a:expr),* )=&amp;gt;&amp;#123;
           &amp;#123;
               // to handle the case without any arguments
               0
               // block to be repeated
               $(+$a)*
        &amp;#125;
    &amp;#125;
&amp;#125;

fn main()&amp;#123;
    println!(&amp;quot;&amp;#123;&amp;#125;&amp;quot;,add_as!(1,2,3,4)); // =&amp;gt; println!(&amp;quot;&amp;#123;&amp;#125;&amp;quot;,&amp;#123;0+1+2+3+4&amp;#125;)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;匹配规则中包含meta变量用$标识来标示，其类型包括block、expr、ident、item、lifetime、literal、meta、pat、path、stmt、tt、ty、vis。具体用法可见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly92ZXlrcmlsLmdpdGh1Yi5pby90bGJvcm0vZGVjbC1tYWNyb3MvbWludXRpYWUvZnJhZ21lbnQtc3BlY2lmaWVycy5odG1s&#34;&gt;片段说明符&lt;/span&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;item&lt;/code&gt;：&lt;a href=&#34;https://doc.rust-lang.org/reference/items.html&#34;&gt;&lt;em&gt;Item&lt;/em&gt;&lt;/a&gt;，如函数定义，常量声明 等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;block&lt;/code&gt;：&lt;a href=&#34;https://doc.rust-lang.org/reference/expressions/block-expr.html&#34;&gt;&lt;em&gt;BlockExpression&lt;/em&gt;&lt;/a&gt;，如&lt;code&gt;&amp;#123; ... &amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stmt&lt;/code&gt;：&lt;a href=&#34;https://doc.rust-lang.org/reference/statements.html&#34;&gt;&lt;em&gt;Statement&lt;/em&gt;&lt;/a&gt;，如 &lt;code&gt;let&lt;/code&gt; 表达式（传入为 stmt 类型的参数时不需要末尾的分号，但需要分号的 item 语句除外）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pat&lt;/code&gt;：&lt;a href=&#34;https://doc.rust-lang.org/reference/patterns.html&#34;&gt;&lt;em&gt;Pattern&lt;/em&gt;&lt;/a&gt;，模式匹配中的模式，如 &lt;code&gt;Some(a)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expr&lt;/code&gt;：&lt;a href=&#34;https://doc.rust-lang.org/reference/expressions.html&#34;&gt;&lt;em&gt;Expression&lt;/em&gt;&lt;/a&gt;，表达式，如 &lt;code&gt;Vec::new()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ty&lt;/code&gt;：&lt;a href=&#34;https://doc.rust-lang.org/reference/types.html#type-expressions&#34;&gt;&lt;em&gt;Type&lt;/em&gt;&lt;/a&gt;，类型，如 &lt;code&gt;i32&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ident&lt;/code&gt;：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9yZWZlcmVuY2UvaWRlbnRpZmllcnMuaHRtbA==&#34;&gt;IDENTIFIER_OR_KEYWORD&lt;/span&gt;，标识符或关键字，如 &lt;code&gt;i&lt;/code&gt; 或 &lt;code&gt;self&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;：&lt;a href=&#34;https://doc.rust-lang.org/reference/paths.html#paths-in-types&#34;&gt;&lt;em&gt;TypePath&lt;/em&gt;&lt;/a&gt;，类型路径，如 &lt;code&gt;std::result::Result&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tt&lt;/code&gt;：&lt;a href=&#34;https://doc.rust-lang.org/reference/macros.html#macro-invocation&#34;&gt;&lt;em&gt;TokenTree&lt;/em&gt;&lt;/a&gt;，Token 树，被匹配的定界符 &lt;code&gt;(&lt;/code&gt;、&lt;code&gt;[]&lt;/code&gt; 或 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt; 中的单个或多个 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9yZWZlcmVuY2UvdG9rZW5zLmh0bWw=&#34;&gt;token&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;meta&lt;/code&gt;：&lt;a href=&#34;https://doc.rust-lang.org/reference/attributes.html&#34;&gt;&lt;em&gt;Attr&lt;/em&gt;&lt;/a&gt;，形如 &lt;code&gt;#[...]&lt;/code&gt; 的属性中的内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lifetime&lt;/code&gt;：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9yZWZlcmVuY2UvdG9rZW5zLmh0bWwjbGlmZXRpbWVzLWFuZC1sb29wLWxhYmVscw==&#34;&gt;LIFETIME_TOKEN&lt;/span&gt;，生命周期 Token，如 &lt;code&gt;&amp;#39;static&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis&lt;/code&gt;：&lt;a href=&#34;https://doc.rust-lang.org/reference/visibility-and-privacy.html&#34;&gt;&lt;em&gt;Visibility&lt;/em&gt;&lt;/a&gt;，可能为空的可见性限定符，如 &lt;code&gt;pub&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;literal&lt;/code&gt;：匹配 -? &lt;a href=&#34;https://doc.rust-lang.org/reference/expressions/literal-expr.html&#34;&gt;&lt;em&gt;LiteralExpression&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;匹配器可以包含重复项。这些允许匹配一系列标记。这些都有一般的形式&lt;code&gt;$ ( ... ) sep rep&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$&lt;/code&gt;是字面上的美元标记。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;( ... )&lt;/code&gt;是被重复的 paren 分组匹配器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;sep&lt;/code&gt;是一个&lt;em&gt;可选的&lt;/em&gt;分隔符。&lt;/strong&gt;它可能不是定界符或重复运算符之一。常见的例子是&lt;code&gt;,&lt;/code&gt;和&lt;code&gt;;&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;rep&lt;/code&gt;是&lt;em&gt;必需的&lt;/em&gt;重复运算符。目前，这可以是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt;: 表示最多重复一次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;：表示零次或多次重复&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;: 表示一次或多次重复&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于&lt;code&gt;?&lt;/code&gt;最多代表一次出现，因此不能与分隔符一起使用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重复可以包含任何其他有效的匹配器，包括token trees、元变量和其他允许任意嵌套的重复。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：这里&lt;code&gt;sep&lt;/code&gt;可以是其他的形式，比如下面的; and和; or&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;/// test宏定义了两组匹配和转译替换规则
    macro_rules! test_macro &amp;#123;
        ($left:expr; and $right:expr) =&amp;gt; &amp;#123;
            println!(&amp;quot;&amp;#123;:?&amp;#125; and &amp;#123;:?&amp;#125; is &amp;#123;:?&amp;#125;&amp;quot;,
                     // $left变量的内容对应匹配上的语法片段的内容
                     stringify!($left),
                     // $right变量的内容对应匹配上的语法片段的内容
                     stringify!($right),
                     $left &amp;amp;&amp;amp; $right)
        &amp;#125;;
        ($left:expr; or $right:expr) =&amp;gt; &amp;#123;
            println!(&amp;quot;&amp;#123;:?&amp;#125; or &amp;#123;:?&amp;#125; is &amp;#123;:?&amp;#125;&amp;quot;,
                     stringify!($left),
                     stringify!($right),
                     $left || $right)
        &amp;#125;;
    &amp;#125;

/// 传入的字面上的代码片段，解析后生成的语法片段，
///  - 在解析过程中进行简易分词和解析后生成一个语法片段(包含解析出来的不同类型及其对应的值)
///  - 与声明宏中定义的匹配规则包含的字面量token和meta变量类型等，按照从左到右一对一的方式进行匹配(匹配都是进行深度匹配的，一旦当前规则匹配过程出现问题，则不会再进行后续的规则匹配)
///  - 一旦提供的语法片段和某个声明宏定义的规则匹配了，那么对应类型的值绑定到meta变量中，即用$标示来代替;
///    再匹配后，进入转译替换阶段，直接读取对应的转译替换规则的内容，将其meta变量的内容用上一阶段绑定过来的值替换，完成处理后输出即可;
/// 正好能匹配上第一个匹配规则；
/// - 第一个匹配规则为
///  一个表达式类型语法片段和; and 和另一个表达式类型语法片段
///  其中;和and需要字面上一对一匹配；
test_macro!(1i32 + 1 == 2i32; and 2i32 * 2 == 4i32);

/// 下面传入的字面上的代码片段，解析后生成的语法片段，
/// 正好能匹配上第二个匹配规则；
/// - 第二个匹配规则为：
/// 一个表达式类型语法片段和; or 和另一个表达式类型语法片段
/// 其中;和or需要字面上一对一匹配；
test_macro!(true; or false);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Hygiene&#34;&gt;&lt;a href=&#34;#Hygiene&#34; class=&#34;headerlink&#34; title=&#34;Hygiene&#34;&gt;&lt;/a&gt;Hygiene&lt;/h3&gt;&lt;p&gt;Hygiene是Rust宏中的一个重要的特性，写声明宏时注意以下问题。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;macro_rules! using_x &amp;#123;
    ( ¥action:expr ) =&amp;gt; &amp;#123;
        &amp;#123;
            let x = 1;			// let macro_x = 1;
            ¥action				// 这里展开后为x + 1 ，实际上这里是outer_x + 1 不同的x
        &amp;#125;
    &amp;#125;
&amp;#125;

fn main() &amp;#123;
    let two = using_x!(x + 1);
&amp;#125;

// 报错： using_x!(x + 1);
//      		 ^ not found in this scope

// using_X换成以下写法则可通过
macro_rules! using_x &amp;#123;
    ( ¥id:ident, ¥action:expr ) =&amp;gt; &amp;#123;
        &amp;#123;
            let ¥id = 1;
            ¥action
        &amp;#125;
    &amp;#125;
&amp;#125;

fn main() &amp;#123;
    let two = using_x!(x, x + 1);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;条件编译&#34;&gt;&lt;a href=&#34;#条件编译&#34; class=&#34;headerlink&#34; title=&#34;条件编译&#34;&gt;&lt;/a&gt;条件编译&lt;/h3&gt;&lt;p&gt;条件编译可能通过两种不同的操作符实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cfg&lt;/code&gt; 属性：在属性位置中使用 &lt;code&gt;#[cfg(...)]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cfg!&lt;/code&gt; 宏：在布尔表达式中使用 &lt;code&gt;cfg!(...)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cfg_if!&lt;/code&gt;宏：这个 crate 提供的宏&lt;code&gt;cfg_if&lt;/code&gt;类似于&lt;code&gt;if/elif&lt;/code&gt;C 预处理器宏，允许定义级联&lt;code&gt;#[cfg]&lt;/code&gt;案例，发出最先匹配的实现。这使您可以方便地提供一长串&lt;code&gt;#[cfg]&lt;/code&gt;代码块，而不必多次重写每个子句。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;code&gt;#[cfg(...)]&lt;/code&gt;是属性宏，&lt;strong&gt;这里考虑用cfg！宏和cfg_if！宏完成条件编译&lt;/strong&gt;。下面是前两种条件编译宏的用法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;// 这个函数仅当目标系统是 Linux 的时候才会编译
#[cfg(target_os = &amp;quot;linux&amp;quot;)]
fn are_you_on_linux() &amp;#123;
    println!(&amp;quot;You are running linux!&amp;quot;)
&amp;#125;

// 而这个函数仅当目标系统 **不是** Linux 时才会编译
#[cfg(not(target_os = &amp;quot;linux&amp;quot;))]
fn are_you_on_linux() &amp;#123;
    println!(&amp;quot;You are *not* running linux!&amp;quot;)
&amp;#125;

fn main() &amp;#123;
    are_you_on_linux();
    
    println!(&amp;quot;Are you sure?&amp;quot;);
    if cfg!(target_os = &amp;quot;linux&amp;quot;) &amp;#123;
        println!(&amp;quot;Yes. It&amp;#39;s definitely linux!&amp;quot;);
    &amp;#125; else &amp;#123;
        println!(&amp;quot;Yes. It&amp;#39;s definitely *not* linux!&amp;quot;);
    &amp;#125;
&amp;#125;

/* 输出
You are running linux!
Are you sure?
Yes. It&amp;#39;s definitely linux!
*/
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;cfg-格式：&#34;&gt;&lt;a href=&#34;#cfg-格式：&#34; class=&#34;headerlink&#34; title=&#34;cfg!格式：&#34;&gt;&lt;/a&gt;&lt;strong&gt;cfg!格式&lt;/strong&gt;：&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;macro_rules! cfg &amp;#123;
    ($($cfg:tt)*) =&amp;gt; &amp;#123; ... &amp;#125;;			
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cfg！宏在编译时评估配置标志的布尔组合，赋予cfg！宏与属性#[cfg(…)]相同的功能。&lt;/p&gt;
&lt;p&gt;内置的 &lt;code&gt;cfg&lt;/code&gt;宏接受单个配置谓词，当谓词为真时计算为 &lt;code&gt;true&lt;/code&gt; 字面量，当谓词为假时计算为 &lt;code&gt;false&lt;/code&gt; 字面量。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;#![allow(unused)]
fn main() &amp;#123;
    let machine_kind = if cfg!(unix) &amp;#123;
      &amp;quot;unix&amp;quot;
    &amp;#125; else if cfg!(windows) &amp;#123;
      &amp;quot;windows&amp;quot;
    &amp;#125; else &amp;#123;
      &amp;quot;unknown&amp;quot;
    &amp;#125;;

    println!(&amp;quot;I&amp;#39;m running on a &amp;#123;&amp;#125; machine!&amp;quot;, machine_kind);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;cfg-if！格式：&#34;&gt;&lt;a href=&#34;#cfg-if！格式：&#34; class=&#34;headerlink&#34; title=&#34;cfg_if！格式：&#34;&gt;&lt;/a&gt;&lt;strong&gt;cfg_if！格式&lt;/strong&gt;：&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;cfg_if::cfg_if! &amp;#123;
    if #[cfg(unix)] &amp;#123;
        fn foo() &amp;#123; /* unix specific functionality */ &amp;#125;
    &amp;#125; else if #[cfg(target_pointer_width = &amp;quot;32&amp;quot;)] &amp;#123;
        fn foo() &amp;#123; /* non-unix, 32-bit functionality */ &amp;#125;
    &amp;#125; else &amp;#123;
        fn foo() &amp;#123; /* fallback implementation */ &amp;#125;
    &amp;#125;
&amp;#125;

fn main() &amp;#123;
    foo();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将扩展为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;#[cfg(unix)]
fn foo() &amp;#123; /* unix specific functionality */ &amp;#125;
#[cfg(all(target_pointer_width = &amp;quot;32&amp;quot;, not(unix)))]
fn foo() &amp;#123; /* non-unix, 32-bit functionality */ &amp;#125;
#[cfg(not(any(unix, target_pointer_width = &amp;quot;32&amp;quot;)))]
fn foo() &amp;#123; /* fallback implementation */ &amp;#125;        
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cfg_if更多信息见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLnJzL2NmZy1pZi9sYXRlc3QvY2ZnX2lmL21hY3JvLmNmZ19pZi5odG1s&#34;&gt;cfg_if&lt;/span&gt;。&lt;/p&gt;
&lt;h4 id=&#34;设置配置选项&#34;&gt;&lt;a href=&#34;#设置配置选项&#34; class=&#34;headerlink&#34; title=&#34;设置配置选项&#34;&gt;&lt;/a&gt;设置配置选项&lt;/h4&gt;&lt;p&gt;设置哪些配置选项是在 crate 编译期时就静态确定的。一些选项属于&lt;em&gt;编译器设置集(compiler-set)&lt;em&gt;，这部分选项是编译器根据相关编译数据设置的。其他选项属于&lt;/em&gt;任意设置集(arbitrarily-set)&lt;em&gt;，这部分设置必须从代码之外传参给编译器来自主设置。无法在正在编译的 crate 的源代码中设置编译配置选项。**对于 &lt;code&gt;rustc&lt;/code&gt;，任意配置集的配置选项要使用命令行参数 &lt;a href=&#34;https://doc.rust-lang.org/rustc/command-line-arguments.html#--cfg-configure-the-compilation-environment&#34;&gt;&lt;code&gt;--cfg&lt;/code&gt;&lt;/a&gt; 来设置。&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;**编译器设置集(compiler-set)**： &lt;a href=&#34;https://rustwiki.org/zh-CN/reference/conditional-compilation.html&#34;&gt;&lt;code&gt;编译器设置集&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;条件编译更多用法详细见：[条件编译]&lt;/p&gt;
</content>
        <category term="计算机科学" scheme="https://hdqjl317.github.io/categories/computer-science/" />
        <category term="C2Rust" scheme="https://hdqjl317.github.io/tags/C2Rust/" />
        <updated>2023-03-26T12:32:30.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2023/03/22/computer-science/start-kernel%E5%88%86%E6%9E%90/</id>
        <title>start_kernel分析</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2023/03/22/computer-science/start-kernel%E5%88%86%E6%9E%90/"/>
        <content type="html">&lt;h3 id=&#34;准备&#34;&gt;&lt;a href=&#34;#准备&#34; class=&#34;headerlink&#34; title=&#34;准备&#34;&gt;&lt;/a&gt;准备&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo apt install build-essential
sudo apt install qemu 
sudo apt install libncurses5-dev bison flex libssl-dev libelf-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;下载内核源码&#34;&gt;&lt;a href=&#34;#下载内核源码&#34; class=&#34;headerlink&#34; title=&#34;下载内核源码&#34;&gt;&lt;/a&gt;下载内核源码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo apt install axel
axel -n 20 https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-5.4.34.tar.xz
xz -d linux-5.4.34.tar.xz
tar -xvf linux-5.4.34.tar 
cd linux-5.4.34
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;配置内核选项&#34;&gt;&lt;a href=&#34;#配置内核选项&#34; class=&#34;headerlink&#34; title=&#34;配置内核选项&#34;&gt;&lt;/a&gt;配置内核选项&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;make defconfig 	# Default configuration is based on &amp;#39;x86_64_defconfig&amp;#39;
make menuconfig	# 打开debug相关选项
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/start-kernel%E5%88%86%E6%9E%90/image-20230322184745975.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;进行如下设置：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;Kernel hacking —&amp;gt;
Compile-time checks and compiler options —&amp;gt;
[*] Compile the kernel with debug info
[*] Provide GDB scripts for kernel debugging
[*] Kernel debugging
关闭KASLR（随机地址），否则会导致打断点失败。
Processor type and features ----&amp;gt;
[ ] Randomize the address of the kernel image (KASLR)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;编译运行内核&#34;&gt;&lt;a href=&#34;#编译运行内核&#34; class=&#34;headerlink&#34; title=&#34;编译运行内核&#34;&gt;&lt;/a&gt;编译运行内核&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;make -j$(nproc) 
qemu-system-x86_64 -kernel arch/x86/boot/bzImage
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;制作内存根文件系统&#34;&gt;&lt;a href=&#34;#制作内存根文件系统&#34; class=&#34;headerlink&#34; title=&#34;制作内存根文件系统&#34;&gt;&lt;/a&gt;制作内存根文件系统&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;#首先从https://www.busybox.net下载 busybox源代码解压，解压完成后，跟内核一样先配置编译，并安装。
axel -n 20 https://busybox.net/downloads/busybox-1.31.1.tar.bz2
tar -jxvf busybox-1.31.1.tar.bz2
cd busybox-1.31.1
make menuconfig #Setting里的Build static binary (no shared libs)选中
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后编译安装，默认会安装到源码目录下的 _install 目录中。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;make -j$(nproc) &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后制作内存根文件系统镜像:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir rootfs # 在/linux-5.4.34文件夹下新建rootfs文件夹
cd rootfs
cp ../busybox-1.31.1/_install/* ./ -rf
mkdir dev proc sys home
sudo cp -a /dev/&amp;#123;null,console,tty,tty1,tty2,tty3,tty4&amp;#125; dev/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;准备init脚本文件放在根文件系统跟目录下（rootfs&amp;#x2F;init），添加如下内容到init文件。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;#!/bin/sh
mount -t proc none /proc
mount -t sysfs none /sys
echo “Wellcome qjliOS!”
echo “--------------------”
cd home
/bin/sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;给init脚本添加可执行权限：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;chmod +x init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打包成内存根文件系统镜像：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;find . -print0 | cpio --null -ov --format=newc | gzip -9 &amp;gt; ../rootfs.cpio.gz 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试挂载根文件系统，看内核启动完成后是否执行init脚本。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;qemu-system-x86_64 -kernel ./arch/x86/boot/bzImage -initrd rootfs.cpio.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;出现 “Wellcome qjliOS!”则init脚本执行成功。&lt;/p&gt;
&lt;h3 id=&#34;VSCode配置Linux内核调试环境&#34;&gt;&lt;a href=&#34;#VSCode配置Linux内核调试环境&#34; class=&#34;headerlink&#34; title=&#34;VSCode配置Linux内核调试环境&#34;&gt;&lt;/a&gt;VSCode配置Linux内核调试环境&lt;/h3&gt;&lt;p&gt;由于 Linux 内核高度定制化，所以没有办法直接通过配置 includePath 等让 Intellisense 正常提示，这里借助一个 Python 脚本来生成 compile_commands.json 文件帮助 Intellisense 正常提示（包括头文件和宏定义等）。在Linux源代码目录下直接运行如下命令就可以生成compile_commands.json 了。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;python ./scripts/gen_compile_commands.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;新建一个.vscode文件夹，将配置文件放入该文件夹内,配置如下五个文件：c_cpp_properties.json，init，launch.json，settings.json，tasks.json。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;c_cpp_properties.json&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;&amp;#123;
    &amp;quot;configurations&amp;quot;: [
        &amp;#123;
            &amp;quot;name&amp;quot;: &amp;quot;Linux&amp;quot;,
            &amp;quot;includePath&amp;quot;: [
                &amp;quot;$&amp;#123;workspaceFolder&amp;#125;/arch/x86/include/**&amp;quot;,
                &amp;quot;$&amp;#123;workspaceFolder&amp;#125;/include/**&amp;quot;,
                &amp;quot;$&amp;#123;workspaceFolder&amp;#125;/include/linux/**&amp;quot;,
                &amp;quot;$&amp;#123;workspaceFolder&amp;#125;/arch/x86/**&amp;quot;,
                &amp;quot;$&amp;#123;workspaceFolder&amp;#125;/**&amp;quot;
            ],
            &amp;quot;cStandard&amp;quot;: &amp;quot;c11&amp;quot;,
            &amp;quot;intelliSenseMode&amp;quot;: &amp;quot;gcc-x64&amp;quot;,
            &amp;quot;compileCommands&amp;quot;: &amp;quot;$&amp;#123;workspaceFolder&amp;#125;/compile_commands.json&amp;quot;
        &amp;#125;
    ],
    &amp;quot;version&amp;quot;: 4
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;init&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;#!/bin/sh
mount -t proc none /proc
mount -t sysfs none /sys

echo &amp;quot;Wellcome qjlOS!&amp;quot;
echo &amp;quot;--------------------&amp;quot;
cd home
/bin/sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;launch.json&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;&amp;#123;
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    &amp;quot;version&amp;quot;: &amp;quot;0.2.0&amp;quot;,
    &amp;quot;configurations&amp;quot;: [
      &amp;#123;
        &amp;quot;name&amp;quot;: &amp;quot;(gdb) linux&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;cppdbg&amp;quot;,
        &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
        &amp;quot;preLaunchTask&amp;quot;: &amp;quot;vm&amp;quot;,
        &amp;quot;program&amp;quot;: &amp;quot;$&amp;#123;workspaceRoot&amp;#125;/vmlinux&amp;quot;,
        &amp;quot;miDebuggerServerAddress&amp;quot;: &amp;quot;localhost:1234&amp;quot;,
        &amp;quot;args&amp;quot;: [],
        &amp;quot;stopAtEntry&amp;quot;: true,
        &amp;quot;cwd&amp;quot;: &amp;quot;$&amp;#123;workspaceFolder&amp;#125;&amp;quot;,
        &amp;quot;environment&amp;quot;: [],
        &amp;quot;externalConsole&amp;quot;: false,
        &amp;quot;MIMode&amp;quot;: &amp;quot;gdb&amp;quot;,
        &amp;quot;miDebuggerArgs&amp;quot;: &amp;quot;-n&amp;quot;,
        &amp;quot;targetArchitecture&amp;quot;: &amp;quot;x64&amp;quot;,
        &amp;quot;setupCommands&amp;quot;: [
          &amp;#123;
            &amp;quot;text&amp;quot;: &amp;quot;set arch i386:x86-64:intel&amp;quot;,
            &amp;quot;ignoreFailures&amp;quot;: false
          &amp;#125;,
          &amp;#123;
            &amp;quot;text&amp;quot;: &amp;quot;dir .&amp;quot;,
            &amp;quot;ignoreFailures&amp;quot;: false
          &amp;#125;,
          &amp;#123;
            &amp;quot;text&amp;quot;: &amp;quot;add-auto-load-safe-path ./&amp;quot;,
            &amp;quot;ignoreFailures&amp;quot;: false
          &amp;#125;,
          &amp;#123;
            &amp;quot;text&amp;quot;: &amp;quot;-enable-pretty-printing&amp;quot;,
            &amp;quot;ignoreFailures&amp;quot;: true
          &amp;#125;
        ]
      &amp;#125;
    ]
  &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;settings.json&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;&amp;#123;
    &amp;quot;search.exclude&amp;quot;: &amp;#123;
        &amp;quot;**/.git&amp;quot;: true,
        &amp;quot;**/.svn&amp;quot;: true,
        &amp;quot;**/.DS_Store&amp;quot;: true,
        &amp;quot;**/drivers&amp;quot;: true,
        &amp;quot;**/sound&amp;quot;: true,
        &amp;quot;**/tools&amp;quot;: true,
        &amp;quot;**/arch/alpha&amp;quot;: true,
        &amp;quot;**/arch/arc&amp;quot;: true,
        &amp;quot;**/arch/c6x&amp;quot;: true,
        &amp;quot;**/arch/h8300&amp;quot;: true,
        &amp;quot;**/arch/hexagon&amp;quot;: true,
        &amp;quot;**/arch/ia64&amp;quot;: true,
        &amp;quot;**/arch/m32r&amp;quot;: true,
        &amp;quot;**/arch/m68k&amp;quot;: true,
        &amp;quot;**/arch/microblaze&amp;quot;: true,
        &amp;quot;**/arch/mn10300&amp;quot;: true,
        &amp;quot;**/arch/nds32&amp;quot;: true,
        &amp;quot;**/arch/nios2&amp;quot;: true,
        &amp;quot;**/arch/parisc&amp;quot;: true,
        &amp;quot;**/arch/powerpc&amp;quot;: true,
        &amp;quot;**/arch/s390&amp;quot;: true,
        &amp;quot;**/arch/sparc&amp;quot;: true,
        &amp;quot;**/arch/score&amp;quot;: true,
        &amp;quot;**/arch/sh&amp;quot;: true,
        &amp;quot;**/arch/um&amp;quot;: true,
        &amp;quot;**/arch/unicore32&amp;quot;: true,
        &amp;quot;**/arch/xtensa&amp;quot;: true
    &amp;#125;,
    &amp;quot;files.exclude&amp;quot;: &amp;#123;
        &amp;quot;**/.*.*.cmd&amp;quot;: true,
        &amp;quot;**/.*.d&amp;quot;: true,
        &amp;quot;**/.*.o&amp;quot;: true,
        &amp;quot;**/.*.S&amp;quot;: true,
        &amp;quot;**/.git&amp;quot;: true,
        &amp;quot;**/.svn&amp;quot;: true,
        &amp;quot;**/.DS_Store&amp;quot;: true,
        &amp;quot;**/drivers&amp;quot;: true,
        &amp;quot;**/sound&amp;quot;: true,
        &amp;quot;**/tools&amp;quot;: true,
        &amp;quot;**/arch/alpha&amp;quot;: true,
        &amp;quot;**/arch/arc&amp;quot;: true,
        &amp;quot;**/arch/c6x&amp;quot;: true,
        &amp;quot;**/arch/h8300&amp;quot;: true,
        &amp;quot;**/arch/hexagon&amp;quot;: true,
        &amp;quot;**/arch/ia64&amp;quot;: true,
        &amp;quot;**/arch/m32r&amp;quot;: true,
        &amp;quot;**/arch/m68k&amp;quot;: true,
        &amp;quot;**/arch/microblaze&amp;quot;: true,
        &amp;quot;**/arch/mn10300&amp;quot;: true,
        &amp;quot;**/arch/nds32&amp;quot;: true,
        &amp;quot;**/arch/nios2&amp;quot;: true,
        &amp;quot;**/arch/parisc&amp;quot;: true,
        &amp;quot;**/arch/powerpc&amp;quot;: true,
        &amp;quot;**/arch/s390&amp;quot;: true,
        &amp;quot;**/arch/sparc&amp;quot;: true,
        &amp;quot;**/arch/score&amp;quot;: true,
        &amp;quot;**/arch/sh&amp;quot;: true,
        &amp;quot;**/arch/um&amp;quot;: true,
        &amp;quot;**/arch/unicore32&amp;quot;: true,
        &amp;quot;**/arch/xtensa&amp;quot;: true
    &amp;#125;,
    &amp;quot;[c]&amp;quot;: &amp;#123;
        &amp;quot;editor.detectIndentation&amp;quot;: false,
        &amp;quot;editor.tabSize&amp;quot;: 8,
        &amp;quot;editor.insertSpaces&amp;quot;: false
    &amp;#125;,
    &amp;quot;C_Cpp.errorSquiggles&amp;quot;: &amp;quot;Disabled&amp;quot;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;tasks.json&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;&amp;#123;
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    &amp;quot;version&amp;quot;: &amp;quot;2.0.0&amp;quot;,
    &amp;quot;tasks&amp;quot;: [
      &amp;#123;
        &amp;quot;label&amp;quot;: &amp;quot;vm&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;shell&amp;quot;,
        &amp;quot;command&amp;quot;: &amp;quot;qemu-system-x86_64 -kernel $&amp;#123;workspaceFolder&amp;#125;/arch/x86/boot/bzImage -initrd ../rootfs.cpio.gz -S -s -nographic -append \&amp;quot;console=ttyS0\&amp;quot;&amp;quot;,
        &amp;quot;presentation&amp;quot;: &amp;#123;
          &amp;quot;echo&amp;quot;: true,
          &amp;quot;clear&amp;quot;: true,
          &amp;quot;group&amp;quot;: &amp;quot;vm&amp;quot;
        &amp;#125;,
        &amp;quot;isBackground&amp;quot;: true,
        &amp;quot;problemMatcher&amp;quot;: [
          &amp;#123;
            &amp;quot;pattern&amp;quot;: [
              &amp;#123;
                &amp;quot;regexp&amp;quot;: &amp;quot;.&amp;quot;,
                &amp;quot;file&amp;quot;: 1,
                &amp;quot;location&amp;quot;: 2,
                &amp;quot;message&amp;quot;: 3
              &amp;#125;
            ],
            &amp;quot;background&amp;quot;: &amp;#123;
              &amp;quot;activeOnStart&amp;quot;: true,
              &amp;quot;beginsPattern&amp;quot;: &amp;quot;.&amp;quot;,
              &amp;quot;endsPattern&amp;quot;: &amp;quot;.&amp;quot;,
            &amp;#125;
          &amp;#125;
        ]
      &amp;#125;,
      &amp;#123;
        &amp;quot;label&amp;quot;: &amp;quot;build linux&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;shell&amp;quot;,
        &amp;quot;command&amp;quot;: &amp;quot;make&amp;quot;,
        &amp;quot;group&amp;quot;: &amp;#123;
          &amp;quot;kind&amp;quot;: &amp;quot;build&amp;quot;,
          &amp;quot;isDefault&amp;quot;: true
        &amp;#125;,
        &amp;quot;presentation&amp;quot;: &amp;#123;
          &amp;quot;echo&amp;quot;: false,
          &amp;quot;group&amp;quot;: &amp;quot;build&amp;quot;
        &amp;#125;
      &amp;#125;
    ]
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;start-kernel分析&#34;&gt;&lt;a href=&#34;#start-kernel分析&#34; class=&#34;headerlink&#34; title=&#34;start_kernel分析&#34;&gt;&lt;/a&gt;start_kernel分析&lt;/h3&gt;&lt;p&gt;Linux内核的起点是start_kernel函数，因此先在start_kernel处打断点，启动调试，程序在断点处暂停，从start_kernel开始进行跟踪分析。单步跳过进行跟踪分析，发现0号进程init_task被设为整个系统的初始进程，即0号进程是手工创建的，其他进程都是0号进程创建的。在内核引导时，init_task会被创建并启动，是所有其他进程的起点。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/start-kernel%E5%88%86%E6%9E%90/image-20230322182527537.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;继续单步跳过，start_kernel执行各种初始化操作。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/start-kernel%E5%88%86%E6%9E%90/image-20230322182615765.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在start_kernel()函数末尾，arch_call_rest_init()函数体内为rest_init()函数，因此设置一个rest_init函数断点，进入rest_init函数体内，该函数由0号进程执行。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/start-kernel%E5%88%86%E6%9E%90/image-20230322182637929.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;kernel_thread函数创建kernel_init，对应1号进程，是所有用户进程的祖先。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/start-kernel%E5%88%86%E6%9E%90/image-20230322182654775.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;接着kernel_thread函数创建kthreadd，对应2号进程，是所有内核进程的祖先。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/start-kernel%E5%88%86%E6%9E%90/image-20230322182731769.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;进入kernel_thread函数查看，该函数通过do_fork函数创建进程。通过kernel_thread函数代码可以看到1号进程和2号进程最终都是通过do_fork创建的，用户态通过系统调用fork创建一个进程最终也是通过do_fork来完成的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/start-kernel%E5%88%86%E6%9E%90/image-20230322182849414.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;进程的创建过程大致是父进程通过fork系统调用进入内核_do_fork函数，复制进程描述符及相关进程资源（采用写时复制技术）、分配子进程的内核堆栈并对内核堆栈和thread等进程关键上下文进行初始化，最后将子进程放入就绪队列，fork系统调用返回；而子进程则在被调度执行时根据设置的内核堆栈和thread等进程关键上下文开始执行。&lt;/p&gt;
&lt;p&gt;查看kernel_init函数定义，如下图的代码实现部分会调用run_init_process函数。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/start-kernel%E5%88%86%E6%9E%90/image-20230322183036095.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;run_init_process函数如下，其中do_execve用于加载可执行文件、运行init程序并执行exec系统调用。1号进程完成用户态初始化。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/start-kernel%E5%88%86%E6%9E%90/image-20230322183100553.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;查看kthreadd函数定义。2号进程创建并完成初始化。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/start-kernel%E5%88%86%E6%9E%90/image-20230322183119712.png&#34;&gt;&lt;/p&gt;
</content>
        <category term="计算机科学" scheme="https://hdqjl317.github.io/categories/computer-science/" />
        <category term="Linux" scheme="https://hdqjl317.github.io/tags/Linux/" />
        <updated>2023-03-22T12:37:30.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2023/03/12/computer-science/RISCV%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</id>
        <title>RISCV汇编代码分析</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2023/03/12/computer-science/RISCV%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
        <content type="html">&lt;h2 id=&#34;实验步骤&#34;&gt;&lt;a href=&#34;#实验步骤&#34; class=&#34;headerlink&#34; title=&#34;实验步骤&#34;&gt;&lt;/a&gt;实验步骤&lt;/h2&gt;&lt;h4 id=&#34;1-安装RISC-V的交叉编译器&#34;&gt;&lt;a href=&#34;#1-安装RISC-V的交叉编译器&#34; class=&#34;headerlink&#34; title=&#34;1.安装RISC-V的交叉编译器&#34;&gt;&lt;/a&gt;1.安装RISC-V的交叉编译器&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo apt-get install gcc-riscv64-linux-gnu
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../../hugo/site/myblogs/content/post/RISC-V/pic/image-20230312205620329.png&#34; alt=&#34;image-20230312205620329&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-编写一个测试程序&#34;&gt;&lt;a href=&#34;#2-编写一个测试程序&#34; class=&#34;headerlink&#34; title=&#34;2.编写一个测试程序&#34;&gt;&lt;/a&gt;2.编写一个测试程序&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;/../../../../hugo/site/myblogs/content/post/RISC-V/pic/image-20230312205719027.png&#34; alt=&#34;image-20230312205719027&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;3-生成RISC-V的汇编代码&#34;&gt;&lt;a href=&#34;#3-生成RISC-V的汇编代码&#34; class=&#34;headerlink&#34; title=&#34;3.生成RISC-V的汇编代码&#34;&gt;&lt;/a&gt;3.生成RISC-V的汇编代码&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;riscv64-linux-gnu-gcc -S -o risc_test.s risc_test.c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../../hugo/site/myblogs/content/post/RISC-V/pic/image-20230312205952918.png&#34; alt=&#34;image-20230312205952918&#34;&gt;&lt;img data-src=&#34;/../../../../hugo/site/myblogs/content/post/RISC-V/pic/image-20230312210023794.png&#34; alt=&#34;image-20230312210023794&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../../hugo/site/myblogs/content/post/RISC-V/pic/image-20230312210039519.png&#34; alt=&#34;image-20230312210039519&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;4-分析汇编代码&#34;&gt;&lt;a href=&#34;#4-分析汇编代码&#34; class=&#34;headerlink&#34; title=&#34;4.分析汇编代码&#34;&gt;&lt;/a&gt;4.分析汇编代码&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;    .file	&amp;quot;risc_test.c&amp;quot; 	; 原C代码文件名
    .option nopic
    .text
    .align	1				
    .globl	g				; g为全局符号
    .type	g, @function	; g定义为函数
g:
    add	sp,sp,-32			; sp = sp - 32, sp为栈顶指针
    sd	s0,24(sp)			; s0的值保存在sp+24的地址中， s0为栈底指针
    add	s0,sp,32			; s0 = sp + 32
    mv	a5,a0				; a5 = a0 
    sw	a5,-20(s0)			; a5的值保存在s0-20的地址中
    lw	a5,-20(s0)			; 将s0-20地址中的值保存在a5
    addw	a5,a5,3			; a5 = a5 + 3
    sext.w	a5,a5
    mv	a0,a5				; g函数的返回a5保存在a0中用于返回
    ld	s0,24(sp)			; s0 = sp + 24，恢复栈底指针原值
    add	sp,sp,32			; 恢复栈顶指针原值
    jr	ra					; 跳转，函数返回
    .size	g, .-g
    .align	1
    .globl	f				; f为全局符号
    .type	f, @function	; f定义为函数
f:
    add	sp,sp,-32			; sp = sp - 32, sp为栈顶指针
    sd	ra,24(sp)			; ra的值（返回地址）保存在sp+24的地址中
    sd	s0,16(sp)			; s0的值保存在sp+16的地址中， s0为栈底指针
    add	s0,sp,32			; s0 = sp + 32
    mv	a5,a0				; a5 = a0,保存函数传入进来的的参数
    sw	a5,-20(s0)a			; a5的值存放到s0-20指向的地址中
    lw	a5,-20(s0)			; 将s0-20地址中的值存放到a5中
    mv	a0,a5				; a0 = a5保存调用g函数的待传的参数
    call	g				; 调用g函数
    mv	a5,a0				; a5 = a0
    mv	a0,a5				; a0 = a5, f函数的返回值保存在a0中
    ld	ra,24(sp)			; ra = sp + 24, 得到返回地址
    ld	s0,16(sp)			; s0 = sp + 16, 将sp+16的值重新存储到s0栈底指针中，指向main函数的栈空间
    add	sp,sp,32			; sp = sp + 32, 指向main函数栈空间栈顶
    jr	ra					; 函数返回，回到mian函数
    .size	f, .-f
    .align	1
    .globl	main
    .type	main, @function
main:
    add	sp,sp,-16			; sp = sp - 16
    sd	ra,8(sp)			; ra存放的返回地址值放到sp+8
    sd	s0,0(sp)			; s0为栈底指针，将s0的值存放到sp指向的地址中
    add	s0,sp,16			; s0=sp+16，构造main函数的栈空间
    li	a0,8				; 保存函数调用的待传参数
    call	f				; 调用f函数
    mv	a5,a0				; a5 = a0, f函数返回值保存到a5中
    addw	a5,a5,1			; a5 = a5 + 1
    sext.w	a5,a5
    mv	a0,a5				; a0 = a5, 保存main函数的返回值
    ld	ra,8(sp)			; 得到返回地址
    ld	s0,0(sp)			; 恢复栈底指针
    add	sp,sp,16			; 恢复栈顶指针
    jr	ra					; 函数返回
    .size	main, .-main
    .ident	&amp;quot;GCC: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="计算机科学" scheme="https://hdqjl317.github.io/categories/computer-science/" />
        <category term="RISCV" scheme="https://hdqjl317.github.io/tags/RISCV/" />
        <updated>2023-03-12T12:22:27.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2023/03/08/computer-science/Rust%E5%AE%8F/</id>
        <title>Rust宏</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2023/03/08/computer-science/Rust%E5%AE%8F/"/>
        <content type="html">&lt;h3 id=&#34;宏和函数的区别&#34;&gt;&lt;a href=&#34;#宏和函数的区别&#34; class=&#34;headerlink&#34; title=&#34;宏和函数的区别&#34;&gt;&lt;/a&gt;宏和函数的区别&lt;/h3&gt;&lt;p&gt;宏和函数的区别并不少，而且对于宏擅长的领域，函数其实是有些无能为力的。&lt;/p&gt;
&lt;h4 id=&#34;元编程&#34;&gt;&lt;a href=&#34;#元编程&#34; class=&#34;headerlink&#34; title=&#34;元编程&#34;&gt;&lt;/a&gt;元编程&lt;/h4&gt;&lt;p&gt;从根本上来说，宏是通过一种代码来生成另一种代码，如果大家熟悉元编程，就会发现两者的共同点。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;derive&lt;/code&gt; 属性会自动为结构体派生出相应特征所需的代码，例如 &lt;code&gt;#[derive(Debug)]&lt;/code&gt;，还有熟悉的 &lt;code&gt;println!&lt;/code&gt; 和 &lt;code&gt;vec!&lt;/code&gt;，所有的这些宏都会展开成相应的代码，且很可能是长得多的代码。&lt;/p&gt;
&lt;p&gt;总之，元编程可以帮我们减少所需编写的代码，也可以一定程度上减少维护的成本，虽然函数复用也有类似的作用，但是宏依然拥有自己独特的优势。&lt;/p&gt;
&lt;h4 id=&#34;可变参数&#34;&gt;&lt;a href=&#34;#可变参数&#34; class=&#34;headerlink&#34; title=&#34;可变参数&#34;&gt;&lt;/a&gt;可变参数&lt;/h4&gt;&lt;p&gt;Rust 的函数签名是固定的：定义了两个参数，就必须传入两个参数，多一个少一个都不行，对于从 JS&amp;#x2F;TS 过来的同学，这一点其实是有些恼人的。而宏就可以拥有可变数量的参数，例如可以调用一个参数的 &lt;code&gt;println!(&amp;quot;hello&amp;quot;)&lt;/code&gt;，也可以调用两个参数的 &lt;code&gt;println!(&amp;quot;hello &amp;#123;&amp;#125;&amp;quot;, name)&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;宏展开&#34;&gt;&lt;a href=&#34;#宏展开&#34; class=&#34;headerlink&#34; title=&#34;宏展开&#34;&gt;&lt;/a&gt;宏展开&lt;/h4&gt;&lt;p&gt;由于宏会被展开成其它代码，且这个展开过程是发生在编译器对代码进行解释之前。因此，宏可以为指定的类型实现某个特征：先将宏展开成实现特征的代码后，再被编译。而函数就做不到这一点，因为它直到运行时才能被调用，而特征需要在编译期被实现。&lt;/p&gt;
&lt;h4 id=&#34;宏的缺点&#34;&gt;&lt;a href=&#34;#宏的缺点&#34; class=&#34;headerlink&#34; title=&#34;宏的缺点&#34;&gt;&lt;/a&gt;宏的缺点&lt;/h4&gt;&lt;p&gt;相对函数来说，由于宏是基于代码再展开成代码，因此实现相比函数来说会更加复杂，再加上宏的语法更为复杂，最终导致定义宏的代码相当地难读，也难以理解和维护。&lt;/p&gt;
&lt;h3 id=&#34;宏的分类&#34;&gt;&lt;a href=&#34;#宏的分类&#34; class=&#34;headerlink&#34; title=&#34;宏的分类&#34;&gt;&lt;/a&gt;宏的分类&lt;/h3&gt;&lt;p&gt;​		Rust 中的宏相较C&amp;#x2F;C++更为强大。C&amp;#x2F;C++ 中的宏在预处理阶段可以展开为文本，Rust 的宏则是对语法的扩展，是在构建语法树时，才展开的宏。&lt;/p&gt;
&lt;p&gt;​		Rust 中宏可以分为很多类，包括通过 macro_rules 定义的&lt;strong&gt;声明式宏&lt;/strong&gt;和三种&lt;strong&gt;过程式宏&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;声明式宏（Declarative macros）使得你能够写出类似 match 表达式的东西，来操作你所提供的 Rust 代码。它使用你提供的代码来生成用于替换宏调用的代码。&lt;/li&gt;
&lt;li&gt;过程宏（Procedural macros）允许你操作给定 Rust 代码的抽象语法树（abstract syntax tree, AST）。过程宏是从一个（或者两个）&lt;code&gt;TokenStream&lt;/code&gt;到另一个&lt;code&gt;TokenStream&lt;/code&gt;的函数，用输出的结果来替换宏调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有三种类型的过程宏：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;派生宏（Derive macros）：适用于结构、枚举和联合，并使用&lt;code&gt;#[derive(MyMacro)]&lt;/code&gt;声明进行注释。它们还可以声明辅助属性，这些属性可以附加到项目的成员（例如枚举变体或结构字段）。&lt;/li&gt;
&lt;li&gt;类属性式宏（Attribute-like macros）：类属性式宏能够让你创建一个自定义的属性，该属性将其自身关联一个项（item），并允许对该项进行操作。它也可以接收参数。类似于派生宏，但可以附加到更多项，例如特征定义和函数。&lt;/li&gt;
&lt;li&gt;类函数式宏（Function-like macros）：类函数宏类似于声明式宏，因为它们是用宏调用运算符调用的&lt;code&gt;!&lt;/code&gt;，看起来像函数调用。它们对您放在括号内的代码进行操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;声明宏的用法&#34;&gt;&lt;a href=&#34;#声明宏的用法&#34; class=&#34;headerlink&#34; title=&#34;声明宏的用法&#34;&gt;&lt;/a&gt;声明宏的用法&lt;/h3&gt;&lt;p&gt;在Rust中，应用最广泛的一种宏就是声明式宏，类似于模式匹配的写法，将传入的 Rust 代码与预先指定的模式进行比较，在不同模式下生成不同的代码。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;macro_rules!&lt;/code&gt;来定义一个声明式宏。&lt;/p&gt;
&lt;p&gt;最基础的例子是很常见的&lt;code&gt;vec!&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;let v: Vec&amp;lt;u32&amp;gt; = vec![1, 2, 3];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;简化版的定义是（实际的版本有其他分支，而且该分支下要预先分配内存防止在push时候再动态分划）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;#[macro_export]
macro_rules! vec &amp;#123;
    ( $( $x:expr ),* ) =&amp;gt; &amp;#123;
        &amp;#123;
            let mut temp_vec = Vec::new();
            $(
                temp_vec.push($x);
            )*
            temp_vec
        &amp;#125;
    &amp;#125;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;::: &lt;code&gt;$( $x:expr ),*&lt;/code&gt;和&lt;code&gt;$( $x:expr,)*&lt;/code&gt;的区别是什么？&lt;/p&gt;
&lt;p&gt;前者，最后的&lt;code&gt;,&lt;/code&gt;是MacroRepSep，意味着 &lt;code&gt;1,2,3&lt;/code&gt;是一个合法的序列。&lt;/p&gt;
&lt;p&gt;后者，最后的&lt;code&gt;,&lt;/code&gt;是MacroMatch的一部分，意味着 &lt;code&gt;1,2,3,&lt;/code&gt;才是一个合法的序列。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#[macro_export]&lt;/code&gt;标签是用来声明：只要 use 了这个crate，就可以使用该宏。同时包含被 export 出的宏的模块，在声明时必须放在前面，否则靠前的模块里找不到这些宏。&lt;/p&gt;
&lt;p&gt;按照官方文档的说法，&lt;code&gt;macro_rules!&lt;/code&gt;目前有一些设计上的问题，日后将推出新的机制来取代他。但是他依然是一个很有效的语法扩展方法。&lt;/p&gt;
&lt;p&gt;这里一个注意点是：如果想要创建临时变量，那么必须要像上面这个例子这样，放在某个块级作用域内，以便自动清理掉，否则会认为是不安全的行为。&lt;/p&gt;
&lt;h3 id=&#34;声明宏的限制&#34;&gt;&lt;a href=&#34;#声明宏的限制&#34; class=&#34;headerlink&#34; title=&#34;声明宏的限制&#34;&gt;&lt;/a&gt;声明宏的限制&lt;/h3&gt;&lt;p&gt;声明式宏有一些限制，有些是与 Rust 宏本身有关，有些则是声明式宏所特有的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺少对宏的自动完成和展开的支持&lt;/li&gt;
&lt;li&gt;声明式宏调式困难&lt;/li&gt;
&lt;li&gt;修改能力有限&lt;/li&gt;
&lt;li&gt;更大的二进制&lt;/li&gt;
&lt;li&gt;更长的编译时间（这一条对于声明式宏和过程宏都存在）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;过程宏的使用&#34;&gt;&lt;a href=&#34;#过程宏的使用&#34; class=&#34;headerlink&#34; title=&#34;过程宏的使用&#34;&gt;&lt;/a&gt;过程宏的使用&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;cargo new custom   新建一个名为custom的工程。&lt;/li&gt;
&lt;li&gt;cd custom &amp;amp;&amp;amp; cargo new custom-derive  在custom内新建一个名为custom-derive 用于编写过程宏。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;custom  Cargo.toml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;toml&#34;&gt;[package]
name = &amp;quot;custom&amp;quot;
version = &amp;quot;0.1.0&amp;quot;
[dependencies]
custom-derive=&amp;#123;path=&amp;quot;custom-derive&amp;quot;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;custom-derive  Cargo.toml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;toml&#34;&gt;[package]
name=&amp;quot;custom-derive&amp;quot;
version=&amp;quot;0.1.0&amp;quot;

[lib]
proc-macro = true   # 使用过程宏

[dependencies]
# quote = &amp;quot;1.0.9&amp;quot;                 # 目前没用到，先注释了
# proc-macro2 = &amp;quot;1.0.27&amp;quot; 
# syn = &amp;#123;version=&amp;quot;1.0.72&amp;quot;, features=[&amp;quot;full&amp;quot;]&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;项目结构：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── Cargo.toml
├── custom-derive
│   ├── Cargo.toml
│   └── src
│       └── lib.rs
└── src
│   └── main.rs
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;lib.rs&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;use proc_macro::TokenStream;

extern crate proc_macro;

// 函数式宏
#[proc_macro]
pub fn make_hello(item: TokenStream) -&amp;gt; TokenStream &amp;#123;
    let name = item.to_string();
    let hell = &amp;quot;Hello &amp;quot;.to_string() + name.as_ref();
    let fn_name =
        &amp;quot;fn hello_&amp;quot;.to_string() + name.as_ref() + &amp;quot;()&amp;#123; println!(\&amp;quot;&amp;quot; + hell.as_ref() + &amp;quot;\&amp;quot;); &amp;#125;&amp;quot;;
    fn_name.parse().unwrap()
&amp;#125;

// 属性宏 （两个参数）
#[proc_macro_attribute]
pub fn log_attr(attr:TokenStream, item:TokenStream)-&amp;gt;TokenStream&amp;#123;
    println!(&amp;quot;Attr:&amp;#123;&amp;#125;&amp;quot;, attr.to_string());
    println!(&amp;quot;Item:&amp;#123;&amp;#125;&amp;quot;, item.to_string());
    item
&amp;#125;


// 派生宏
#[proc_macro_derive(Hello)]
pub fn hello_derive(input: TokenStream)-&amp;gt; TokenStream &amp;#123;
    println!(&amp;quot;&amp;#123;:?&amp;#125;&amp;quot;, input);
    TokenStream::new()  
    // 如果直接返回input，编译会报重复定义，说明派生宏用于扩展定义
    // input   
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;TokenStream&lt;/code&gt; 相当编译过程中的语法树的流。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;main.rs&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;extern crate custom_derive;
use custom_derive::log_attr;
use custom_derive::make_hello;
use custom_derive::Hello;

make_hello!(world);
make_hello!(张三);

#[log_attr(struct, &amp;quot;world&amp;quot;)]
struct Hello&amp;#123;
    pub name: String,
&amp;#125;

#[log_attr(func, &amp;quot;test&amp;quot;)]
fn invoked()&amp;#123;&amp;#125;


#[derive(Hello)]
struct World;

fn main() &amp;#123;
    // 使用make_hello生成
    hello_world();
    hello_张三();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;make_hello 使用&lt;code&gt;#[proc_macro]&lt;/code&gt; ，定义自动生成一个传入参数函数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;Hello world
Hello 张三
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;log_attr 使用&lt;code&gt;#[proc_macro_attribute]&lt;/code&gt; ，编译期间会打印结构类型和参数，后面可用修改替换原属性定义。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;Attr:struct, &amp;quot;world&amp;quot;                                  
Item:struct Hello &amp;#123; pub name : String, &amp;#125;
Attr:func, &amp;quot;test&amp;quot;
Item:fn invoked() &amp;#123; &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;#[derive(Hello)]  使用&lt;code&gt;#[proc_macro_derive(Hello)]&lt;/code&gt;·，会打印当前TokenStream 结点流，可以和 syn 与 quto 库结合，扩展定义。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;TokenStream [Ident &amp;#123; ident: &amp;quot;struct&amp;quot;, span: #0 bytes(286..292) &amp;#125;, Ident &amp;#123; ident: &amp;quot;World&amp;quot;, span: #0 bytes(293..298) &amp;#125;, Punct &amp;#123; ch: &amp;#39;;&amp;#39;, spacing: Alone, span: #0 bytes(298..299) &amp;#125;]
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="计算机科学" scheme="https://hdqjl317.github.io/categories/computer-science/" />
        <category term="C2Rust" scheme="https://hdqjl317.github.io/tags/C2Rust/" />
        <updated>2023-03-08T12:31:06.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2023/03/08/computer-science/Rust%E8%BF%87%E7%A8%8B%E5%AE%8F/</id>
        <title>Rust过程宏</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2023/03/08/computer-science/Rust%E8%BF%87%E7%A8%8B%E5%AE%8F/"/>
        <content type="html">&lt;p&gt;过程宏，它更像函数，接受一些代码作为参数输入，然后对他们进行加工，生成新的代码，他不是在做声明式宏那样的模式匹配。三种过程式宏都是这种思路。&lt;/p&gt;
&lt;p&gt;过程宏分为三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;派生宏（Derive macro）：用于结构体（struct）、枚举（enum）、联合（union）类型，可为其实现函数或特征（Trait）。&lt;/li&gt;
&lt;li&gt;属性宏（Attribute macro）：用在结构体、字段、函数等地方，为其指定属性等功能。如标准库中的#[inline]、#[derive(…)]等都是属性宏。&lt;/li&gt;
&lt;li&gt;函数式宏（Function-like macro）：用法与普通的规则宏类似，但功能更加强大，可实现任意语法树层面的转换功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不能在原始的crate中直接写过程式宏，需要把过程式宏放到一个单独的crate中（以后可能会消除这种约定）。定义过程式宏的方法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;use proc_macro;

#[some_attribute]
pub fn some_name(input: TokenStream) -&amp;gt; TokenStream &amp;#123;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要引入&lt;code&gt;proc_macro&lt;/code&gt; 这个 crate，然后标签是用来声明它是哪种过程式宏的，接着就是一个函数定义，函数接受 &lt;code&gt;TokenStream&lt;/code&gt;，返回 &lt;code&gt;TokenStream&lt;/code&gt;。&lt;code&gt;TokenStream&lt;/code&gt; 类型就定义在 &lt;code&gt;proc_macro&lt;/code&gt; 包中，表示 token 序列。除了标准库中的这个包，还可以使用&lt;code&gt;proc_macro2&lt;/code&gt; 包，使用 &lt;code&gt;proc_macro2::TokenStream::from()&lt;/code&gt; 和 &lt;code&gt;proc_macro::TokenStream::from()&lt;/code&gt; 可以很便捷地在两个包的类型间进行转换。使用 &lt;code&gt;proc_macro2&lt;/code&gt; 的好处是可以在过程宏外部使用 &lt;code&gt;proc_macro2&lt;/code&gt; 的类型，相反 &lt;code&gt;proc_macro&lt;/code&gt; 中的类型只可以在过程宏的上下文中使用。且 &lt;code&gt;proc_macro2&lt;/code&gt; 写出的宏更容易编写测试代码。&lt;/p&gt;
&lt;p&gt;下面详细说明如何定义三类过程宏。&lt;/p&gt;
&lt;h3 id=&#34;Custom-Derive-宏&#34;&gt;&lt;a href=&#34;#Custom-Derive-宏&#34; class=&#34;headerlink&#34; title=&#34;Custom Derive 宏&#34;&gt;&lt;/a&gt;Custom Derive 宏&lt;/h3&gt;&lt;p&gt;在本节中，我们的目的是实现下面的代码，使用编译器为我们生成名为 &lt;code&gt;HelloMacro&lt;/code&gt; 的 &lt;code&gt;Trait&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;use hello_macro::HelloMacro;
use hello_macro_derive::HelloMacro;

#[derive(HelloMacro)]
struct Pancakes;

fn main() &amp;#123;
    Pancakes::hello_macro();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该 &lt;code&gt;Trait&lt;/code&gt; 的定义如下，目的是打印实现该宏的类型名&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;pub trait HelloMacro &amp;#123;
    fn hello_macro();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由于过程宏不能在原 crate 中实现，我们需要如下在 &lt;code&gt;hello_crate&lt;/code&gt; 的目录下新建一个 &lt;code&gt;hello_macro_derive&lt;/code&gt; crate&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;cargo new hello_macro_derive --lib
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在新的 crate 内，我们需要修改 &lt;code&gt;Cargo.toml&lt;/code&gt; 配置文件，&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;toml&#34;&gt;[lib]
proc-macro = true

[dependencies]
syn = &amp;quot;1.0&amp;quot;
quote = &amp;quot;1.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;src/lib.rs&lt;/code&gt; 中可以着手实现该宏，其中 &lt;code&gt;syn&lt;/code&gt; 是用来解析 rust 代码的，而quote则可以用已有的变量生成代码的 &lt;code&gt;TokenStream&lt;/code&gt;，可以认为 &lt;code&gt;quote!&lt;/code&gt; 宏内的就是我们想要生成的代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;extern crate proc_macro;

use proc_macro::TokenStream;
use quote::quote;
use syn;

#[proc_macro_derive(HelloMacro)]
pub fn hello_macro_derive(input: TokenStream) -&amp;gt; TokenStream &amp;#123;
    // Construct a representation of Rust code as a syntax tree
    // that we can manipulate
    let ast = syn::parse(input).unwrap();

    // Build the trait implementation
    impl_hello_macro(&amp;amp;ast)
&amp;#125;

fn impl_hello_macro(ast: &amp;amp;syn::DeriveInput) -&amp;gt; TokenStream &amp;#123;
    let name = &amp;amp;ast.ident;
    let gen = quote! &amp;#123;
        impl HelloMacro for #name &amp;#123;
            fn hello_macro() &amp;#123;
                println!(&amp;quot;Hello, Macro! My name is &amp;#123;&amp;#125;!&amp;quot;, stringify!(#name));
            &amp;#125;
        &amp;#125;
    &amp;#125;;
    gen.into()
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;另外，&lt;strong&gt;Custom Derive 宏可以携带Attributes，称为 Derive macro helper attributes&lt;/strong&gt;，具体编写方法可以参考 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9yZWZlcmVuY2UvcHJvY2VkdXJhbC1tYWNyb3MuaHRtbCNkZXJpdmUtbWFjcm8taGVscGVyLWF0dHJpYnV0ZXM=&#34;&gt;Reference&lt;/span&gt;（Rust 中共有&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9yZWZlcmVuY2UvYXR0cmlidXRlcy5odG1s&#34;&gt;四类 Attributes&lt;/span&gt;）。关于 Derive macro helper attributes 这里有一个坑就是&lt;strong&gt;在使用 &lt;code&gt;cfg_attr&lt;/code&gt; 时，需要把 Attributes 放在宏之前。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;p&gt;使用 kube-rs 可以很方便地定义 CRD（Custom Resource Definition）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;#[derive(CustomResource, Clone, Debug, Deserialize, Serialize, JsonSchema)]
#[kube(group = &amp;quot;clux.dev&amp;quot;, version = &amp;quot;v1&amp;quot;, kind = &amp;quot;Foo&amp;quot;, namespaced)]
struct FooSpec &amp;#123;
    info: String,
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我第一反应是 &lt;code&gt;#[kube]&lt;/code&gt; 是一个 Attribute-Like 宏，但是查阅 kube-rs 文档才发现它其实是 &lt;code&gt;CustomResource&lt;/code&gt; Custom Derive 宏的 Attribute。这里我们想用 &lt;code&gt;cfg_attr&lt;/code&gt; 来控制是否去做 derive，一开始就想当然地这么写了：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;#[cfg_attr(feature=&amp;quot;use_kube_rs&amp;quot;,
    derive(CustomResource, Clone, Debug, Deserialize, Serialize, JsonSchema),
    kube(group = &amp;quot;clux.dev&amp;quot;, version = &amp;quot;v1&amp;quot;, kind = &amp;quot;Foo&amp;quot;, namespaced)
)]
struct FooSpec &amp;#123;
    info: String,
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然而这是错误的打开方式，需要写成：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;#[cfg_attr(feature=&amp;quot;use_kube_rs&amp;quot;,
    kube(group = &amp;quot;clux.dev&amp;quot;, version = &amp;quot;v1&amp;quot;, kind = &amp;quot;Foo&amp;quot;, namespaced),
    derive(CustomResource, Clone, Debug, Deserialize, Serialize, JsonSchema)
)]
struct FooSpec &amp;#123;
    info: String,
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Attributes 需要写在宏的 derive 前面。&lt;/p&gt;
&lt;h3 id=&#34;Attribute-Like-宏&#34;&gt;&lt;a href=&#34;#Attribute-Like-宏&#34; class=&#34;headerlink&#34; title=&#34;Attribute-Like 宏&#34;&gt;&lt;/a&gt;Attribute-Like 宏&lt;/h3&gt;&lt;p&gt;attribute-like 宏和 custom derive 宏很相似，只是标签可以自定义，更加灵活，甚至可以使用在函数上。他的使用方法如下，比如假设有一个宏为 &lt;code&gt;route&lt;/code&gt; 的宏&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;#[route(GET, &amp;quot;/&amp;quot;)] 
fn index() &amp;#123; ... &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;按下面的语法定义 &lt;code&gt;route&lt;/code&gt; 宏&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;#[proc_maco_attribute]
pub fn route(attr: TokenStream, item: TokenStream) -&amp;gt; TokenStream &amp;#123; ... &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中 &lt;code&gt;attr&lt;/code&gt; 参数是上面的 &lt;code&gt;Get&lt;/code&gt;，&lt;code&gt;&amp;quot;/&amp;quot;&lt;/code&gt; ；&lt;code&gt;item&lt;/code&gt; 参数是 &lt;code&gt;fn index()&amp;#123;&amp;#125;&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;Function-Like-宏&#34;&gt;&lt;a href=&#34;#Function-Like-宏&#34; class=&#34;headerlink&#34; title=&#34;Function-Like 宏&#34;&gt;&lt;/a&gt;Function-Like 宏&lt;/h3&gt;&lt;p&gt;这种宏看上去和 &lt;code&gt;macro_rules!&lt;/code&gt; 比较类似，但是在声明式宏只能用 &lt;code&gt;match&lt;/code&gt; 去做模式匹配，但是在这里可以有更复杂的解析方式，所以可以写出来&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;let sql = sql!(SELECT * FROM posts WHERE id=1);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面这个 &lt;code&gt;sql&lt;/code&gt; 宏的定义方法如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt;#[proc_macro]
pub fn sql(input: TokenStream) -&amp;gt; TokenStream &amp;#123; ... &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;好用的库&#34;&gt;&lt;a href=&#34;#好用的库&#34; class=&#34;headerlink&#34; title=&#34;好用的库&#34;&gt;&lt;/a&gt;好用的库&lt;/h2&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9wcm9jX21hY3JvL2luZGV4Lmh0bWw=&#34;&gt;proc_macro&lt;/span&gt;：默认 token 流库，只能在过程宏中使用，编译器要用它，将它作为过程宏的返回值，大多数情况我们不需要，只需要在宏返回结果的时候把 &lt;code&gt;proc_macro2::TokenSteam&lt;/code&gt; 的流 &lt;code&gt;into()&lt;/code&gt; 到 &lt;code&gt;proc_macro::TokenSteam&lt;/code&gt; 就行了。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jcmF0ZXMuaW8vY3JhdGVzL3Byb2NfbWFjcm8y&#34;&gt;proc_macro2&lt;/span&gt;：我们真正在使用的过程宏库，可以在过程宏外使用。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jcmF0ZXMuaW8vY3JhdGVzL3N5bg==&#34;&gt;syn&lt;/span&gt;：过程宏左护法，可以将 &lt;code&gt;TokenStream&lt;/code&gt; 解析成语法树，注意两个 &lt;code&gt;proc_macro&lt;/code&gt; 和 &lt;code&gt;proc_macro&lt;/code&gt; 都支持，需要看文档搞清楚库函数到底是在解析哪个库中的 &lt;code&gt;TokenStream&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jcmF0ZXMuaW8vY3JhdGVzL3F1b3Rl&#34;&gt;quote&lt;/span&gt;：过程宏右护法，将语法树解析成 &lt;code&gt;TokenStream&lt;/code&gt;。只要一个 &lt;code&gt;quote!&amp;#123;&amp;#125;&lt;/code&gt; 就够了！&lt;code&gt;quote!&amp;#123;&amp;#125;&lt;/code&gt; 宏内都是字面量，即纯纯的代码，要替换进去的变量是用的 &lt;code&gt;#&lt;/code&gt; 符号标注，为了和声明宏中使用的 &lt;code&gt;$&lt;/code&gt; 相区分（也就意味着用 &lt;code&gt;quote&lt;/code&gt; 写过程宏的时候，可以和声明宏结合 🤤 ）。模式匹配时用到的表示重复的符号和声明宏中一样，是使用 &lt;code&gt;*&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jcmF0ZXMuaW8vY3JhdGVzL2Rhcmxpbmc=&#34;&gt;darling&lt;/span&gt; 好用的标签宏解析库。&lt;/p&gt;
</content>
        <category term="计算机科学" scheme="https://hdqjl317.github.io/categories/computer-science/" />
        <category term="C2Rust" scheme="https://hdqjl317.github.io/tags/C2Rust/" />
        <updated>2023-03-08T12:29:54.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2023/02/03/computer-science/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</id>
        <title>编译原理</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2023/02/03/computer-science/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
        <content type="html">&lt;h2 id=&#34;什么是编译器&#34;&gt;&lt;a href=&#34;#什么是编译器&#34; class=&#34;headerlink&#34; title=&#34;什么是编译器&#34;&gt;&lt;/a&gt;什么是编译器&lt;/h2&gt;&lt;p&gt;所谓编译原理，也就是编译器的工作原理，因此先要明白什么是编译器。编译器的基本定义是：将一门语言转换为另一门语言，一般指将高级语言转换为机器语言，但仅仅是转换并不执行。编译器最基本的底线，就是保证源代码和目标代码的语义相同。&lt;/p&gt;
&lt;h3 id=&#34;在程序运行中的地位&#34;&gt;&lt;a href=&#34;#在程序运行中的地位&#34; class=&#34;headerlink&#34; title=&#34;在程序运行中的地位&#34;&gt;&lt;/a&gt;在程序运行中的地位&lt;/h3&gt;

&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201165538192.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图。编译器就是将源代码转换（即翻译）为目标程序，然后再交给机器去执行，这个应该很好理解。之所以要转换，是因为计算机本质上只能识别机器代码，不能识别高级语言 。简单解释一下这张图的各个部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“源代码”是 C java 等高级语言，每种程序对应的编译器可能都不一样&lt;/li&gt;
&lt;li&gt;“静态计算”是指编译器只根据程序文本静态的分析（如做报错分析、优化分析），而不是真的拿 CPU 去执行&lt;/li&gt;
&lt;li&gt;生成的“目标程序”可能是 x86 汇编（如对应 C 语言），也可能是 bytecode 字节码（如对应 java）&lt;/li&gt;
&lt;li&gt;“计算机”可能是一个 x86 的物理器（如对应 C 语言），也可能是 JVM java 虚拟机（如对应 java）。即不一定是一个真实的机器，可能是虚拟机，但这里都统称为“计算机”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外再解释一下编译器和另外一个常见的叫做“解释器”的对比。两者有很多共同点，但是有以下区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译器：输入源代码，输出的一个可执行程序，但不去执行（存放在磁盘上等待被加载到内存中执行）&lt;/li&gt;
&lt;li&gt;解释器：输入源代码，直接输出执行结果。其实 JVM 就是一个解释器，而不是一个单纯的编译器。输入 java 字节码 bytecode ，然后直接输出执行结果，而不是输出汇编代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;内部结构&#34;&gt;&lt;a href=&#34;#内部结构&#34; class=&#34;headerlink&#34; title=&#34;内部结构&#34;&gt;&lt;/a&gt;内部结构&lt;/h3&gt;

&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201165616680.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图，就是一个编译器最简单的内部结构（没有考虑代码优化过程）。&lt;/p&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201165702453.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图，这是一个更加复杂的编译器，各个过程都比较完备。其实拆开来看，编译器是一个“流水线”，由一个一个的小程序分流水线执行。因为编译器规模庞大复杂，拆分模块容易实现和维护。&lt;/p&gt;
&lt;p&gt;编译器通常会被划分为两个部分（如下图）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前端：源代码生成中间代码，和源代码有关&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;后端：中间代码生成目标代码并优化，和目标代码有关&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;两者以抽象语法树 AST 作为连接数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201165702453.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;一个简单的例子&#34;&gt;&lt;a href=&#34;#一个简单的例子&#34; class=&#34;headerlink&#34; title=&#34;一个简单的例子&#34;&gt;&lt;/a&gt;一个简单的例子&lt;/h3&gt;&lt;p&gt;背景一，现在我们设计一个叫做 Sum 的语言，特别简单，仅仅支持两种语法。第一是整形数字 &lt;code&gt;n&lt;/code&gt; ，第二是加法表达式 &lt;code&gt;e1 + e2&lt;/code&gt; 。举几个例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5 + 6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;7 + 8 + 9&lt;/code&gt; （加法要满足左结合性，即先计算 &lt;code&gt;7 + 8&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;7 + (8 + 9)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;但不支持 &lt;code&gt;7 + 8 * 9&lt;/code&gt; Sum 语言中没有乘法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;背景二，有一个栈试计算机 Stack （后面会再次讲到），其中有一个操作数栈，然后只支持两条指令 &lt;code&gt;push n&lt;/code&gt; 和 &lt;code&gt;add&lt;/code&gt; 。之所以选择栈式计算机，第一是因为简单，第二是因为 JVM 就是采用了这种形式。其指令的详情是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;push 3&lt;/code&gt; 将 3 压栈&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push 4&lt;/code&gt; 将 4 压栈&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add&lt;/code&gt; 将 3 和 4 出栈，然后做加法得到 7 ，再将 7 压栈。即将栈顶的两个元素都出栈，做加分，将结果再压栈&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了上述两个背景之后，接下来的任务是：编译程序 &lt;code&gt;1 + 2 + 3&lt;/code&gt; 到栈式计算机 Stack 。&lt;/p&gt;
&lt;p&gt;第一个阶段进行词法分析，先不管其中的原理是什么，总之词法分析会将 &lt;code&gt;1 + 2 + 3&lt;/code&gt; 拆分为 &lt;code&gt;1&lt;/code&gt; &lt;code&gt;+&lt;/code&gt; &lt;code&gt;2&lt;/code&gt; &lt;code&gt;+&lt;/code&gt; &lt;code&gt;3&lt;/code&gt; 这 5 个部分。&lt;br&gt;第二阶段是语法分析，就是将词法分析拆分出来的内容，分析是否满足 Sum 语言的语法要求，即 &lt;code&gt;e1 + e2&lt;/code&gt; 这种语法。&lt;br&gt;第三个阶段是语法树构造，经过某些计算之后，得到的抽象语法树如下图。&lt;/p&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201165829650.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;第四个阶段，根据抽象语法树做代码生成。首先，要满足加法的左结合性，对树进行遍历的时候就要优先遍历左子树，即&lt;strong&gt;后序遍历&lt;/strong&gt;。在遍历树节点的过程中，如果遇到整数 &lt;code&gt;n&lt;/code&gt; 就生成一条 &lt;code&gt;push n&lt;/code&gt; 指令，如果遇到 &lt;code&gt;+&lt;/code&gt; 就生成一条 &lt;code&gt;add&lt;/code&gt; 指令。接下来详细看一下这棵树的遍历过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步要访问的节点是 &lt;code&gt;1&lt;/code&gt; ，生成 &lt;code&gt;push 1&lt;/code&gt; ，将 1 压栈&lt;/li&gt;
&lt;li&gt;第二步要访问的节点是 &lt;code&gt;2&lt;/code&gt; ，生成 &lt;code&gt;push 2&lt;/code&gt; ，将 2 压栈&lt;/li&gt;
&lt;li&gt;第三步要访问的节点是 &lt;code&gt;+&lt;/code&gt; ，生成 &lt;code&gt;add&lt;/code&gt; ，将 1 2 出栈，计算加法得到 3 ，将 3 压栈 （这里即体现了加法的左结合性）&lt;/li&gt;
&lt;li&gt;第四步要访问的节点是 &lt;code&gt;3&lt;/code&gt; ，生成 &lt;code&gt;push 3&lt;/code&gt; ，将 3 压栈&lt;/li&gt;
&lt;li&gt;第五步要访问的节点是 &lt;code&gt;+&lt;/code&gt; ，生成 &lt;code&gt;add&lt;/code&gt; ，将 3 3 出栈，计算加法得到 6 ，将 6 压栈，完成&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;词法分析&#34;&gt;&lt;a href=&#34;#词法分析&#34; class=&#34;headerlink&#34; title=&#34;词法分析&#34;&gt;&lt;/a&gt;词法分析&lt;/h2&gt;&lt;p&gt;从编译器内部结构得知，执行编译的第一个阶段就是词法分析。&lt;strong&gt;输入是源程序代码，输出一个记号（即 token）流或者单词流&lt;/strong&gt;。通俗来说，就是将源代码进行最细粒度的拆解，例如上面的例子将 &lt;code&gt;1 + 2 + 3&lt;/code&gt; 拆分为 &lt;code&gt;1&lt;/code&gt; &lt;code&gt;+&lt;/code&gt; &lt;code&gt;2&lt;/code&gt; &lt;code&gt;+&lt;/code&gt; &lt;code&gt;3&lt;/code&gt; 一样。&lt;/p&gt;
&lt;h3 id=&#34;一个例子&#34;&gt;&lt;a href=&#34;#一个例子&#34; class=&#34;headerlink&#34; title=&#34;一个例子&#34;&gt;&lt;/a&gt;一个例子&lt;/h3&gt;

&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201165938490.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图。从源代码到记号流（或单词流），记号就是 token 。词法分析器会将源程序根据关键字、标识符（变量）、括号、引号、运算符、值（整数、字符串）等这些要素，将其从左到右拆分为若干个记号（或者单词），其中会忽略空格和换行等。上图中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IF&lt;/code&gt; 关键字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LPAREN&lt;/code&gt; &lt;code&gt;RPAREN&lt;/code&gt; 左右括号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INDENT(x)&lt;/code&gt; 即标识符（变量），有一个属性 &lt;code&gt;x&lt;/code&gt; ，表示变量名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GR&lt;/code&gt; 即 &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INT(t)&lt;/code&gt; 即 &lt;code&gt;int&lt;/code&gt; 类型值，属性是 &lt;code&gt;5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其他同理……&lt;/li&gt;
&lt;li&gt;最后红色的 &lt;code&gt;EOF&lt;/code&gt; 是结束符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据上面的例子，可以总结出 token 其实有固定的形式，就可以定义其数据结构，如下图（本文中高级语言的示例，默认情况下都是 C 语言）&lt;/p&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170050889.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;理解了例子，定义了数据，接下来就要去探寻词法分析的实现算法，第一，手工构造；第二，自动生成 。&lt;/p&gt;
&lt;h3 id=&#34;词法分析的手工构造法&#34;&gt;&lt;a href=&#34;#词法分析的手工构造法&#34; class=&#34;headerlink&#34; title=&#34;词法分析的手工构造法&#34;&gt;&lt;/a&gt;词法分析的手工构造法&lt;/h3&gt;&lt;p&gt;手工构造即手写一个词法分析器，例如 GCC LLVM ，优点是利于掌控和优化细节，缺点是工作量大、易出错。手工构造法主要用到“转移图”这种数据结构，下面举两个例子说明。&lt;/p&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170106446.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图的转移图模型，即可识别逻辑运算符，如 &lt;code&gt;&amp;lt;=&lt;/code&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;gt;=&lt;/code&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 。识别到第一个字符，就继续往下做分支判断，直到返回一个确定的运算符。图中的 &lt;code&gt;*&lt;/code&gt; 即一次回溯，即将当前的这个字符再返回到词法分析器重新进行分析。例如 &lt;code&gt;&amp;gt;1&lt;/code&gt; ，读到了 &lt;code&gt;1&lt;/code&gt; 这个字符时，此时已经确定了运算符是 &lt;code&gt;&amp;gt;&lt;/code&gt; ，而当前的 &lt;code&gt;1&lt;/code&gt; 并不是运算符的一部分，因此将 &lt;code&gt;1&lt;/code&gt; 再重新返回到词法分析器中重新进行分析。&lt;/p&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170142816.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图是标识符（变量）的转移图模型，以及伪代码。其中 &lt;code&gt;*&lt;/code&gt; 即一次回溯，跟上面一样。&lt;/p&gt;
&lt;p&gt;关键字（如 &lt;code&gt;class&lt;/code&gt; &lt;code&gt;if&lt;/code&gt; &lt;code&gt;for&lt;/code&gt; 等）是一种特殊的标识符，也满足标识符的规则。要识别关键字，有两种解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继续扩展转移图的分支，识别到关键字走不通的分支逻辑，最后识别出关键字。&lt;/li&gt;
&lt;li&gt;先识别所有的合法标识符，然后从已经识别出来的标识符中查找关键字。此时需要为该语言所有的关键字维护一个哈希表，如果数据结构合理（完美哈希），查询可以在 &lt;code&gt;O(1)&lt;/code&gt; 复杂度内完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;词法分析的自动生成技术&#34;&gt;&lt;a href=&#34;#词法分析的自动生成技术&#34; class=&#34;headerlink&#34; title=&#34;词法分析的自动生成技术&#34;&gt;&lt;/a&gt;词法分析的自动生成技术&lt;/h3&gt;&lt;p&gt;所谓自动生成技术，就是有这样现成的工具（如 lex flex jlex），输入一些声明式的规范，即可自动生成一个词法分析器。有点当然是简单快速，缺点就是无法控制细节。而这里的“声明式规范”，就是我们常见的正则表达式。下文的内容，就是如何用程序去解析正则表达式，如果你之前看过关于“正则表达式 原理”这类的文章，可能早就有了解了。&lt;/p&gt;
&lt;p&gt;先说一下自动生成技术的几个阶段，专业术语后面都有解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正则表达式 -&amp;gt; NFA&lt;/li&gt;
&lt;li&gt;NFA -&amp;gt; DFA&lt;/li&gt;
&lt;li&gt;DFA -&amp;gt; 词法分析代码，即完成自动生成&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;正则表达式&#34;&gt;&lt;a href=&#34;#正则表达式&#34; class=&#34;headerlink&#34; title=&#34;正则表达式&#34;&gt;&lt;/a&gt;正则表达式&lt;/h4&gt;&lt;p&gt;不要以为用过正则表达式就觉得它很简单了，如果你是通过看“30 分钟入门正则表达式”这类文章开始接触的，还是建议你仔细阅读这里关于正则表达式的解释。笔者也是看了这门课才对正则表达式有了新的认识。&lt;/p&gt;
&lt;p&gt;正则表达式是一种数学上的概念，首先它要有一个完整的字符集 &lt;code&gt;Σ = &amp;#123;...&amp;#125;&lt;/code&gt; 要能涵盖程序所有的关键字、变量名、数字、运算符、括号、引号、特殊符号等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如 C 语言的这个字符集就是 ASC 编码，即 256 个字符&lt;/li&gt;
&lt;li&gt;如 java 的字符集就是 unicode 编码，可能几万甚至十几万个字符集（因为 java 的变量名称并不仅限于英文、中文也可以作为变量）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后只有以下几个基本的逻辑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空串是正则表达式&lt;/li&gt;
&lt;li&gt;单个字符是正则表达式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a|b&lt;/code&gt; 是正则表达式，两者取并集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ab&lt;/code&gt; 是正则表达式，两者相连&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a*&lt;/code&gt; 成为“闭包”（和程序的闭包不一样），即可以有 0 或者若干个 &lt;code&gt;a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;以上随机组合，都是正则表达式，例如 &lt;code&gt;a|(bc*)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这就是正则表达式的定义，而现代正则表达式这么多的语法，例如 &lt;code&gt;[a-b]&lt;/code&gt; &lt;code&gt;?&lt;/code&gt; &lt;code&gt;+&lt;/code&gt; 等，都是后来扩展出的语法糖，即对基本规则的一种简写方式。&lt;/p&gt;
&lt;h4 id=&#34;有限状态自动机-FA&#34;&gt;&lt;a href=&#34;#有限状态自动机-FA&#34; class=&#34;headerlink&#34; title=&#34;有限状态自动机 FA&#34;&gt;&lt;/a&gt;有限状态自动机 FA&lt;/h4&gt;&lt;p&gt;也称“有穷自动机”，是一种数学模型。简单理解，就是输入一个字符串，输出这个字符串是否满足某个规则（true &amp;#x2F; false）。例如有 &lt;code&gt;a + b&lt;/code&gt; 这样一个规则，输入&lt;code&gt;“1 + 2 ”&lt;/code&gt; 就满足，输 &lt;code&gt;“abc”&lt;/code&gt; 这就不满足。其实现原理，就是先设定几个状态，然后根据输入的字符做状态转移，看最后能否转移到最终的状态。如下图，输入 &lt;code&gt;abbaabb&lt;/code&gt; ，初始状态是 &lt;code&gt;0&lt;/code&gt; ，然后分别输入一个一个的字符，看最后能否将状态转移到 &lt;code&gt;3&lt;/code&gt; 。&lt;/p&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170207504.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;有限状态自动机 FA 又分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定的有限状态自动机 DFA 。针对一个状态，输入一个字符，只能有一个出口。&lt;/li&gt;
&lt;li&gt;非确定的有限状态自动机 NFA 。针对一个状态，输入一个字符，可能会有多个出口。如上图中的 &lt;code&gt;0&lt;/code&gt; 状态，输入 &lt;code&gt;a&lt;/code&gt; 时有两个出口，所以它是 NFA 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看过“正则表达式 原理”类似文章的应该知道，其实每一个正则表达式，都能对应一个 FA ，因此接下来看一下正则表达式如何生成 FA 。&lt;/p&gt;
&lt;h4 id=&#34;从正则表达式-RE-到有限状态自动机-FA&#34;&gt;&lt;a href=&#34;#从正则表达式-RE-到有限状态自动机-FA&#34; class=&#34;headerlink&#34; title=&#34;从正则表达式 RE 到有限状态自动机 FA&#34;&gt;&lt;/a&gt;从正则表达式 RE 到有限状态自动机 FA&lt;/h4&gt;&lt;p&gt;先将正则表达式生成 NFA ，再将 NFA 生成 DFA 。这是因为：第一，RE 生成 NFA 比直接生成 DFA 更加简单；第二， NFA 做分析算法比较复杂，多个出口导致复杂度变高。因此，往往是将 NFA 转换为等价的 DFA ，然后再拿来做运算。&lt;/p&gt;
&lt;p&gt;从 RE 生成 NFA 课程中讲解了 Thompson 算法（Ken Thompson，unix 和 C 语言之父，1984 年图领奖）。具体内容我大体看明白了，不过太细节的也没必要记录了。其基本的逻辑是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对基本的 RE（空串、单个字符） 直接构造&lt;/li&gt;
&lt;li&gt;对复杂的 RE （或、连接、闭包）递归构造&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从 NFA 转换 DFA ，子集构造算法。所谓“子集”就是原来 NFA 的若干状态的集合，通过构造子集，来实现 DFA 。也就是说，此时构造出来的 DFA 就不单单是一个一个的状态节点了，而是一个一个的状态子集。&lt;/p&gt;
&lt;p&gt;另外，转换到了 DFA 之后，还要对 DFA 进行最小化的优化，课程中讲了 Hopcroft 算法。基本逻辑是，将生成的 DFA 的子集再进行合并，减少节点数量。状态节点越少，占用的空间复杂度越少，提高运算效率。&lt;/p&gt;
&lt;h4 id=&#34;根据-DFA-生成词法分析代码&#34;&gt;&lt;a href=&#34;#根据-DFA-生成词法分析代码&#34; class=&#34;headerlink&#34; title=&#34;根据 DFA 生成词法分析代码&#34;&gt;&lt;/a&gt;根据 DFA 生成词法分析代码&lt;/h4&gt;

&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170236807.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;DFA 实质上是带有边和节点的有向图，如上图。图中第一列是状态，第一行是字符，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在状态 &lt;code&gt;0&lt;/code&gt; 时，输入字符 &lt;code&gt;a&lt;/code&gt; ，行列交叉点是 &lt;code&gt;1&lt;/code&gt; ，表示可以转向状态 &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在状态 &lt;code&gt;1&lt;/code&gt; 时，输入字符 &lt;code&gt;a&lt;/code&gt; ，行列交叉点是 &lt;code&gt;2&lt;/code&gt; ，表示可以转向状态 &lt;code&gt;2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在状态 &lt;code&gt;1&lt;/code&gt; 时，输入字符 &lt;code&gt;b&lt;/code&gt; ，行列交叉点是 &lt;code&gt;1&lt;/code&gt; ，表示可以转向状态 &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了以上所有的逻辑，就可以判断一个字符串是否符合一个 RE 的规定，即可将字符串拆分为一个一个的 token 。这个方法叫做“转移表法”，课程中还讲了“哈希表”和“跳转表”，没有详细记录。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;语法分析&#34;&gt;&lt;a href=&#34;#语法分析&#34; class=&#34;headerlink&#34; title=&#34;语法分析&#34;&gt;&lt;/a&gt;语法分析&lt;/h2&gt;&lt;p&gt;词法分析之后，输出了记号流，然后传递给语法分析，这里主要有两部分工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入一个程序语法的表示，判断是否符合程序的语法&lt;/li&gt;
&lt;li&gt;如果符合，就根据输入的符号集，生成抽象语法树 AST&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;上下文无关文法-CFG&#34;&gt;&lt;a href=&#34;#上下文无关文法-CFG&#34; class=&#34;headerlink&#34; title=&#34;上下文无关文法 CFG&#34;&gt;&lt;/a&gt;上下文无关文法 CFG&lt;/h3&gt;&lt;p&gt;上文所说的“程序语法的表示”，就是上下文无关文法 CFG ，是一个描述语言语法规则的标准的数学工具。&lt;/p&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170303206.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图的左侧就是一个 CFG 的简单示例，其中每一条叫做“产生式”，图中的 &lt;code&gt;|&lt;/code&gt; 即“或”的意思。简单解释一下这个 CFG 的意思：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;“S -&amp;gt; N V N” 就是一个句子，其实 S 是开始符号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;N 和 V 都是非终结符，即它可以继续再往下扩展拆分，就像 “S -&amp;gt; N V N” 那样拆分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t g e 等这些都是终结符，即已经表述一个具体的事情了，没法再往下拆分了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170317523.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图就用 CFG 描述了一个 &lt;code&gt;*&lt;/code&gt; 和 &lt;code&gt;+&lt;/code&gt; 表达式，其中 &lt;code&gt;num&lt;/code&gt; 表示一个具体的数字， &lt;code&gt;id&lt;/code&gt; 表示标识符（变量），这俩都是终结符，&lt;code&gt;E&lt;/code&gt; 是非终结符。&lt;/p&gt;
&lt;p&gt;从上面的例子来看，可以根据一个 CFG 推导出若干个句子，例如上图的 CFG 可以推导出 &lt;code&gt;id + num&lt;/code&gt; 或者 &lt;code&gt;id * num&lt;/code&gt; 或者 &lt;code&gt;(id + num) * num&lt;/code&gt; 或者 ……&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法分析就是：给定一个文法 G 和句子 s ，要确定：是否能在 G 的推导结果中，找到 s ？（即，是否存在对句子的推导）&lt;/strong&gt; 如果能推导出来，说明句子 s 符合文法 G 的语法，否则不符合。如下图：&lt;/p&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170406338.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;推导方式一般有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最左推导：每次推导过程当中总是选择最左侧的符号进行替换&lt;/li&gt;
&lt;li&gt;最右推导：同理，选择最右侧&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分析树和二义性&#34;&gt;&lt;a href=&#34;#分析树和二义性&#34; class=&#34;headerlink&#34; title=&#34;分析树和二义性&#34;&gt;&lt;/a&gt;分析树和二义性&lt;/h3&gt;

&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170430263.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图，在文法的推导过程中，可以用树的形式来表示，即分析树。其中， 内部节点都是非终结符，叶子节点都是终结符，&lt;strong&gt;中序遍历&lt;/strong&gt;即可得到最终的句子。PS：到这里，貌似已经看到了最终输出的抽象语法树 AST 的雏形了，其本质就是来源于 CFG 的格式。&lt;/p&gt;
&lt;p&gt;所谓“二义性”就是指文法的书写会产生一些歧义，例如上图中 &lt;code&gt;*&lt;/code&gt; 和 &lt;code&gt;+&lt;/code&gt; 表达式的文法，采用最左推导和最右推导得出的结果是不一样的，可能分别得出 &lt;code&gt;(3+4)*5&lt;/code&gt; 和 &lt;code&gt;3+(4*5)&lt;/code&gt; ，显然计算结果不同。为了避免文法的二义性，只能是重写文法，将文法表述的更加详细一些，此处不做详解。&lt;/p&gt;
&lt;h3 id=&#34;自顶向下分析算法&#34;&gt;&lt;a href=&#34;#自顶向下分析算法&#34; class=&#34;headerlink&#34; title=&#34;自顶向下分析算法&#34;&gt;&lt;/a&gt;自顶向下分析算法&lt;/h3&gt;&lt;p&gt;上文已经明确了语法分析的定义，即看一个文法 G 是否存在对句子 s 的推导。自顶向下分析就是其中一个比较典型的算法，其基本逻辑是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即通过文法 G 随意推导出一个句子 t ，然后拿 t 和目标句子 s 进行对比&lt;/li&gt;
&lt;li&gt;如果 t &amp;#x3D;&amp;#x3D; s ，则成功&lt;/li&gt;
&lt;li&gt;如果 t !&amp;#x3D; s ，则回溯，从新计算一个 t1 ，再比较&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是，上述过程比较笨重，因为一个 G 能推导出来的句子可能有非常多种，都拿来跟 s 做比较，会发生很多回溯，非常耗时。可以用以下方式进行优化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从左到右的推导顺序，可以最先得到句子 t 的左侧&lt;/li&gt;
&lt;li&gt;拿 t 最先得到的左侧，和 s 左侧进行对比&lt;/li&gt;
&lt;li&gt;对比成功，则继续从左到右推导（接下来的推导，也都是没推导出左侧就和 s 对应的左侧部分进行对比，看是否成功）&lt;/li&gt;
&lt;li&gt;对比不成功，则回溯重来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是，上述优化后的算法，还是可能会有回溯发生，这远远达不到编译器的性能要求。编译器要处理的程序动辄几十万行，必须要求线性时间复杂度的算法，一旦有回溯就会严重影响性能。&lt;/p&gt;
&lt;h3 id=&#34;递归下降分析算法&#34;&gt;&lt;a href=&#34;#递归下降分析算法&#34; class=&#34;headerlink&#34; title=&#34;递归下降分析算法&#34;&gt;&lt;/a&gt;递归下降分析算法&lt;/h3&gt;&lt;p&gt;也称预测分析算法，其基本思路是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每个非终结符构造一个分析函数（即将整个文法匹配整个句子的方式，拆解开，用单个非终结符去匹配句子中的字符，即算法的分治思想），因为非终结符是可以层层定义的，因此是“递归”，如下图。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用“前看符号”（即不知道匹配哪一个，就去目标句子 s 中看一眼，给一个提示）指导当前产生式规则的选择。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170448660.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;递归下降分析算法的特点是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线性时间复杂度，运行高效&lt;/li&gt;
&lt;li&gt;容易实现，适合手工编码。错误定位准确。使用者有 GCC LLVM&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;LL-1-分析算法&#34;&gt;&lt;a href=&#34;#LL-1-分析算法&#34; class=&#34;headerlink&#34; title=&#34;LL(1) 分析算法&#34;&gt;&lt;/a&gt;LL(1) 分析算法&lt;/h3&gt;&lt;p&gt;递归下降分析算法适合于手工编码，而 LL(1) 分析算法适用于语法分析的自动生成。所谓“LL(1)”，是指：从左（L）向右读入程序，最左（L）推导，采用 1 个前看符号。分析高效，也是线性时间复杂度。&lt;/p&gt;
&lt;p&gt;其基本思想是 —— 表驱动的算法，如下图。第一列都是非终结符，第一行都是终结符，行列交叉点表示对应的产生式序号。&lt;/p&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170520036.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;回顾之前讲过的自顶向下分析算法，最大的问题就在于去盲目推导，盲目匹配出句子，然后再去和目标句子 s 做对比，对比出错就要回溯，时间复杂度非常高。因此，就需要在推导过程中就需要做分析预测，就可以从参考这个分析表。从分析表中，通过预测输入能得到产生式的序号，就知道接下来要匹配哪个产生式了，就不需要回溯了。&lt;/p&gt;
&lt;h3 id=&#34;LR-分析算法&#34;&gt;&lt;a href=&#34;#LR-分析算法&#34; class=&#34;headerlink&#34; title=&#34;LR 分析算法&#34;&gt;&lt;/a&gt;LR 分析算法&lt;/h3&gt;&lt;p&gt;上文主要将自顶向下的分析算法，而 LR 分析算法是自底向上的思路，但是输入、输出都是一样的。我没有看这部分，想详细了解的可以自己去看视频。&lt;/p&gt;
&lt;h3 id=&#34;抽象语法树-AST&#34;&gt;&lt;a href=&#34;#抽象语法树-AST&#34; class=&#34;headerlink&#34; title=&#34;抽象语法树 AST&#34;&gt;&lt;/a&gt;抽象语法树 AST&lt;/h3&gt;

&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170628092.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图，先看下抽象语法树 AST 和高级语言如何对应，根据代码对比一下，应该不难理解。其中，if 的最左侧节点是判断条件，中间节点是成功分支，右侧节点是 else 分支。&lt;/p&gt;
&lt;p&gt;再来回顾一下上文讲的 CFG 的分析树（上文有示意图），它详细编码了句子的推导过程，并且包含了很多无关信息（非终结符），会占用很多存储空间，会增加算法的空间和时间复杂度。如果能把这些“无关信息”给去掉，只留下运算符，数字，标识符等和程序相关的信息，就构成了抽象语法树 AST ，如下图。&lt;/p&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170648389.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;既然是一棵树，那么就是一个标准的数据结构，各个类型的节点的数据结构，也就可以固定了。如下图&lt;/p&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170704479.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;AST 是编译器中非常重要的数据结构，因为它是编译器前端和后端的接口形式。后续的过程仅仅依赖于 AST ，不会再依赖于前面的源码或者字符集。因此，一旦生成了 AST ，前面的源码就会被丢弃。因此，AST 中要有很详细的信息，不仅仅是本课程中讲的这个简单的树。例如，AST 要存储当前程序的文件、行、列，这样在语法报错时才能准确的给出具体的错误位置。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;语义分析&#34;&gt;&lt;a href=&#34;#语义分析&#34; class=&#34;headerlink&#34; title=&#34;语义分析&#34;&gt;&lt;/a&gt;语义分析&lt;/h2&gt;&lt;p&gt;语法分析输出 AST ，然后对 AST 进行语义分析（有些教材也会叫做 “类型检查” 或者 “上下文相关分析” 等名字）。注意，程序如果能通过了语义分析这个阶段，那再往后就不应该出现任何语法错误，除非是编译器自己的 bug 。&lt;/p&gt;
&lt;h3 id=&#34;主要任务&#34;&gt;&lt;a href=&#34;#主要任务&#34; class=&#34;headerlink&#34; title=&#34;主要任务&#34;&gt;&lt;/a&gt;主要任务&lt;/h3&gt;&lt;p&gt;上文中的语法分析用到的是 CFG 即上下文无关的语法，即不依赖于上下文。例如 C 语言中 &lt;code&gt;printf(n);&lt;/code&gt; 不符合语法，而 &lt;code&gt;print(&amp;quot;%d&amp;quot;, n);&lt;/code&gt; 就符合语法，但是其中的 &lt;code&gt;n&lt;/code&gt; 变量是否在上文已经定义了，语法分析是不知道的。&lt;/p&gt;
&lt;p&gt;因此，语义分析是在 AST 基础上，结合上下文来分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量在使用前先进行声明&lt;/li&gt;
&lt;li&gt;每个表达式都有合适的类型&lt;/li&gt;
&lt;li&gt;函数调用和函数定义一致&lt;/li&gt;
&lt;li&gt;等等 ……（每种语言的要求不一样）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;语义规则和实现&#34;&gt;&lt;a href=&#34;#语义规则和实现&#34; class=&#34;headerlink&#34; title=&#34;语义规则和实现&#34;&gt;&lt;/a&gt;语义规则和实现&lt;/h3&gt;&lt;p&gt;例如表达式的类型检查，定义一个类型检查函数，传入 AST 的某个表达式的节点，然后判断最后返回的类型。如果类型检查错误，就报错。如下图。&lt;/p&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170727674.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;符号表&#34;&gt;&lt;a href=&#34;#符号表&#34; class=&#34;headerlink&#34; title=&#34;符号表&#34;&gt;&lt;/a&gt;符号表&lt;/h3&gt;&lt;p&gt;上下文相关分析，就涉及到上下文信息的记录和读取，这些信息就被记录到符号表中，一个非常核心的数据结构。符号表用来存储程序中的变量相关信息（表的信息要足够丰富）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类型&lt;/li&gt;
&lt;li&gt;作用域&lt;/li&gt;
&lt;li&gt;访问控制信息（例如 &lt;code&gt;privte&lt;/code&gt; &lt;code&gt;protected&lt;/code&gt; 等）&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其数据结构最简单的可以使用一个 &lt;code&gt;key-val&lt;/code&gt; 的字典来实现，例如 &lt;code&gt;&amp;#123; key1: &amp;#123;…&amp;#125;, key2: &amp;#123;…&amp;#125;, key3: &amp;#123;…&amp;#125; &amp;#125;&lt;/code&gt; 。但是编译器要处理的程序规模可能非常庞大，因此这个数据结构必须要合理规划。在实际工程中，高效的查询方式可以有一下选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择一：为了高效，使用哈希表来实现符号表，查找是 &lt;code&gt;O(1)&lt;/code&gt; 的时间复杂度&lt;/li&gt;
&lt;li&gt;选择二：为了节约空间，可以使用红黑树等平衡树，查找是 &lt;code&gt;O(logN)&lt;/code&gt; 的时间复杂度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;变量都有“作用域”的概念，不同作用域可以有相同的变量名。符号表处理作用域的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一，进入作用域时插入元素，退出作用域时删除元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二，采用栈：进入作用域时插入新的符号表（push），退出作用域时删除栈顶符号表（pop），如下图。 （栈的实现方式很很多种，例如链表）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170745226.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;代码生成&#34;&gt;&lt;a href=&#34;#代码生成&#34; class=&#34;headerlink&#34; title=&#34;代码生成&#34;&gt;&lt;/a&gt;代码生成&lt;/h2&gt;&lt;p&gt;经过语义分析的 AST ，即可用来做代码生成，即生成最终的机器（物理机或者虚拟机）代码。注意，这里直接从 AST 到目标代码，是一种最简单的编译器模型，暂时忽略了优化的部分。优化过程下文会详细解说。&lt;/p&gt;
&lt;h3 id=&#34;主要工作&#34;&gt;&lt;a href=&#34;#主要工作&#34; class=&#34;headerlink&#34; title=&#34;主要工作&#34;&gt;&lt;/a&gt;主要工作&lt;/h3&gt;&lt;p&gt;代码生成是把源程序翻译成“目标机器”（可能是真实的机器，也可能是虚拟机）上的代码，而且要保证和源程序的“等价性”（重要！！！）。主要的任务是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给源程序的数据（全局变量，局部变量等）分配计算资源（寄存器、数据区、代码区、栈区、堆区）&lt;/li&gt;
&lt;li&gt;给源程序的代码（运算 语句 函数）选择指令（算数运算 逻辑运算 跳转 函数调用等）&lt;/li&gt;
&lt;li&gt;（而且要考虑空间和时间的效率，在满足等价性的前提下）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来通过两个示例来看代码生成的过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;栈计算机 Stack —— 代表了虚拟机，例如 JVM&lt;/li&gt;
&lt;li&gt;寄存器计算机 Reg —— 代表了 RISC 精简指令集，如 ARM 芯片&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Stack-栈计算机代码生成技术&#34;&gt;&lt;a href=&#34;#Stack-栈计算机代码生成技术&#34; class=&#34;headerlink&#34; title=&#34;Stack 栈计算机代码生成技术&#34;&gt;&lt;/a&gt;Stack 栈计算机代码生成技术&lt;/h3&gt;&lt;p&gt;70 年代有栈计算机的物理机，但是今天已经退出了历史舞台，因为执行效率太低。但是这里还要研究 Stack ，一来是因为在 Stack 上代码生成比较简单，二来是很多虚拟机是这样设计的，例如 JVM 。&lt;/p&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170805003.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图就是一个 Stack 的原型图，简单解释一下图中各个部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存，存放程序变量&lt;ul&gt;
&lt;li&gt;给变量 &lt;code&gt;x&lt;/code&gt; 分配内存空间的伪指令：&lt;code&gt;.int x&lt;/code&gt; （伪指令，不会被 ALU 执行）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;stack ，进行计算的空间（计算的输入、计算的中间结果和最终结果）&lt;/li&gt;
&lt;li&gt;ALU ，计算单元 。指令集是：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;push NUM&lt;/code&gt; ，把一个立即数压栈&lt;/li&gt;
&lt;li&gt;&lt;code&gt;load x&lt;/code&gt; ，得到内存中的变量 &lt;code&gt;x&lt;/code&gt; 的值，并压栈&lt;/li&gt;
&lt;li&gt;&lt;code&gt;store x&lt;/code&gt; ，把栈顶元素弹出，并赋值给 &lt;code&gt;x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add&lt;/code&gt; ，加法，pop 赋值给 &lt;code&gt;x&lt;/code&gt; ，再 pop 赋值给 &lt;code&gt;y&lt;/code&gt; ，然后 push &lt;code&gt;x+y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub&lt;/code&gt; ，减法，同上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;times&lt;/code&gt; ，乘法，同上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;div&lt;/code&gt; ，除法，同上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PS：以上这几条指令，就是 java 字节码的一个子集。真实的 java 字节码有 200+ 个。&lt;/p&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170830490.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图就是高级语言到最终的 Stack 计算机机器语言的对应，展示了最终的输入和输出。至于代码生成如何实现，在文章一开始的“Sum 语言 + Stack”的例子中这部分已经写的比较详细，就不再赘述了，翻看上文吧。&lt;/p&gt;
&lt;h3 id=&#34;REG-寄存器计算机的代码生成技术&#34;&gt;&lt;a href=&#34;#REG-寄存器计算机的代码生成技术&#34; class=&#34;headerlink&#34; title=&#34;REG 寄存器计算机的代码生成技术&#34;&gt;&lt;/a&gt;REG 寄存器计算机的代码生成技术&lt;/h3&gt;&lt;p&gt;这种机器类型是基于寄存器架构，所有操作都在寄存器完成，执行效率非常高（因为寄存器访问速度是内存访问速度的百倍），访存都通过 &lt;code&gt;load&lt;/code&gt; 或 &lt;code&gt;store&lt;/code&gt; 指令（RISC 指令集特点）。&lt;/p&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170858118.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图就是寄存器计算机的原型图，解释一下图中各个部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;内存：存放“溢出”的变量（寄存器中放不开的变量，如果假设寄存器有无限多个的话，就不用考虑“溢出”了）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;寄存器：进行计算的空间，有 r1 r2 … rn 无限个寄存器（假定无限个，实际上寄存器个数是有限的）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给变量 &lt;code&gt;x&lt;/code&gt; 分配寄存器的伪指令 &lt;code&gt;.int x&lt;/code&gt; （伪指令不会被 ALU 执行）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ALU 计算单元。指令集：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;movn n, r1&lt;/code&gt; 把立即数 n 存入寄存器 r1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mov r1, r2&lt;/code&gt; 把 r1 的值赋值给 r2&lt;/li&gt;
&lt;li&gt;&lt;code&gt;load [x], r1&lt;/code&gt; 将 x 地址的值取出，放在 r1 。其中 x 是指针，[x] 即取出指针对应内存的值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;store r1, [x]&lt;/code&gt; 将 r1 的值赋值给 x 内存地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add r1, r2, r3&lt;/code&gt; 加法，表示 r3 &amp;#x3D; r1 + r2&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub r1, r2, r3&lt;/code&gt; 减法，同理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;times r1, r2, r3&lt;/code&gt; 乘法，同理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;div r1, r2, r3&lt;/code&gt; 除法，同理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170928307.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图就是高级语言和目标代码的对应关系。图中有对应的 AST ，对这棵树进行后续遍历（先左、再右、最后根），每遍历一个节点都会对应到右侧的一行指令。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“1” 节点会对应第一行指令&lt;/li&gt;
&lt;li&gt;“2” 节点会对应第二行指令&lt;/li&gt;
&lt;li&gt;“+” 节点会对应第三行指令&lt;/li&gt;
&lt;li&gt;“3” 节点会对应第四行指令&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后，实际的物理机器上不可能有无限多的寄存器，因此要确定哪些变量被用于寄存器？哪些变量被“溢出”放在内存？—— 这个问题是另外一个编译器的重要部分：编译器分配。如何进行编译器分配，这个问题会在下文介绍。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;中间表示&#34;&gt;&lt;a href=&#34;#中间表示&#34; class=&#34;headerlink&#34; title=&#34;中间表示&#34;&gt;&lt;/a&gt;中间表示&lt;/h2&gt;&lt;p&gt;中间表示是一个统称，有很多种表示形式，AST 就是其中之一。上文提到，从 AST 直接生成目标代码是比较原始的编译技术，现代编译器中往往会在编译器的“后端”进行各种各样的代码优化，不同的优化形式就需要不同的表示形式。&lt;/p&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170944117.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;常见的中间代码形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树和有向无环图：高层表示，适用于程序源代码&lt;/li&gt;
&lt;li&gt;三地址码：低层表示，靠近目标机器&lt;/li&gt;
&lt;li&gt;控制流图：更精细的三地址码，程序的图状表示&lt;/li&gt;
&lt;li&gt;静态单赋值形式 SSA ：更精细的控制流图&lt;/li&gt;
&lt;li&gt;连续传递风格：更一般的 SSA （函数式语言中用的比较多）&lt;/li&gt;
&lt;li&gt;还有很多。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三地址码&#34;&gt;&lt;a href=&#34;#三地址码&#34; class=&#34;headerlink&#34; title=&#34;三地址码&#34;&gt;&lt;/a&gt;三地址码&lt;/h3&gt;&lt;p&gt;所谓“三地址码”，即一个指令有一个运算符，最多有三个操作数。这样就使得每一条指令都比较简单，易于和机器语言对应。&lt;/p&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201170958183.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图就是一个高级语言和三地址码的对应关系（虽然三地址码是通过 AST 生成的，已经和源代码没有关系）。从图中可以看出三地址码的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给每个中间变量和计算结果命名，即没有符合表达式。例如将 &lt;code&gt;a = 3 + 4 * 5&lt;/code&gt; 拆解成一个一个的中间变量&lt;/li&gt;
&lt;li&gt;只有最基本的控制流，即没有各种控制结构，只有 &lt;code&gt;goto&lt;/code&gt; 和 &lt;code&gt;call&lt;/code&gt; 。例如将 &lt;code&gt;if else&lt;/code&gt; 改为 &lt;code&gt;Cjmp&lt;/code&gt;（条件跳转指令）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;控制流图&#34;&gt;&lt;a href=&#34;#控制流图&#34; class=&#34;headerlink&#34; title=&#34;控制流图&#34;&gt;&lt;/a&gt;控制流图&lt;/h3&gt;&lt;p&gt;三地址码是一种线性的表示方式，这就没法通过它来分析和确定流程。例如上图中，哪些指令会跳转到 &lt;code&gt;L_1&lt;/code&gt; 和 &lt;code&gt;L_2&lt;/code&gt; ？并不好确定。控制流图是一种更加精细的三地址码（本质上还是三地址码），将程序中的各个控制流块都表示了出来，如下图。&lt;/p&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201171022430.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;控制流图就是一个有向图 &lt;code&gt;G = (V, E)&lt;/code&gt; ，其中节点 &lt;code&gt;V&lt;/code&gt; 表示程序的基本块，边 &lt;code&gt;E&lt;/code&gt; 表示基本块之间的跳转关系。生成控制流图的目的有很多，但都是为了做代码优化，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;做控制流分析，例如程序中有没有循环？&lt;/li&gt;
&lt;li&gt;做数据流分析，例如程序中某行的变量 &lt;code&gt;x&lt;/code&gt; 可能的值是什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据流分析&#34;&gt;&lt;a href=&#34;#数据流分析&#34; class=&#34;headerlink&#34; title=&#34;数据流分析&#34;&gt;&lt;/a&gt;数据流分析&lt;/h3&gt;&lt;p&gt;所谓“数据流分析”，就是通过静态的观察程序（并不执行）来判断其中的变量和数据的一些变化，例如某程序第五行的 x 变量的值会有几种可能？&lt;/p&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201171035215.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图，通过控制流图，既可以判断一个变量 &lt;code&gt;y&lt;/code&gt; 的赋值可能性。如果 &lt;code&gt;y&lt;/code&gt; 能编译器识别为一个固定的值，直接 &lt;code&gt;a = 3&lt;/code&gt; 并且把一开始的 &lt;code&gt;y = 3&lt;/code&gt; 删掉。这就是一个优化过程。&lt;/p&gt;
&lt;p&gt;但是这仅仅是静态的分析，程序并未执行，因此如果 &lt;code&gt;y&lt;/code&gt; 在一个逻辑分支中出现，就不好预估其准确结果，但是至少能预估一个结果集（称为“保守信息”）。如果能将这个结果集做到最小，和执行的结果越接近，就越好优化。这仍然是编译器现在的一个热门话题。&lt;/p&gt;
&lt;p&gt;类似数据流分析的还有“到达定义分析”，即分析一个变量是如何一步一步的被定义和使用的，原理和目的基本一致，这里不再赘述。&lt;/p&gt;
&lt;h3 id=&#34;活性分析&#34;&gt;&lt;a href=&#34;#活性分析&#34; class=&#34;headerlink&#34; title=&#34;活性分析&#34;&gt;&lt;/a&gt;活性分析&lt;/h3&gt;&lt;p&gt;上文中提到 REG 机器假设有无限个寄存器，但实际情况不是。因此需要寄存器分配 —— 即用到活性分析。所谓“活性分析”，即分析变量的活跃区间（可以理解为声明周期）然后来做寄存器的分配。&lt;/p&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201171049617.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图，三个变量，只有一个寄存器，该如何分配？答案是：计算出每个变量的活跃区间，即可共享寄存器。寄存器分配，就依赖于变量的活动区间数据。如下图：&lt;/p&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201171101780.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;代码优化&#34;&gt;&lt;a href=&#34;#代码优化&#34; class=&#34;headerlink&#34; title=&#34;代码优化&#34;&gt;&lt;/a&gt;代码优化&lt;/h2&gt;&lt;p&gt;现代生产环境下的编译器，代码优化是其重要工作之一，而且一直在不断的持续优化中。&lt;/p&gt;
&lt;h3 id=&#34;几点说明&#34;&gt;&lt;a href=&#34;#几点说明&#34; class=&#34;headerlink&#34; title=&#34;几点说明&#34;&gt;&lt;/a&gt;几点说明&lt;/h3&gt;&lt;p&gt;代码优化的目的是让目标程序更精简、更快速、更节省空间、更节能（所谓的多快好省），当然在不改变语义的前提下 —— 这些应该都比较好理解。但是还有几点关于优化的需要重点说明一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有完美的优化，即“没有最好只有更好”。因为编译器本来就是一个庞大复杂的工程，优化过程复杂度很高，不确定性很大。&lt;/li&gt;
&lt;li&gt;优化必须要在语义分析完成之后再进行，即确保源程序没有任何语法和语义的问题。因为优化可能会删改代码，如果优化之后再报错，错误信息就不准确了。&lt;/li&gt;
&lt;li&gt;优化并不是一个单独的阶段（如词法分析、语法分析等），而是在各个阶段都可能进行。可以对 AST 进行优化，也可以对各种中间表示进行优化，还可以对目标代码再继续优化，每一步的优化针对想都不一样。&lt;/li&gt;
&lt;li&gt;一般针对一个数据优化之后不会产生新的格式（但会产生新的数据，即函数式编程的思维），优化不是翻译过程。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img data-src=&#34;/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230201171118467.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;前端优化&#34;&gt;&lt;a href=&#34;#前端优化&#34; class=&#34;headerlink&#34; title=&#34;前端优化&#34;&gt;&lt;/a&gt;前端优化&lt;/h3&gt;&lt;p&gt;即对 AST 进行优化，下面列举几个例子来说明。&lt;/p&gt;
&lt;p&gt;第一，常量折叠。静态计算，可以在数字类型和 bool 类型进行优化，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a = 3 + 5&lt;/code&gt; 变为 &lt;code&gt;a = 8&lt;/code&gt; （少了一步 &lt;code&gt;+&lt;/code&gt; 计算，就相当于帮 AST 节省了一个分支）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if (true &amp;amp;&amp;amp; false)&lt;/code&gt; 变为 &lt;code&gt;if (false)&lt;/code&gt; 。而且，&lt;code&gt;if (else)&lt;/code&gt; 还可以进行“不可达代码”优化（见下文）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二，代数化简。利用代数的恒等式，进行优化，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a = 0 + b&lt;/code&gt; 变为 &lt;code&gt;a = b&lt;/code&gt; （少一个运算符，简化 AST）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a = 1 * b&lt;/code&gt; 变为 &lt;code&gt;a = b&lt;/code&gt; （少一个运算符，简化 AST）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 * a&lt;/code&gt; 变为 &lt;code&gt;a + a&lt;/code&gt; （因为乘法运算复杂度高）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 * a&lt;/code&gt; 变为 &lt;code&gt;a &amp;lt;&amp;lt; 1&lt;/code&gt; （位运算效率最高）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第三，死代码（不可达）代码优化，例如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if (false)&lt;/code&gt; 不会被执行，测试环境的 debug 代码，到了线上环境就会是死代码&lt;/li&gt;
&lt;li&gt;函数的 &lt;code&gt;return&lt;/code&gt; 之后的语句，不会被执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;中间表示上的优化&#34;&gt;&lt;a href=&#34;#中间表示上的优化&#34; class=&#34;headerlink&#34; title=&#34;中间表示上的优化&#34;&gt;&lt;/a&gt;中间表示上的优化&lt;/h3&gt;&lt;p&gt;如常量传播、拷贝传播，在上文讲数据流分析的时候已经写过，不再赘述。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;编译器真的是一个非常非常非常复杂的工具，其中涉及到的知识点包括数学理论、计算机组成原理、算法和数据结构。如果真的想要深入了解一门语言，那就到它的编译器中去看看吧。&lt;/p&gt;
</content>
        <category term="计算机科学" scheme="https://hdqjl317.github.io/categories/computer-science/" />
        <category term="编译" scheme="https://hdqjl317.github.io/tags/%E7%BC%96%E8%AF%91/" />
        <updated>2023-02-03T08:50:54.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2022/10/04/computer-science/Simple-distributed/</id>
        <title>Simple_distributed</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2022/10/04/computer-science/Simple-distributed/"/>
        <content type="html">&lt;h2 id=&#34;服务注册&#34;&gt;&lt;a href=&#34;#服务注册&#34; class=&#34;headerlink&#34; title=&#34;服务注册&#34;&gt;&lt;/a&gt;服务注册&lt;/h2&gt;&lt;p&gt;服务进程是在注册中心注册自己的元数据信息，通常包括主机和端口号，有时还有身份验证信息，协议，版本号，以及运行环境的信息&lt;/p&gt;
&lt;p&gt;本系统中包含了以下内容:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建Web服务&lt;/li&gt;
&lt;li&gt;创建注册服务&lt;/li&gt;
&lt;li&gt;注册Web服务&lt;/li&gt;
&lt;li&gt;取消注册Web服务&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;创建日志服务&#34;&gt;&lt;a href=&#34;#创建日志服务&#34; class=&#34;headerlink&#34; title=&#34;创建日志服务&#34;&gt;&lt;/a&gt;创建日志服务&lt;/h3&gt;&lt;p&gt;在正式实现服务注册的功能之前，先实现日志服务，在项目文件夹下创建一个log文件夹，存放定义日志逻辑的代码&lt;/p&gt;
&lt;h4 id=&#34;编写日志服务逻辑&#34;&gt;&lt;a href=&#34;#编写日志服务逻辑&#34; class=&#34;headerlink&#34; title=&#34;编写日志服务逻辑&#34;&gt;&lt;/a&gt;编写日志服务逻辑&lt;/h4&gt;&lt;p&gt;日志服务是一个WEB服务，功能是接收web请求，将POST请求的内容写入到log，注意这里对标准的log包起了别名stdlog，因为后续要自定义一个Logger对象log:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;// log/server.go
package log
 
import (
    &amp;quot;io/ioutil&amp;quot;
    stdlog &amp;quot;log&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;os&amp;quot;
)
 
var log *stdlog.Logger
 
type fileLog string
 
func (fl fileLog) Write(data []byte) (int, error) &amp;#123;
    f, err := os.OpenFile(string(fl), os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0600)
    if err != nil &amp;#123;
        return 0, err
    &amp;#125;
    defer f.Close()
    return f.Write(data)
&amp;#125;
 
func Run(destination string) &amp;#123;
    log = stdlog.New(fileLog(destination), &amp;quot;go&amp;quot;, stdlog.LstdFlags)
&amp;#125;
 
func RegisterHandlers() &amp;#123;
    http.HandleFunc(&amp;quot;/log&amp;quot;, func(w http.ResponseWriter, r *http.Request) &amp;#123;
        switch r.Method &amp;#123;
        case http.MethodPost:
            msg, err := ioutil.ReadAll(r.Body)  // 读取Body数据
            if err != nil || len(msg) == 0 &amp;#123;
                w.WriteHeader(http.StatusBadRequest)
                return
            &amp;#125;
            write(string(msg))
        default:
            w.WriteHeader(http.StatusMethodNotAllowed)
            return
        &amp;#125;
    &amp;#125;)
&amp;#125;
 
func write(message string) &amp;#123;
    log.Printf(&amp;quot;%v\n&amp;quot;, message)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这段代码的作用是将日志写入文件系统，先为filelog实现io.Writer接口，定义Write方法&lt;/p&gt;
&lt;p&gt;在这个方法中，首先调用了OpenFile方法，传入一个文件路径并返回一个file对象，指定了权限和模式，并随后判断是否产生错误，最后通过io.Writer接口写入文件:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func (fl fileLog) Write(data []byte) (int, error) &amp;#123;
    f, err := os.OpenFile(string(fl), os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0600)  // 打开文件
    if err != nil &amp;#123;
        return 0, err
    &amp;#125;
    defer f.Close()
    return f.Write(data)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接着定义Run函数，作用是将log指向某个文件路径，使用log.New来创建一个Logger对象，要传入的参数: 写入的位置(实现io.Writer接口)、日志前缀和日志内容的flag(包含了日期和时间)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func Run(destination string) &amp;#123;
    log = stdlog.New(fileLog(destination), &amp;quot;go&amp;quot;, stdlog.LstdFlags)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后注册一个handler:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func RegisterHandlers() &amp;#123;
    http.HandleFunc(&amp;quot;/log&amp;quot;, func(w http.ResponseWriter, r *http.Request) &amp;#123;
        switch r.Method &amp;#123;
        case http.MethodPost:  // POST请求
            msg, err := ioutil.ReadAll(r.Body)
            if err != nil || len(msg) == 0 &amp;#123;
                w.WriteHeader(http.StatusBadRequest)
                return
            &amp;#125;
            write(string(msg))  // 写入数据
        default:
            w.WriteHeader(http.StatusMethodNotAllowed)
            return
        &amp;#125;
    &amp;#125;)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用了一个http.HandleFunc来处理HTTP请求，使用switch-case结构判断请求方式来分支处理请求，如果是POST请求则调用ioutil.ReadAll读取Body数据，调用write函数(之后实现)写入文件，如果读取失败或者数据为空，则返回一个BadRequest(400)响应。如果接收到的请求不是POST请求，则返回一个MethodNotAllowed响应(405)&lt;/p&gt;
&lt;p&gt;如下是write函数:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func write(message string) &amp;#123;
    log.Printf(&amp;quot;%v\n&amp;quot;, message)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;调用log.Printf就可以，这里的log是自定义的Logger对象(已经在Run函数中创建)，路径在New方法中指定了，这时就会把日志信息写入所指向的文件中&lt;/p&gt;
&lt;h4 id=&#34;运行日志服务&#34;&gt;&lt;a href=&#34;#运行日志服务&#34; class=&#34;headerlink&#34; title=&#34;运行日志服务&#34;&gt;&lt;/a&gt;运行日志服务&lt;/h4&gt;&lt;p&gt;上述编写的server.go程序作为日志系统的后端，下面编写一段代码，将服务集中化管理，能够集中启动这些服务&lt;/p&gt;
&lt;p&gt;创建一个service目录，并在其中编写service.go文件:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package service
 
import (
    &amp;quot;context&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;net/http&amp;quot;
)
 
func Start(ctx context.Context, serviceName, host, port string,
    registerHandlerFunc func()) (context.Context, error) &amp;#123;
    registerHandlerFunc()  // 注册请求处理函数
    ctx = startService(ctx, serviceName, host, port)  // 启动服务
    return ctx, nil
&amp;#125;
 
func startService(ctx context.Context, serviceName, host, port string) context.Context &amp;#123;
    ctx, cancel := context.WithCancel(ctx)
    var srv http.Server
    srv.Addr = &amp;quot;:&amp;quot; + port
 
    go func() &amp;#123;
        log.Println(srv.ListenAndServe())  // 监听HTTP请求 调用ServeHTTP方法
        cancel()
    &amp;#125;()
 
    go func() &amp;#123;
        fmt.Printf(&amp;quot;%v started. Press any key to stop. \n&amp;quot;, serviceName)
        var s string
        fmt.Scanln(&amp;amp;s)
        srv.Shutdown(ctx)
        cancel()
    &amp;#125;()
 
    return ctx
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这段代码定义了一个Start函数，接收context接口，服务名称，地址，端口号，作用是启动指定的服务，先调用了registerHandleFunc注册请求处理函数(服务程序要有一个处理函数，来处理到来的HTTP请求)，随后调用了startService函数，结束时返回context和nil&lt;/p&gt;
&lt;p&gt;在startService函数中调用了WithCancel，返回一个context子节点和一个取消函数，用于触发取消信号，之后调一个goroutine启动HTTP服务器监听在指定的端口，处理到来的HTTP请求，当用户输入按下任意建就会触发Shutdown方法关闭服务器，并且调用取消函数撤销掉context:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func startService(ctx context.Context, serviceName, host, port string) context.Context &amp;#123;
    ctx, cancel := context.WithCancel(ctx)
    var srv http.Server
    srv.Addr = &amp;quot;:&amp;quot; + port
 
    go func() &amp;#123;
        log.Println(srv.ListenAndServe())
        cancel()
    &amp;#125;()
 
    go func() &amp;#123;
        fmt.Printf(&amp;quot;%v started. Press any key to stop. \n&amp;quot;, serviceName)
        var s string
        fmt.Scanln(&amp;amp;s)
        srv.Shutdown(ctx)  // 关闭服务器
        cancel()           // 取消context
    &amp;#125;()
 
    return ctx
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建一个cmd文件夹，编写main.go作为整个程序的入口:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package main
 
import (
    &amp;quot;context&amp;quot;
    &amp;quot;distributed/log&amp;quot;
    &amp;quot;distributed/service&amp;quot;
    &amp;quot;fmt&amp;quot;
    stdlog &amp;quot;log&amp;quot;
)
 
func main() &amp;#123;
    log.Run(&amp;quot;./distributed.log&amp;quot;)        // 指定日志文件路径
    host, port := &amp;quot;localhost&amp;quot;, &amp;quot;4000&amp;quot;   // 指定地址和端口号
    ctx, err := service.Start(context.Background(),
        &amp;quot;Log Service&amp;quot;,
        host, port,
        log.RegisterHandlers,
    )
 
    if err != nil &amp;#123;
        stdlog.Fatalln(err)
    &amp;#125;
    &amp;lt;-ctx.Done()
 
    fmt.Println(&amp;quot;Shutting down log service.&amp;quot;)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这段代码作为入口，启动这个服务&lt;/p&gt;
&lt;p&gt;当取消函数(cancel)被调用后，ctx.Done就不会被阻塞，往下执行完整个程序&lt;/p&gt;
&lt;h4 id=&#34;测试日志服务&#34;&gt;&lt;a href=&#34;#测试日志服务&#34; class=&#34;headerlink&#34; title=&#34;测试日志服务&#34;&gt;&lt;/a&gt;测试日志服务&lt;/h4&gt;&lt;p&gt;使用Postman发出POST请求用于测试，如下所示:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/Simple-distributed/2692436-20220822193149828-290861501.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;发送请求后，查看日志文件:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;$ cat distributed.log 
go 2022/08/22 19:34:08 just for test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;日志被记录了下来&lt;/p&gt;
&lt;h3 id=&#34;服务注册逻辑&#34;&gt;&lt;a href=&#34;#服务注册逻辑&#34; class=&#34;headerlink&#34; title=&#34;服务注册逻辑&#34;&gt;&lt;/a&gt;服务注册逻辑&lt;/h3&gt;&lt;p&gt;下面才正式实现注册中心服务注册的功能，应当实现服务注册的接口，这样客户端能够通过这个接口&lt;/p&gt;
&lt;p&gt;创建registry文件夹，编写如下的registration.go文件:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package registry
 
type Registration struct &amp;#123;
    ServiceName ServiceName
    ServiceURL  string
&amp;#125;
 
type ServiceName string
 
const (
    LogService = ServiceName(&amp;quot;LogService&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如上定义的Registration结构体代表被注册的服务，将目前存在服务定义为常量，目前只有一个日志服务LogService&lt;/p&gt;
&lt;p&gt;在这个文件夹下再编写一个server.go，包含服务注册的主要逻辑:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package registry
 
import (
    &amp;quot;encoding/json&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;sync&amp;quot;
)
 
const ServerPort = &amp;quot;:3000&amp;quot;  // 端口
const ServicesURL = &amp;quot;http://localhost&amp;quot; + ServerPort + &amp;quot;/services&amp;quot;  // 查询服务的URL
 
type registry struct &amp;#123;
    registrations []Registration  // 切片
    mutex         *sync.Mutex     // 互斥锁
&amp;#125;
 
func (r *registry) add(reg Registration) error &amp;#123;
    r.mutex.Lock()
    r.registrations = append(r.registrations, reg)
    r.mutex.Unlock()
    return nil
&amp;#125;
 
var reg = registry&amp;#123;
    registrations: make([]Registration, 0),
    mutex:         new(sync.Mutex),
&amp;#125;
 
type Service struct&amp;#123;&amp;#125;
 
func (s Service) ServeHTTP(w http.ResponseWriter, r *http.Request) &amp;#123;
    log.Println(&amp;quot;Request received&amp;quot;)
    switch r.Method &amp;#123;
    case http.MethodPost:
        dec := json.NewDecoder(r.Body)
        var r Registration
        err := dec.Decode(&amp;amp;r)
        if err != nil &amp;#123;
            log.Println(err)
            w.WriteHeader(http.StatusBadRequest)
            return
        &amp;#125;
        log.Printf(&amp;quot;Adding service: %v with URL: %s\n&amp;quot;, r.ServiceName, r.ServiceURL)
        err = reg.add(r)
        if err != nil &amp;#123;
            log.Println(err)
            w.WriteHeader(http.StatusBadRequest)
            return
        &amp;#125;
    default:
        w.WriteHeader(http.StatusMethodNotAllowed)
        return
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;定义了一个结构体registry，包含了两个成员: 一个切片，可以看成是一系列服务的集合，和一个互斥锁，用于并发控制，之后将其创建&lt;/p&gt;
&lt;p&gt;随后定义的add函数作用是注册，在上锁的情况下向集合添加元素，接着定义ServeHTTP函数，只接收POST请求，解析JSON数据，将其中服务名称通过add函数添加到上述创建的Registration结构中的集合中，这就意味着成功注册了一个服务&lt;/p&gt;
&lt;h3 id=&#34;独立运行服务注册&#34;&gt;&lt;a href=&#34;#独立运行服务注册&#34; class=&#34;headerlink&#34; title=&#34;独立运行服务注册&#34;&gt;&lt;/a&gt;独立运行服务注册&lt;/h3&gt;&lt;p&gt;将上述编写的服务注册的程序独立运行起来，将启动日志服务的main.go单独丢进一个cmd下的logservice文件夹，在cmd下创建一个registryservice文件夹，编写对应的main.go文件:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package main
 
import (
    &amp;quot;context&amp;quot;
    &amp;quot;distributed/registry&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;net/http&amp;quot;
)
 
func main() &amp;#123;
    http.Handle(&amp;quot;/services&amp;quot;, &amp;amp;registry.Service&amp;#123;&amp;#125;)
 
    ctx, cancel := context.WithCancel(context.Background())
    defer cancel()
 
    var srv http.Server
    srv.Addr = registry.ServerPort
 
    go func() &amp;#123;
        log.Println(srv.ListenAndServe())
        var s string
        fmt.Scanln(&amp;amp;s)
        srv.Shutdown(ctx)
        cancel()
    &amp;#125;()
 
    &amp;lt;-ctx.Done()
    fmt.Println(&amp;quot;Shutting down registry service&amp;quot;)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这段代码的作用就是将服务注册程序给运行起来，registry.Service已经实现了ServeHTTP接口方法，因此可以直接将这个结构体变量传给http.Handle函数&lt;/p&gt;
&lt;p&gt;这段代码与上述service.go有点相似，在用户输入任意字符后中止掉程序&lt;/p&gt;
&lt;h3 id=&#34;注册一个服务&#34;&gt;&lt;a href=&#34;#注册一个服务&#34; class=&#34;headerlink&#34; title=&#34;注册一个服务&#34;&gt;&lt;/a&gt;注册一个服务&lt;/h3&gt;&lt;p&gt;封装一个函数向服务端发送POST请求来注册一个服务，在registry下编写一个client.go文件:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package registry
 
import (
    &amp;quot;bytes&amp;quot;
    &amp;quot;encoding/json&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
)
 
func RegisterService(r Registration) error &amp;#123;
    buf := new(bytes.Buffer)
    enc := json.NewEncoder(buf)
    err := enc.Encode(r)
    if err != nil &amp;#123;
        return err
    &amp;#125;
    res, err := http.Post(ServicesURL, &amp;quot;application/json&amp;quot;, buf)
    if err != nil &amp;#123;
        return err
    &amp;#125;
 
    if res.StatusCode != http.StatusOK &amp;#123;
        return fmt.Errorf(&amp;quot;failed to register service. Registry service &amp;quot;+
            &amp;quot;responded with code %v&amp;quot;, res.StatusCode)
    &amp;#125;
    return nil
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述代码中定义了一个RegisterService函数，向URL发送POST请求来注册服务，请求中包括了服务名称和服务的URL&lt;/p&gt;
&lt;p&gt;接下来要修改之前的代码，因为发送的数据是Registration结构体类型的数据，而上述编写的服务注册的服务端须要更改参数类型，修改service&amp;#x2F;service.go文件，这里在Start函数中加上Registration结构体类型的参数，serviceName这个参数可以删掉，并且启动这个服务时应该进行注册，所以在该函数中加上RegisterService函数:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func Start(ctx context.Context, host, port string, reg registry.Registration,
    registerHandlerFunc func()) (context.Context, error) &amp;#123;
    registerHandlerFunc()
    ctx = startService(ctx, reg.ServiceName, host, port)
    err := registry.RegisterService(reg)  // 注册服务
    if err != nil &amp;#123;
        return ctx, err
    &amp;#125;
    return ctx, nil
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同时一并修改startService函数的参数:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func startService(ctx context.Context, serviceName registry.ServiceName, host, port string) context.Context &amp;#123;
    ctx, cancel := context.WithCancel(ctx)
    var srv http.Server
    srv.Addr = &amp;quot;:&amp;quot; + port
 
    go func() &amp;#123;
        log.Println(srv.ListenAndServe())
        cancel()
    &amp;#125;()
 
    go func() &amp;#123;
        fmt.Printf(&amp;quot;%v started. Press any key to stop. \n&amp;quot;, serviceName)
        var s string
        fmt.Scanln(&amp;amp;s)
        srv.Shutdown(ctx)
        cancel()
    &amp;#125;()
 
    return ctx
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后要修改logservice中的main.go，因为函数已经被修改:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;....
serviceAddress := fmt.Sprintf(&amp;quot;http://%s:%s&amp;quot;, host, port)
 
r := registry.Registration&amp;#123;
    ServiceName: &amp;quot;Log Service&amp;quot;,
    ServiceURL:  serviceAddress,
&amp;#125;
ctx, err := service.Start(context.Background(),
    &amp;quot;Log Service&amp;quot;,
    host, port, r, log.RegisterHandlers,
)
....
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来运行这个服务，先启动registryservice&amp;#x2F;main.go，启动服务注册的程序，在运行logservice&amp;#x2F;main.go，这时会先发送一条POST请求到服务注册的程序，这时服务注册程序收到这条请求，其中包含了服务名称和URL，服务注册程序将其添加到集合，视为注册了这个服务:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;$ go run .
2022/08/23 13:40:24 Request received
2022/08/23 13:40:24 Adding service: Log Service with URL: http://localhost:4000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这时服务注册程序输出已经添加了日志服务&lt;/p&gt;
&lt;h3 id=&#34;取消注册服务&#34;&gt;&lt;a href=&#34;#取消注册服务&#34; class=&#34;headerlink&#34; title=&#34;取消注册服务&#34;&gt;&lt;/a&gt;取消注册服务&lt;/h3&gt;&lt;p&gt;有增就有减，对应地，有服务注册的功能就应该有取消注册的功能&lt;/p&gt;
&lt;p&gt;在registry&amp;#x2F;server.go中添加remove函数，与add函数作用相反，作用是从集合中去除掉指定的url所在的registration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func (r *registry) remove(url string) error &amp;#123;
    for i := range reg.registrations &amp;#123;
        if reg.registrations[i].ServiceURL == url &amp;#123;
            r.mutex.Lock()
            reg.registrations = append(reg.registrations[:i], r.registrations[i+1:]...)
            r.mutex.Unlock()
            return nil
        &amp;#125;
    &amp;#125;
    return fmt.Errorf(&amp;quot;service at URL %s not found&amp;quot;, url)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用for-range遍历reg中的切片，当遇到指定的URL时则将其去除&lt;/p&gt;
&lt;p&gt;服务注册中，POST请求用于注册服务，那么将通过DELETE请求来取消服务，所以在ServeHTTP函数中添加一个针对DELETE请求的分支:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func (s Service) ServeHTTP(w http.ResponseWriter, r *http.Request) &amp;#123;
    log.Println(&amp;quot;Request received&amp;quot;)
    switch r.Method &amp;#123;
    ...
    case http.MethodDelete:
        payload, err := ioutil.ReadAll(r.Body)
        if err != nil &amp;#123;
            log.Println(err)
            w.WriteHeader(http.StatusInternalServerError)
            return
        &amp;#125;
        url := string(payload)
        log.Printf(&amp;quot;Removing servcice at URL: %s&amp;quot;, url)
        err = reg.remove(url)
    default:
        w.WriteHeader(http.StatusMethodNotAllowed)
        return
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这个服务端接收到DELETE请求后，取出其中body的URL，再调用remove函数进行删除&lt;/p&gt;
&lt;p&gt;在registry&amp;#x2F;client.go中添加客户端用来取消服务的函数:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func ShutdownService(url string) error &amp;#123;
    req, err := http.NewRequest(http.MethodDelete, ServicesURL, bytes.NewBuffer([]byte(url)))
    if err != nil &amp;#123;
        return err
    &amp;#125;
    req.Header.Add(&amp;quot;Content-Type&amp;quot;, &amp;quot;text/plain&amp;quot;)
    res, err := http.DefaultClient.Do(req)
    if err != nil &amp;#123;
        return err
    &amp;#125;
    if res.StatusCode != http.StatusOK &amp;#123;
        return fmt.Errorf(&amp;quot;failed to deregister service. Registry &amp;quot;+
            &amp;quot;service responded with code %v&amp;quot;, res.StatusCode)
    &amp;#125;
    return nil
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用http.NewRequest来发送DELETE请求&lt;/p&gt;
&lt;p&gt;在StartService函数中，当服务停止时，调用该shutdown函数向服务端发送DELETE请求取消掉这个服务&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func startService(ctx context.Context, serviceName registry.ServiceName, host, port string) context.Context &amp;#123;
    ...
    go func() &amp;#123;
        log.Println(srv.ListenAndServe())
        err := registry.ShutdownService(fmt.Sprintf(&amp;quot;http://%s:%s&amp;quot;, host, port))
        if err != nil &amp;#123;
            log.Println(err)
        &amp;#125;
        cancel()
    &amp;#125;()
    ...
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试:&lt;/p&gt;
&lt;p&gt;先启动服务注册程序，然后再启动日志服务，再按任意键关闭&lt;/p&gt;
&lt;p&gt;日志服务:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;$ go run .
Log Service started. Press any key to stop. 
 
2022/08/23 16:45:44 http: Server closed
Shutting down log service.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;服务注册程序:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;$ go run .
2022/08/23 16:45:42 Request received
2022/08/23 16:45:42 Adding service: Log Service with URL: http://localhost:4000
2022/08/23 16:45:44 Request received
2022/08/23 16:45:44 Removing servcice at URL: http://localhost:4000
2022/08/23 16:45:44 Request received
2022/08/23 16:45:44 Removing servcice at URL: http://localhost:4000
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;服务发现&#34;&gt;&lt;a href=&#34;#服务发现&#34; class=&#34;headerlink&#34; title=&#34;服务发现&#34;&gt;&lt;/a&gt;服务发现&lt;/h2&gt;&lt;p&gt;在此之前，先实现一个业务服务，功能是学生成绩管理，用户可以查询和增加学生的成绩信息&lt;/p&gt;
&lt;h3 id=&#34;创建业务服务&#34;&gt;&lt;a href=&#34;#创建业务服务&#34; class=&#34;headerlink&#34; title=&#34;创建业务服务&#34;&gt;&lt;/a&gt;创建业务服务&lt;/h3&gt;&lt;p&gt;创建一个grades文件夹，编写相关代码，如下是grades.go文件，包含了成绩信息管理的主要逻辑:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package grades
 
import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;sync&amp;quot;
)
 
type Student struct &amp;#123;
    ID        int
    FirstName string
    LastName  string
    Grades    []Grade
&amp;#125;
 
func (s Student) Average() float32 &amp;#123;
    var result float32
    for _, grade := range s.Grades &amp;#123;
        result += grade.Score
    &amp;#125;
    return result / float32(len(s.Grades))
&amp;#125;
 
type Students []Student
 
var (
    students      Students
    studentsMutex sync.Mutex
)
 
func (ss Students) GetByID(id int) (*Student, error) &amp;#123;
    for i := range ss &amp;#123;
        if ss[i].ID == id &amp;#123;
            return &amp;amp;ss[i], nil
        &amp;#125;
    &amp;#125;
    return nil, fmt.Errorf(&amp;quot;student with ID %d not found&amp;quot;, id)
&amp;#125;
 
type GradeType string
 
const (
    GradeQuiz = GradeType(&amp;quot;Quiz&amp;quot;)
    GradeTest = GradeType(&amp;quot;Test&amp;quot;)
    GradeExam = GradeType(&amp;quot;Exam&amp;quot;)
)
 
type Grade struct &amp;#123;
    Title string
    Type  GradeType
    Score float32
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;定义了students结构体，表示了学生信息:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;type Student struct &amp;#123;
    ID        int     // 学生ID
    FirstName string  // 名
    LastName  string  // 姓
    Grades    []Grade // 成绩
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;定义了grade结构体:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;type Grade struct &amp;#123;
    Title string       // 名称
    Type  GradeType    // 类别
    Score float32      // 得分
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;GetByID用于根据ID来查询学生信息，Average用于求平均成绩&lt;/p&gt;
&lt;p&gt;创建server.go文件，作为该服务的后端，之后会被services中的Start函数调用:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package grades
 
import (
    &amp;quot;bytes&amp;quot;
    &amp;quot;encoding/json&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;strconv&amp;quot;
    &amp;quot;strings&amp;quot;
)
 
func RegisterHandlers() &amp;#123;
    handler := new(studentsHandler)
    http.Handle(&amp;quot;/students&amp;quot;, handler)
    http.Handle(&amp;quot;/students/&amp;quot;, handler)
&amp;#125;
 
type studentsHandler struct&amp;#123;&amp;#125;
 
func (sh studentsHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) &amp;#123;
    pathSegments := strings.Split(r.URL.Path, &amp;quot;/&amp;quot;)
    switch len(pathSegments) &amp;#123;
    case 2:
        sh.getAll(w, r)
    case 3:
        id, err := strconv.Atoi(pathSegments[2])
        if err != nil &amp;#123;
            w.WriteHeader(http.StatusNotFound)
            return
        &amp;#125;
        sh.getOne(w, r, id)
    case 4:
        id, err := strconv.Atoi(pathSegments[2])
        if err != nil &amp;#123;
            w.WriteHeader(http.StatusNotFound)
            return
        &amp;#125;
        sh.addGrade(w, r, id)
    default:
        w.WriteHeader(http.StatusNotFound)
    &amp;#125;
&amp;#125;
 
func (sh studentsHandler) getAll(w http.ResponseWriter, r *http.Request) &amp;#123;
    studentsMutex.Lock()
    defer studentsMutex.Unlock()
 
    data, err := sh.toJSON(students)
    if err != nil &amp;#123;
        w.WriteHeader(http.StatusInternalServerError)
        log.Println(err)
        return
    &amp;#125;
    w.Header().Add(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;)
    w.Write(data)  // 写回数据
&amp;#125;
 
func (sh studentsHandler) toJSON(obj interface&amp;#123;&amp;#125;) ([]byte, error) &amp;#123;
    var b bytes.Buffer
    enc := json.NewEncoder(&amp;amp;b)
    err := enc.Encode(obj)
    if err != nil &amp;#123;
        return nil, fmt.Errorf(&amp;quot;failed to serialize students: %q&amp;quot;, err)
    &amp;#125;
    return b.Bytes(), nil
&amp;#125;
 
func (sh studentsHandler) getOne(w http.ResponseWriter, r *http.Request, id int) &amp;#123;
    studentsMutex.Lock()
    defer studentsMutex.Unlock()
 
    student, err := students.GetByID(id)
    if err != nil &amp;#123;
        w.WriteHeader(http.StatusNotFound)
        log.Println(err)
        return
    &amp;#125;
 
    data, err := sh.toJSON(student)
    if err != nil &amp;#123;
        w.WriteHeader(http.StatusInternalServerError)
        log.Printf(&amp;quot;Failed to serialize student: %q\n&amp;quot;, err)
        return
    &amp;#125;
    w.Header().Add(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;)
    w.Write(data)
&amp;#125;
 
func (sh studentsHandler) addGrade(w http.ResponseWriter, r *http.Request, id int) &amp;#123;
    studentsMutex.Lock()
    defer studentsMutex.Unlock()
 
    student, err := students.GetByID(id)
    if err != nil &amp;#123;
        w.WriteHeader(http.StatusNotFound)
        log.Println(err)
        return
    &amp;#125;
    var g Grade
    dec := json.NewDecoder(r.Body)
    err = dec.Decode(&amp;amp;g)
    if err != nil &amp;#123;
        w.WriteHeader(http.StatusBadRequest)
        log.Println(err)
        return
    &amp;#125;
    student.Grades = append(student.Grades, g)  // 添加数据
    w.WriteHeader(http.StatusCreated)
    data, err := sh.toJSON(g)
    if err != nil &amp;#123;
        log.Println(err)
        return
    &amp;#125;
    w.Header().Add(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;)
    w.Write(data)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用RegisterHandlers注册http handler，路径指向URL下的students，会作为Start函数的参数&lt;/p&gt;
&lt;p&gt;作为一个服务，同样要为结构体定义一个接口方法ServeHTTP，该方法要应对URL的几种情况:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/students&lt;/code&gt; 获得所有学生的成绩&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/students/&amp;#123;id&amp;#125;&lt;/code&gt; 获得指定ID的学生的信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/students/&amp;#123;id&amp;#125;/grades&lt;/code&gt;获得增加学生的成绩&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用string.Split将URL路径切分为多段，使用switch-case结构根据分段的个数进行分支处理，段数为2、3和4分别对应了上述3种情况，分别调用getAll、getOne和addGrade函数，实现细节不再赘述&lt;/p&gt;
&lt;p&gt;这里还要定义一个将结构体序列化为JSON数据的函数，接收一个空接口:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func (sh studentsHandler) toJSON(obj interface&amp;#123;&amp;#125;) ([]byte, error) &amp;#123;
    var b bytes.Buffer
    enc := json.NewEncoder(&amp;amp;b)
    err := enc.Encode(obj)
    if err != nil &amp;#123;
        return nil, fmt.Errorf(&amp;quot;failed to serialize students: %q&amp;quot;, err)
    &amp;#125;
    return b.Bytes(), nil
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编写一个mockdata.go文件，制造一些数据:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package grades
 
func init() &amp;#123;
    students = []Student&amp;#123;
        &amp;#123;
            ID:        1,
            FirstName: &amp;quot;Nick&amp;quot;,
            LastName:  &amp;quot;Carter&amp;quot;,
            Grades: []Grade&amp;#123;
                &amp;#123;
                    &amp;quot;Quiz 1&amp;quot;,
                    GradeQuiz,
                    85,
                &amp;#125;,
                &amp;#123;
                    &amp;quot;Final Exam&amp;quot;,
                    GradeExam,
                    94,
                &amp;#125;,
                &amp;#123;
                    &amp;quot;Quiz 2&amp;quot;,
                    GradeQuiz,
                    97,
                &amp;#125;,
            &amp;#125;,
        &amp;#125;,
        &amp;#123;
            ID:        2,
            FirstName: &amp;quot;Jack&amp;quot;,
            LastName:  &amp;quot;Bright&amp;quot;,
            Grades: []Grade&amp;#123;
                &amp;#123;
                    &amp;quot;Final Exam&amp;quot;,
                    GradeExam,
                    100,
                &amp;#125;,
                &amp;#123;
                    &amp;quot;Quiz 2&amp;quot;,
                    GradeQuiz,
                    80,
                &amp;#125;,
                &amp;#123;
                    &amp;quot;Test 1&amp;quot;,
                    GradeTest,
                    99,
                &amp;#125;,
            &amp;#125;,
        &amp;#125;,
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样一个业务服务就完成了，添加到registry&amp;#x2F;registrantion.go中:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;const (
    LogService     = ServiceName(&amp;quot;LogService&amp;quot;)
    GradingService = ServiceName(&amp;quot;GradingService&amp;quot;)  // 业务服务
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;和日志服务相似，创建cmd&amp;#x2F;gradingservice&amp;#x2F;main.go文件，编写启动代码:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package main
 
import (
    &amp;quot;context&amp;quot;
    &amp;quot;distributed/log&amp;quot;
    &amp;quot;distributed/registry&amp;quot;
    &amp;quot;distributed/service&amp;quot;
    &amp;quot;fmt&amp;quot;
    stdlog &amp;quot;log&amp;quot;
)
 
func main() &amp;#123;
    log.Run(&amp;quot;./distributed.log&amp;quot;)
    host, port := &amp;quot;localhost&amp;quot;, &amp;quot;6000&amp;quot;
    serviceAddress := fmt.Sprintf(&amp;quot;http://%s:%s&amp;quot;, host, port)
 
    r := registry.Registration&amp;#123;
        ServiceName: registry.GradingService,
        ServiceURL:  serviceAddress,
    &amp;#125;
    ctx, err := service.Start(context.Background(),
        host, port, r, log.RegisterHandlers,
    )
 
    if err != nil &amp;#123;
        stdlog.Fatalln(err)
    &amp;#125;
    &amp;lt;-ctx.Done()
 
    fmt.Println(&amp;quot;Shutting down grading service.&amp;quot;)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;服务注册到这里就基本实现了，如下是项目结构:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;.
├── cmd
│   ├── gradingservice
│   │   └── main.go
│   ├── logservice
│   │   └── main.go
│   └── registryservice
│       └── main.go
├── log
│   └── server.go
├── registry
│   ├── client.go
│   ├── registration.go
│   └── server.go
└── service
    └── service.go
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;实现服务发现&#34;&gt;&lt;a href=&#34;#实现服务发现&#34; class=&#34;headerlink&#34; title=&#34;实现服务发现&#34;&gt;&lt;/a&gt;实现服务发现&lt;/h3&gt;&lt;p&gt;完成了上述的业务服务gradingservice后，要使其能够请求logservice&lt;/p&gt;
&lt;p&gt;接下来编辑registry&amp;#x2F;registration.go文件，扩展Registration结构体:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;type Registration struct &amp;#123;
    ServiceName      ServiceName
    ServiceURL       string
    RequiredServices []ServiceName
    ServiceUpdateURL string
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;RequiredServices表示了该服务所依赖的服务名称，ServiceUpdateURL用于动态接收更新，比如注册中心就通过这个URL告诉这个服务，这里有一个logservice&lt;/p&gt;
&lt;p&gt;创建两个结构体:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;type patchEntry struct &amp;#123;
    Name ServiceName
    URL  string
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该结构体表示单条更新条目&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;type patch struct &amp;#123;
    Added   []patchEntry
    Removed []patchEntry
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该结构体记录增加和减少的条目&lt;/p&gt;
&lt;p&gt;编写registry&amp;#x2F;server.go，扩展注册中心的后端，先扩展add函数，在添加服务时就添加为其依赖服务:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func (r *registry) add(reg Registration) error &amp;#123;
    r.mutex.Lock()
    r.registrations = append(r.registrations, reg)
    r.mutex.Unlock()
    err := r.sendRequiredServices(reg)
    if err != nil &amp;#123;
        return err
    &amp;#125;
    return nil
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;调用了一个sendRequiredServices函数，功能是添加依赖，发送一个请求，将所要依赖的服务给请求过来，方法实现如下:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func (r *registry) sendRequiredServices(reg Registration) error &amp;#123;
    r.mutex.RLock()
    defer r.mutex.RUnlock()
 
    var p patch
    for _, serviceReg := range r.registrations &amp;#123;
        for _, reqService := range reg.RequiredServices &amp;#123;
            if serviceReg.ServiceName == reqService &amp;#123;
                p.Added = append(p.Added, patchEntry&amp;#123;
                    Name: serviceReg.ServiceName,
                    URL:  serviceReg.ServiceURL,
                &amp;#125;)
            &amp;#125;
        &amp;#125;
    &amp;#125;
    err := r.sendPatch(p, reg.ServiceUpdateURL)
    return err
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述函数中，循环遍历已经注册的服务，如果找到所依赖的服务，则添加到切片里，稍后调用sendPatch发送出去，实现如下:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func (r *registry) sendPatch(p patch, url string) error &amp;#123;
    d, err := json.Marshal(p)
    if err != nil &amp;#123;
        return err
    &amp;#125;
    _, err = http.Post(url, &amp;quot;application/json&amp;quot;, bytes.NewBuffer(d))
    return err
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该函数先将patch结构序列化为一个JSON数据，然后放在POST请求中发送&lt;/p&gt;
&lt;p&gt;每个客户端的服务都有所依赖的服务，要向注册中心请求这些服务，得存储这些请求的服务，比如gradingservice就要依赖logservice&lt;/p&gt;
&lt;p&gt;定义一个结构providers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;type providers struct &amp;#123;
    services map[ServiceName][]string
    mutex    *sync.RWMutex
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中储存了服务的提供者，定义了一个map结构，和一个读写锁&lt;/p&gt;
&lt;p&gt;初始化这个结构体变量:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;var prov = providers&amp;#123;
    services: make(map[ServiceName][]string),
    mutex:    new(sync.RWMutex),
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;定义对于的更新方法，用于更新这个结构中的数据:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func (p *providers) Update(pat patch) &amp;#123;
    p.mutex.Lock()
    defer p.mutex.Unlock()
 
    for _, patchEntry := range pat.Added &amp;#123;
        if _, ok := p.services[patchEntry.Name]; !ok &amp;#123;
            p.services[patchEntry.Name] = make([]string, 0)
        &amp;#125;
        p.services[patchEntry.Name] = append(p.services[patchEntry.Name], patchEntry.URL)
    &amp;#125;
    for _, patchEntry := range pat.Removed &amp;#123;
        if providerURLs, ok := p.services[patchEntry.Name]; ok &amp;#123;
            for i := range providerURLs &amp;#123;
                if providerURLs[i] == patchEntry.URL &amp;#123;
                    p.services[patchEntry.Name] = append(providerURLs[:i], providerURLs[i+1:]...)
                &amp;#125;
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先遍历Added，也就是patch要增加的服务，如果added里的服务在providers中还不存在，则创建这个service，然后将这个服务和对应URL写入map，同理，接着遍历Removed，已有的服务就将其删除&lt;/p&gt;
&lt;p&gt;接着定义了一个get函数，通过服务名称找到对应的URL:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func (p *providers) get(name ServiceName) (string, error) &amp;#123;
    providers, ok := p.services[name]
    if !ok &amp;#123;
        return &amp;quot;&amp;quot;, fmt.Errorf(&amp;quot;no providers avaliable for service %v&amp;quot;, name)
    &amp;#125;
    idx := int(rand.Float32() * float32(len(providers)))
    return providers[idx], nil
&amp;#125;
 
func GetProvider(name ServiceName) (string, error) &amp;#123;
    return prov.get(name)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;目前providers只有logservice&lt;/p&gt;
&lt;p&gt;接着再将ServiceUpdateURL绑定到一个handler上，从而能够对其进行处理:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func RegisterService(r Registration) error &amp;#123;
    serviceUpdateURL, err := url.Parse(r.ServiceUpdateURL)
    if err != nil &amp;#123;
        return err
    &amp;#125;
    http.Handle(serviceUpdateURL.Path, &amp;amp;serviceUpdateHandler&amp;#123;&amp;#125;)
    ....
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;定义接口方法:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;type serviceUpdateHandler struct&amp;#123;&amp;#125;
 
func (suh serviceUpdateHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) &amp;#123;
    if r.Method != http.MethodPost &amp;#123;
        w.WriteHeader(http.StatusMethodNotAllowed)
        return
    &amp;#125;
    dec := json.NewDecoder(r.Body)
    var p patch
    err := dec.Decode(&amp;amp;p)
    if err != nil &amp;#123;
        log.Println(err)
        w.WriteHeader(http.StatusBadGateway)
    &amp;#125;
    prov.Update(p)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ServeHTTP中接收POST请求，将Body到数据反序列化后传入Update方法再调用&lt;/p&gt;
&lt;p&gt;因为经过了一些扩展，所以要修改Registration，增加所要依赖的服务和URL字段&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;type Registration struct &amp;#123;
    ServiceName      ServiceName
    ServiceURL       string
    RequiredServices []ServiceName
    ServiceUpdateURL string
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面优化一下logservice，目前日志服务只有一个服务端，要让客户端能够方便地使用提供的logservice服务，在log下再编写一个client.go文件:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package log
 
import (
    &amp;quot;bytes&amp;quot;
    &amp;quot;distributed/registry&amp;quot;
    &amp;quot;fmt&amp;quot;
    stdlog &amp;quot;log&amp;quot;
    &amp;quot;net/http&amp;quot;
)
 
func SetClientLogger(serviceURL string, clientService registry.ServiceName) &amp;#123;
    stdlog.SetPrefix(fmt.Sprintf(&amp;quot;[%v] - &amp;quot;, clientService))
    stdlog.SetFlags(0)  // 不设置flag
    stdlog.SetOutput(&amp;amp;clientLogger&amp;#123;serviceURL&amp;#125;)
&amp;#125;
 
type clientLogger struct &amp;#123;
    url string
&amp;#125;
 
func (cl clientLogger) Write(data []byte) (n int, err error) &amp;#123;
    b := bytes.NewBuffer([]byte(data))
    res, err := http.Post(cl.url+&amp;quot;/log&amp;quot;, &amp;quot;text/plain&amp;quot;, b)
    if err != nil &amp;#123;
        return 0, err
    &amp;#125;
    if res.StatusCode != http.StatusOK &amp;#123;
        return 0, fmt.Errorf(&amp;quot;failed to send log message. &amp;quot;)
    &amp;#125;
    return len(data), nil
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SetClientLogger负责设置客户端日志打印的相关的属性，因为要为clientLogger实现io.Writer接口，所以下面为其实现一个Write方法&lt;/p&gt;
&lt;p&gt;扩展gradingservice&amp;#x2F;main.go中结构体的定义:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;r := registry.Registration&amp;#123;
    ServiceName:      registry.GradingService,
    ServiceURL:       serviceAddress,
    RequiredServices: []registry.ServiceName&amp;#123;registry.LogService&amp;#125;,
    ServiceUpdateURL: serviceAddress + &amp;quot;/services&amp;quot;,
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;logservice同时接着还要获取Provider，即获取提供日志的服务的名称，这便是服务发现&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;if logProvider, err := registry.GetProvider(registry.LogService); err == nil &amp;#123;
    fmt.Printf(&amp;quot;Logging service found at: %s\n&amp;quot;, logProvider)
    log.SetClientLogger(logProvider, r.ServiceName)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行测试:&lt;/p&gt;
&lt;p&gt;先运行注册中心&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;$ go run .
2022/08/24 13:03:05 Request received
2022/08/24 13:03:05 Adding service: LogService with URL: http://localhost:4000
2022/08/24 13:03:21 Request received
2022/08/24 13:03:21 Adding service: GradingService with URL: http://localhost:6000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行日志服务&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;$ go run .
LogService started. Press any key to stop. 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行gradding服务&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;$ go run .
GradingService started. Press any key to stop. 
Logging service found at: http://localhost:4000
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;服务更新&#34;&gt;&lt;a href=&#34;#服务更新&#34; class=&#34;headerlink&#34; title=&#34;服务更新&#34;&gt;&lt;/a&gt;服务更新&lt;/h3&gt;&lt;p&gt;对于一个服务，当所依赖的服务发生变化时，应当发出通知，例如logservice，当这个服务停止时，应该发出一条通知来告知gradingservice，启动时也应当发出一条通知，在上面的实现中，gradingservice只能在启动时发现logservice，并且logservice要先于gradingservice启动&lt;/p&gt;
&lt;p&gt;在服务启动时就应该进行通知，所以在add函数中添加一个通知函数:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func (r *registry) add(reg Registration) error &amp;#123;
    ....
    err := r.sendRequiredServices(reg)
    r.notify(patch&amp;#123;
        Added: []patchEntry&amp;#123;
            &amp;#123;
                Name: reg.ServiceName,
                URL:  reg.ServiceURL,
            &amp;#125;,
        &amp;#125;,
    &amp;#125;)
    return err
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通知函数的实现:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func (r *registry) notify(fullPatch patch) &amp;#123;
    r.mutex.RLock()
    defer r.mutex.RUnlock()
    
    for _, reg := range r.registrations &amp;#123;
        go func(reg Registration) &amp;#123;
            for _, reqService := range reg.RequiredServices &amp;#123;
                p := patch&amp;#123;
                    Added:   []patchEntry&amp;#123;&amp;#125;,
                    Removed: []patchEntry&amp;#123;&amp;#125;,
                &amp;#125;
                sendUpdate := false
                for _, added := range fullPatch.Added &amp;#123;
                    if added.Name == reqService &amp;#123;
                        p.Added = append(p.Added, added)
                        sendUpdate = true
                    &amp;#125;
                &amp;#125;
                for _, removed := range fullPatch.Removed &amp;#123;
                    if removed.Name == reqService &amp;#123;
                        p.Removed = append(p.Removed, removed)
                        sendUpdate = true
                    &amp;#125;
                &amp;#125;
                if sendUpdate &amp;#123;
                    err := r.sendPatch(p, reg.ServiceUpdateURL)  // 发送patch
                    if err != nil &amp;#123;
                        log.Println(err)
                        return
                    &amp;#125;
                &amp;#125;
            &amp;#125;
        &amp;#125;(reg)
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个notify函数接收一个patch变量作为参数，其中包含的added和removed，对应增加和移除的服务，函数体中要做的事就是先遍历所有的服务，然后遍历其所有的依赖服务，根据传入的fullPatch和added和removed，如果依赖服务是要增加或移除的，则将sendUpdate标志设置为true，产生patch并发送，进行更新，这些流程使用goroutine来并发地进行&lt;/p&gt;
&lt;p&gt;在registry&amp;#x2F;client.go的ServeHTTP函数中增加一句提示信息，表示接收到了更新:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func (suh serviceUpdateHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) &amp;#123;
    ....
    fmt.Printf(&amp;quot;Updated received %v\n&amp;quot;, p)
    prov.Update(p)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对remove函数同样要进行扩展:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func (r *registry) remove(url string) error &amp;#123;
    for i := range reg.registrations &amp;#123;
        if reg.registrations[i].ServiceURL == url &amp;#123;
            r.notify(patch&amp;#123;
                Removed: []patchEntry&amp;#123;
                    &amp;#123;
                        Name: r.registrations[i].ServiceName,
                        URL:  r.registrations[i].ServiceURL,
                    &amp;#125;,
                &amp;#125;,
            &amp;#125;)
    ...
    return fmt.Errorf(&amp;quot;service at URL %s not found&amp;quot;, url)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行测试: 先运行注册中心，然后运行logservice，然后运行gradingservice，之后关闭logservice再启动&lt;/p&gt;
&lt;p&gt;注册中心:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;$ go run .
2022/08/24 18:03:45 Request received
2022/08/24 18:03:45 Adding service: LogService with URL: http://localhost:4000
2022/08/24 18:03:50 Request received
2022/08/24 18:03:50 Adding service: GradingService with URL: http://localhost:6000
2022/08/24 18:03:53 Request received
2022/08/24 18:03:53 Removing servcice at URL: http://localhost:4000
2022/08/24 18:03:53 Request received
2022/08/24 18:03:53 Removing servcice at URL: http://localhost:4000
2022/08/24 18:04:12 Request received
2022/08/24 18:04:12 Adding service: LogService with URL: http://localhost:4000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;日志服务:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;$ go run .
LogService started. Press any key to stop. 
Updated received &amp;#123;[] []&amp;#125;
 
2022/08/24 18:03:53 http: Server closed
Shutting down log service.
$ go run .
LogService started. Press any key to stop. 
Updated received &amp;#123;[] []&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;grading服务:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;$ go run .
GradingService started. Press any key to stop. 
Updated received &amp;#123;[&amp;#123;LogService http://localhost:4000&amp;#125;] []&amp;#125;
Logging service found at: http://localhost:4000
Updated received &amp;#123;[] [&amp;#123;LogService http://localhost:4000&amp;#125;]&amp;#125;
Updated received &amp;#123;[&amp;#123;LogService http://localhost:4000&amp;#125;] []&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;服务状态监控&#34;&gt;&lt;a href=&#34;#服务状态监控&#34; class=&#34;headerlink&#34; title=&#34;服务状态监控&#34;&gt;&lt;/a&gt;服务状态监控&lt;/h2&gt;&lt;p&gt;检查所有服务的健康状况，方法是发送心跳请求，得知服务是否能正常响应&lt;/p&gt;
&lt;p&gt;在Registration中加一条HeartbeatURL:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;type Registration struct &amp;#123;
    ServiceName      ServiceName
    ServiceURL       string
    RequiredServices []ServiceName
    ServiceUpdateURL string
    HeartbeatURL     string
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;增加心跳检查函数:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func (r *registry) heartbeat(freq time.Duration) &amp;#123;
    for &amp;#123;
        var wg sync.WaitGroup
        for _, reg := range r.registrations &amp;#123;
            wg.Add(1)
            go func(reg Registration) &amp;#123;
                defer wg.Done()
                success := true
                for attemps := 0; attemps &amp;lt; 3; attemps++ &amp;#123;
                    res, err := http.Get(reg.HeartbeatURL)
                    if err != nil &amp;#123;
                        log.Println(err)
                    &amp;#125; else if res.StatusCode == http.StatusOK &amp;#123;
                        log.Printf(&amp;quot;Heartbeat check passed for %v&amp;quot;, reg.ServiceName)
                        if !success &amp;#123;
                            r.add(reg)
                        &amp;#125;
                        break
                    &amp;#125;
                    log.Printf(&amp;quot;Heartbeat check failed for %v&amp;quot;, reg.ServiceName)
                    if success &amp;#123;
                        success = false
                        r.remove(reg.ServiceURL)
                    &amp;#125;
                &amp;#125;
            &amp;#125;(reg)
            wg.Wait()
            time.Sleep(freq)
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述代码中用到了waitgroup和goroutine，对每个服务的HeartbeatURL间隔freq的时间发起get请求，连续发送三次，如果有一次失败(状态码不等于200)，那么success为false，那么会调用remove来移除服务，如果success为false又得到了正常的相应，那么又会调用add将服务加回来&lt;/p&gt;
&lt;p&gt;上述这段代码将会在如下函数中调用，将其定义在registry&amp;#x2F;server.go中，每隔3秒检查一次服务健康状况:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;var once sync.Once
 
func SetupRegistryService() &amp;#123;
    once.Do(func() &amp;#123;
        go reg.heartbeat(3 * time.Second)
    &amp;#125;)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;与此同时，所有的客户端都应该知道如何相应这种心跳请求:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func RegisterService(r Registration) error &amp;#123;
    heartbeatURL, err := url.Parse(r.HeartbeatURL)
    if err != nil &amp;#123;
        return err
    &amp;#125;
    http.HandleFunc(heartbeatURL.Path, func(w http.ResponseWriter, r *http.Request) &amp;#123;
        w.WriteHeader(http.StatusOK)
    &amp;#125;)
    ....
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在服务注册时，就在心跳URL注册一个handler，处理心跳请求，最后为logservice和gradingservice都加上心跳URL:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;r := registry.Registration&amp;#123;
    ServiceName:      registry.LogService,
    ServiceURL:       serviceAddress,
    RequiredServices: make([]registry.ServiceName, 0),
    ServiceUpdateURL: serviceAddress + &amp;quot;/services&amp;quot;,
    HeartbeatURL:     serviceAddress + &amp;quot;/heartbeat&amp;quot;,
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试&lt;/p&gt;
&lt;p&gt;启动注册中心和两个服务，中途关掉logservice&lt;/p&gt;
&lt;p&gt;注册中心的输出:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;2022/08/24 19:12:24 Adding service: LogService with URL: http://localhost:4000
2022/08/24 19:12:24 Heartbeat check passed for LogService
2022/08/24 19:12:26 Request received
2022/08/24 19:12:26 Adding service: GradingService with URL: http://localhost:6000
2022/08/24 19:12:27 Heartbeat check passed for LogService
2022/08/24 19:12:30 Heartbeat check passed for GradingService
2022/08/24 19:12:33 Heartbeat check passed for LogService
2022/08/24 19:12:36 Heartbeat check passed for GradingService
2022/08/24 19:12:36 Request received
2022/08/24 19:12:36 Removing servcice at URL: http://localhost:4000
2022/08/24 19:12:36 Request received
2022/08/24 19:12:36 Removing servcice at URL: http://localhost:4000
2022/08/24 19:12:39 Heartbeat check passed for GradingService
2022/08/24 19:12:42 Heartbeat check passed for GradingService
2022/08/24 19:12:45 Heartbeat check passed for GradingService
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="计算机科学" scheme="https://hdqjl317.github.io/categories/computer-science/" />
        <category term="分布式系统" scheme="https://hdqjl317.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/" />
        <updated>2022-10-04T12:43:08.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2022/08/20/worktech/vscode%E9%80%9A%E8%BF%87%E5%AF%86%E9%92%A5%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
        <title>vscode通过密钥连接远程服务器</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2022/08/20/worktech/vscode%E9%80%9A%E8%BF%87%E5%AF%86%E9%92%A5%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
        <content type="html">&lt;p&gt;&lt;strong&gt;一，生成密钥，或者在购买服务器时选择 ssh 密匙登录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一种：通过指令 ssh-keygen 生成，具体的我就不说了&lt;/p&gt;
&lt;p&gt;第二种：通过服务商生成，阿里云，腾讯云，华为云的网站有创建密钥的，比如腾讯云&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;vscode%E9%80%9A%E8%BF%87%E5%AF%86%E9%92%A5%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20230204153756653.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二，将密钥绑定到服务器，也可以在网站直接操作，修改密码为密钥就好了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三，在 vscode 上安装 Remote Development 插件，然后将几个扩展包也安装一下&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四，点击远程资源管理器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;vscode%E9%80%9A%E8%BF%87%E5%AF%86%E9%92%A5%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20230204153918156.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;strong&gt;五，点击 + 号在输入框输入 ssh 登录名 @IP 地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;vscode%E9%80%9A%E8%BF%87%E5%AF%86%E9%92%A5%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20230204153949670.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;六，输入完成后按回车会出现选择选择，选择 C:User\XXX.ssh\config&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;vscode%E9%80%9A%E8%BF%87%E5%AF%86%E9%92%A5%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20230204154137681.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;上面三条是自动生成的，Host 那条是本地名称，可以修改用来区分服务器，最后一条写的是私钥的地址，地址加上 “”。然后点击下图这个符号就可以连接远程服务器了。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;vscode%E9%80%9A%E8%BF%87%E5%AF%86%E9%92%A5%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20230204154455497.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</content>
        <category term="工作技能" scheme="https://hdqjl317.github.io/categories/worktech/" />
        <category term="vscode" scheme="https://hdqjl317.github.io/tags/vscode/" />
        <updated>2022-08-20T08:28:27.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2022/08/10/codelanguage/cpp11%E6%96%B0%E7%89%B9%E6%80%A7%E7%AF%873/</id>
        <title>cpp11新特性篇3</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2022/08/10/codelanguage/cpp11%E6%96%B0%E7%89%B9%E6%80%A7%E7%AF%873/"/>
        <content type="html">&lt;h2 id=&#34;autodecltype&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#autodecltype&#34;&gt;#&lt;/a&gt; auto&amp;amp;&amp;amp;decltype&lt;/h2&gt;
&lt;p&gt;静态类型：类型检查在编译阶段&lt;/p&gt;
&lt;p&gt;动态类型：类型检查在运行阶段&lt;/p&gt;
&lt;p&gt;auto 声明变量的类型必须由编译器在编译时期推导而得，其优势是在拥有初始化表达式的复杂类型变量声明时简化代码。&lt;/p&gt;
&lt;p&gt;decltype 以一个普通的表达式为参数，返回该表达式的类型。&lt;/p&gt;
&lt;p&gt;用 decltype (e) 来获取类型时，编译器将依序判断以下四规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 e 是一个没有带括号的标记符表达式或者类成员访问表达式，那么 decltype (e) 就是 e 所命名的实体的类型。如果 e 是一个被重载的函数，则会导致编译时错误。&lt;/li&gt;
&lt;li&gt;否则，假设 e 的类型是 T，如果 e 是一个将亡值 (xvalue)，那么 decltype (e) 为 T&amp;amp;&amp;amp;。&lt;/li&gt;
&lt;li&gt;否则，假设 e 的类型是 T，如果 e 是一个左值，则 decltype (e) 为 T&amp;amp;。&lt;/li&gt;
&lt;li&gt;否则，假设 e 的类型是 T，则 decltype (e) 为 T。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;追踪返回类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#追踪返回类型&#34;&gt;#&lt;/a&gt; 追踪返回类型&lt;/h2&gt;
&lt;p&gt;对返回类型进行类型推导：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;`&lt;span class=&#34;token keyword&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;			&lt;span class=&#34;token comment&#34;&gt;// 直观的方案&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;decltype&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t1 &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; t2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;T1 &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; t1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; T2 &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; t2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; t1 &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; t2&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;			&lt;span class=&#34;token comment&#34;&gt;// 追踪返回类型的方案&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;T1 &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; t1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; T2 &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; t2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;decltype&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t1 &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; t2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; t1 &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; t2&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;`&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;把原本的函数返回值移到参数声明之后，而原本的返回值的位置由 auto 关键字占据。auto 占位符和 return_type 是构成追踪返回类型函数的两个基本元素。&lt;/p&gt;
&lt;p&gt;追踪返回类型另一个优势是简化函数的定义，提高代码可读性。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;`#include&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;type_traits&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;pf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//auto (*)() -&gt; int (*) () 一个返回函数指针的函数（假设为 a 函数）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//auto pf1 () -&gt; auto (*)() -&gt; int (*)() 一个返回 a 函数的指针的函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;pf1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;// 和上面等价&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; is_same&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;decltype&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pf&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;decltype&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pf1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;value &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;追踪返回类&lt;/code&gt; 型也常用于转发函数中：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;`#include &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;iostream&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;a &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Forward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;T t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;decltype&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Forward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;//2.1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Forward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;`&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="编程语言" scheme="https://hdqjl317.github.io/categories/codelanguage/" />
        <category term="cpp" scheme="https://hdqjl317.github.io/tags/cpp/" />
        <updated>2022-08-10T08:24:51.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2022/08/04/codelanguage/cpp11%E6%96%B0%E7%89%B9%E6%80%A7%E7%AF%872/</id>
        <title>cpp11新特性篇2</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2022/08/04/codelanguage/cpp11%E6%96%B0%E7%89%B9%E6%80%A7%E7%AF%872/"/>
        <content type="html">&lt;h3 id=&#34;继承构造函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#继承构造函数&#34;&gt;#&lt;/a&gt; 继承构造函数&lt;/h3&gt;
&lt;p&gt;如果基类有多个构造函数，使用继承构造函数可以让派生类免于重写各个基类的构造函数。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; d&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;float&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// ...&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token base-clause&#34;&gt;&lt;span class=&#34;token class-name&#34;&gt;A&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; A &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; A&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;// 继承构造函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// ...&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;c++11 标准继承构造函数和默认构造函数、析构函数、拷贝构造一样，都是隐式声明的。不过继承构造函数只会初始化基类中的成员变量，对于派生类的成员变量无法初始化，这时候要结合初始化表达式为派生类的成员变量设定默认值。但是，&lt;strong&gt;继承构造函数不会继承基类的成员变量的默认值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当派生类的继承基类时，派生类的继承构造函数可能不只有一个结果：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2.4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token base-clause&#34;&gt;&lt;span class=&#34;token class-name&#34;&gt;A&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; A&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;A&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;可能生成的继承构造函数如下：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2.4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; A&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;对应的B的构造函数将有：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2.4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; B&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;其他的规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果基类的构造函数被声明为私有成员函数，或者派生类是从基类中虚继承的，则不能在派生类中声明继承构造函数。&lt;/li&gt;
&lt;li&gt;如果派生类一旦使用了继承构造函数，编译器则不会为派生类构造自己的默认构造函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token base-clause&#34;&gt;&lt;span class=&#34;token class-name&#34;&gt;A&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; A&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;A&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;B b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;//B 没有默认构造函数，不能通过编译&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;委派构造函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#委派构造函数&#34;&gt;#&lt;/a&gt; 委派构造函数&lt;/h3&gt;
&lt;p&gt;所谓委托构造就是让类中的某个构造函数去委托另一个构造函数执行构造操作的机制。一个委托构造函数使用&lt;strong&gt;它所属类的其他构造函数&lt;/strong&gt;执行自己的初始化过程。调用者叫委派构造函数，被调用者叫目标构造函数。&lt;/p&gt;
&lt;h3 id=&#34;右值引用移动语义和完美转发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#右值引用移动语义和完美转发&#34;&gt;#&lt;/a&gt; 右值引用：移动语义和完美转发&lt;/h3&gt;
&lt;p&gt;(1) 移动构造函数：移交所有权，析构自身。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;左值：可以取地址的，有名字的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;右值：不能取地址，无名字的。又可细分为纯右值和将亡值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;纯右值：辨识临时变量和一些不跟对象关联的值&lt;/li&gt;
&lt;li&gt;将亡值：C++11 新增的跟右值引用相关的表达式，如右值引用 T &amp;amp;&amp;amp; 的函数返回值、std::move 的返回值、或者转换为 T &amp;amp;&amp;amp; 的类型转换函数的返回值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为区别 C++98 的引用类型，之前的引用叫做左值引用，左值引用和右值引用都是引用类型，声明时都必须立即进行初始化。右值引用只能绑定右值，不能绑定任何左值。左值引用可以接受非常量左值、常量左值、右值对其进行初始化。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;T &amp;amp;&amp;amp; a = ReturnRvalue(); 		// √ 绑定右值&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;int c;&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;int &amp;amp;&amp;amp; d = c;					// X 绑定左值&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用移动语义的前提下需要给类添加一个以右值引用为参数的移动构造函数。&lt;/p&gt;
&lt;p&gt;而通常情况下，在为类声明了一个移动构造函数后，可以声明一个常量左值为参数的拷贝构造函数，以保证在移动构造不成时，还可以进行拷贝构造（偶尔也有特殊用途的反例）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;引用类型 \ 可以引用的值类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;非常量左值&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;常量左值&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;非常量右值&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;常量右值&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;注记&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;非常量左值引用&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;常量左值引用&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;全能类型、可用于拷贝语义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;非常量右值引用&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用于移动语义、完美转发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;常量右值引用&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;暂无用途&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果不知道一个类型是否属于引用类型，可以用标准库 &amp;lt;type_traits&amp;gt; 头文件中的 3 个模板类进行判断：is_rvalue_reference、is_lvalue_reference、is_reference。如判断 string &amp;amp;&amp;amp; 的类型：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cout &amp;lt;&amp;lt; is_rvalue_reference&amp;lt;string &amp;amp;&amp;amp;&amp;gt;::value;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(2) std::move: 强制转化为右值&lt;/p&gt;
&lt;p&gt;std::move 基本等同于一个类型转换：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;static_cast&amp;lt;T&amp;amp;&amp;amp;&amp;gt;(lvalue);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但注意：被 std::move 转化的左值，其生命期并没有随着左右值的转化而改变。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Moveable&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;Moveable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;Moveable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;delete&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;Moveable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; Moveable &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;m&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;m&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;Moveable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Moveable &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; m&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;m&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        m&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Moveable a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Moveable &lt;span class=&#34;token function&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 会调用移动构造函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 运行时错误&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/*&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;move (a) 后，a.i 就被移动构造函数设置为指针空值，所以后来使用会报错&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;*/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如上例，在大多数时候，我们需要将其转化为右值引用的还是一个确实生命期即将结束的对象。&lt;/p&gt;
&lt;p&gt;声明了移动构造函数、移动赋值函数、拷贝赋值函数和析构函数中的一个或多个，编译器不会再为程序员生成默认的拷贝构造函数。所以拷贝构造 / 赋值和移动构造 / 赋值函数必须同时提供，或者同时不提供，这才能保证类同时具备拷贝语义和移动语义。&lt;/p&gt;
&lt;p&gt;可以通过可以用标准库 &amp;lt;type_traits&amp;gt; 头文件中的 is_move_constructible、is_trivially_move_constructible、is_nothrow_move_constructible 判断一个类型是否可以移动：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cout &amp;lt;&amp;lt; is_move_constructible&amp;lt;UnknownType&amp;gt;::value;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(3) 完美转发（perfect forwarding）&lt;/p&gt;
&lt;p&gt;完美转发，是指在函数模板中，完全依照模板的参数的类型，将参数传递给函数模板中调用的另外一个函数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;template &amp;lt;typename T&amp;gt;&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;void IamForwording(T t) &amp;#123; IrunCodeActually(t); &amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对于目标函数 IrunCodeActually 而言，它总是希望转发函数将参数按照传入 lamForwarding 时的类型传递 (即传入 lamForwording 的是左值对象，IrunCodeActually 就能获得左值对象，传入 lamForwording 的是右值对象，lrunCodeActually 就能获得右值对象)，而不产生额外的开销，就好像转发者不存在一样。&lt;/p&gt;
&lt;p&gt;C++11 通过使用 “引用折叠”（reference collapsing），结合新的模板推导规则实现完美转发。&lt;/p&gt;
&lt;p&gt;引用折叠：即将复杂的未知表达式折叠为已知的简单表达式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;typedef const int T;&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;typedef T&amp;amp; TR;&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;TR&amp;amp; v = 1;		//该声明在C++98中会导致编译报错,而在c++11中会导致引用折叠&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​																	&lt;strong&gt;表  c++11 中的引用折叠&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;TR 的类型定义&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;声明 v 的类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;v 的实际类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;T&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;TR&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A&amp;amp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;T&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;TR&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A&amp;amp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;T&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;TR&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A&amp;amp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;T&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;TR&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A&amp;amp;&amp;amp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;T&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;TR&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A&amp;amp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;T&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;TR&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A&amp;amp;&amp;amp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;将之前的例子改写：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 改写为完美转发&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;IamForwording&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;T &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;IrunCodeActually&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;static_cast&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;T &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 c++11 中用于完美转发的函数是 forward，它和 move 的实际实现上差别不大，move 也可以实现完美转发，但并不推荐。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;IamForwording&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;T &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;IrunCodeActually&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;显示转换操作符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#显示转换操作符&#34;&gt;#&lt;/a&gt; 显示转换操作符&lt;/h3&gt;
&lt;p&gt;explicit 作用：在 C++ 中，explicit 关键字用来修饰类的构造函数，被修饰的构造函数的类，不能发生相应的隐式类型转换，只能以显示的方式进行类型转换。&lt;/p&gt;
&lt;p&gt;explicit 使用注意事项:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;explicit 关键字只能用于类内部的构造函数声明上。&lt;/li&gt;
&lt;li&gt;explicit 关键字作用于单个参数的构造函数。&lt;/li&gt;
&lt;li&gt;explicit 关键字用来修饰类的构造函数，被修饰的构造函数的类，不能发生相应的隐式类型转换&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;列表初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#列表初始化&#34;&gt;#&lt;/a&gt; 列表初始化&lt;/h3&gt;
&lt;p&gt;不仅能用于内置类型、标准库中的容器，只要 #include 了 &amp;lt;initializer_list&amp;gt; 头文件，并且声明一个以   initialize_list&amp;lt; T &amp;gt; 模板类为参数的构造函数，同样可以使得自定义的类使用列表初始化。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;string&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Gender&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;boy&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; girl&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;People&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;People&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;initializer_list&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Gender&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; l&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; l&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; l&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Gender&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; data&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;函数的参数列表也可以使用初始化列表。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;initializer_list&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Fun&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;initializer_list&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; iv&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 空列表&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;`&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;同理，类和结构体的成员函数也可以使用初始化参数列表，包括一些操作符的重载函数。&lt;/p&gt;
&lt;p&gt;此外，初始化列表还可以用于函数返回的情况，返回一个初始化列表，通常会导致构造一个临时变量，比如：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vector&amp;lt;int&amp;gt; Func &amp;#123; return &amp;#123;1,3&amp;#125;; &amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用列表初始化的优势是可以防止类型收窄（narrowing）。&lt;/p&gt;
&lt;p&gt;类型收窄一般是指一些可以使得数据变化或者精度丢失的隐式类型转换。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;const int x = 1024;&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;const int y = 10;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;char a = x;					// 收窄，但可以通过编译&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;char *b = new char(1024);	// 收窄，但可以通过编译&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;char c = &amp;#123;x&amp;#125;;				// 收窄，无法通过编译&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;char d = &amp;#123;y&amp;#125;;				// 可以通过编译，char的取值范围在-128~127&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;unsigned char e &amp;#123;-1&amp;#125;;		// 收窄，无法通过编译&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;float f &amp;#123;7&amp;#125;;				// 可以通过编译，这个可以转换会原类型，没有发生精度丢失，所以可以通过&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;int g &amp;#123; 2.0 f&amp;#125;;				// 收窄，无法通过编译，2.0f是一个有精度的浮点数值，转换成整数会丢失精度&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;float *h = new float&amp;#123;1e48&amp;#125;; // 收窄，无法通过编译&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;float i = 1.21;				// 可以通过编译&lt;/code&gt;&lt;/p&gt;
</content>
        <category term="编程语言" scheme="https://hdqjl317.github.io/categories/codelanguage/" />
        <category term="cpp" scheme="https://hdqjl317.github.io/tags/cpp/" />
        <updated>2022-08-04T05:01:42.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2022/08/01/codelanguage/cpp11%E6%96%B0%E7%89%B9%E6%80%A7%E7%AF%871/</id>
        <title>cpp11新特性篇1</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2022/08/01/codelanguage/cpp11%E6%96%B0%E7%89%B9%E6%80%A7%E7%AF%871/"/>
        <content type="html">&lt;h3 id=&#34;查验机器环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查验机器环境&#34;&gt;#&lt;/a&gt; 查验机器环境&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Standard Clib: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; __STDC_HOSTED__ &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Standard C: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; __STDC__ &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// cout &amp;lt;&amp;lt; &#34;C Standard version: &#34; &amp;lt;&amp;lt; __STDC_VERSION__ &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;ISO/IEC &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; __STDC_ISO_10646__ &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Standard Clib&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Standard C&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ISO&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;IEC &lt;span class=&#34;token number&#34;&gt;201706&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;返回函数的名字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#返回函数的名字&#34;&gt;#&lt;/a&gt; 返回函数的名字&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 返回函数的名字，预定义标识符 __func__&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;string&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;__func__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;__func__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;TestStruct&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;TestStruct&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;__func__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    TestStruct ts&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ts&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hello&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; world&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;TestStruct&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;变长参数宏定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#变长参数宏定义&#34;&gt;#&lt;/a&gt; 变长参数宏定义&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 变长参数宏定义 __VA_ARGS__&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name function&#34;&gt;LOG&lt;/span&gt;&lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;  &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token function&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;stderr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%s: Line %d:\t&#34;&lt;/span&gt;&lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;__FILE__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;__LINE__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token function&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;stderr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; __VA_ARGS__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token function&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;stderr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;\n&#34;&lt;/span&gt;&lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;LOG&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;x = %d&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;va_args&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cpp&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; Line &lt;span class=&#34;token number&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;   x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;静态断言与static_assert&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态断言与static_assert&#34;&gt;#&lt;/a&gt; 静态断言与 static_assert&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;断言宏 assert 只用于程序运行时&lt;/li&gt;
&lt;li&gt;#error 只在编译器预处理时有效&lt;/li&gt;
&lt;li&gt;static_assert 用于程序编译时进行断言&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;static_assert 接收两个参数，一个 bool 值，一个字符串警告信息。&lt;/p&gt;
&lt;p&gt;static_assert 的断言表达式的结果必须时在编译时期就可以计算的表达式，及必须是常量表达式。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;cstring&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;bit_copy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;T &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; U &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;the parameters of bit_copy must have same width.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;memcpy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x2468&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;bit_copy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;noexcept修饰符与noexcept操作符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#noexcept修饰符与noexcept操作符&#34;&gt;#&lt;/a&gt; noexcept 修饰符与 noexcept 操作符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;noexcept 不会抛出异常，通过调用 std::terminate () 来终止程序的运行，则这样可以减少异常机制带来的开销（比如，不用进行栈帧的一级一级的展开），有效的阻止了异常的传播与扩散。&lt;/li&gt;
&lt;li&gt;但也可能存在一些问题，比如 noexcepet 后无法保证对象的析构函数的正常调用，无法保证栈的自动释放等等。&lt;/li&gt;
&lt;li&gt;C++11 默认将 delete 函数设置为 noexcept，即 nocept (true)，可以提高程序的安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;`&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;size_t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 可以抛出异常&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;size_t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 可以抛出异常&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;except_func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 用于函数，默认 noexcept (true)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;except_func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;常量表达式&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 用于函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//noexcept () 用于模板 `&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;快速初始化成员变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#快速初始化成员变量&#34;&gt;#&lt;/a&gt; 快速初始化成员变量&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;string&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Init&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 可以通过编译，以前的 C++98 不能通过编译&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    string &lt;span class=&#34;token function&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;		&lt;span class=&#34;token comment&#34;&gt;// 无法通过编译&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    C &lt;span class=&#34;token function&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;					&lt;span class=&#34;token comment&#34;&gt;// 无法通过编译&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Init temp&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;`&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;override和final&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#override和final&#34;&gt;#&lt;/a&gt; override 和 final&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;override：保证在派生类中声明的重载函数，与基类的虚函数有相同的签名（函数名，参数，const 属性）；&lt;/li&gt;
&lt;li&gt;final：阻止类的进一步派生 和 虚函数的进一步重写。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;加了 override，明确表示派生类的这个虚函数是要重写基类的，如果派生类与基类虚函数的签名不一致，编译器就会报错。一个虚函数被声明为 final，则派生类不能再重写它。&lt;/p&gt;
&lt;h3 id=&#34;模板函数的默认模板参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模板函数的默认模板参数&#34;&gt;#&lt;/a&gt; 模板函数的默认模板参数&lt;/h3&gt;
&lt;p&gt;c&lt;ins&gt;98 不支持函数模板的默认模板参数，c&lt;/ins&gt;11 支持。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Deparm&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; m &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;//c++98 编译通过， c++11 编译通过&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;DefClass&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;		&lt;span class=&#34;token comment&#34;&gt;//c++98 编译通过， c++11 编译通过&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;DefTempParm&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;//c++98 编译不通过， c++11 编译通过 `&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;对于类模板，如果定义模板类的默认模板参数，必须按照从左到右定义。而对于函数模板没有此要求。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;DefClass1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;//c++11 可以通过编译&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;DefClass2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;//c++11 不能通过编译&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;DefClass1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;//c++11 可以通过编译&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;DefClass1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	  &lt;span class=&#34;token comment&#34;&gt;//c++11 不能通过编译&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;DefFunc1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;T1 a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; T2 b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;//c++11 可以通过编译&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;DefFunc2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;T a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;					&lt;span class=&#34;token comment&#34;&gt;//c++11 可以通过编译 `&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="编程语言" scheme="https://hdqjl317.github.io/categories/codelanguage/" />
        <category term="cpp" scheme="https://hdqjl317.github.io/tags/cpp/" />
        <updated>2022-08-01T05:01:42.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2022/07/01/other/hello-world/</id>
        <title>Hello World</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2022/07/01/other/hello-world/"/>
        <content type="html">&lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==&#34;&gt;GitHub&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quick-start&#34;&gt;#&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#create-a-new-post&#34;&gt;#&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo new &lt;span class=&#34;token string&#34;&gt;&#34;My New Post&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#run-server&#34;&gt;#&lt;/a&gt; Run server&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo server&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#generate-static-files&#34;&gt;#&lt;/a&gt; Generate static files&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo generate&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#deploy-to-remote-sites&#34;&gt;#&lt;/a&gt; Deploy to remote sites&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo deploy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="杂谈" scheme="https://hdqjl317.github.io/categories/other/" />
        <category term="杂谈" scheme="https://hdqjl317.github.io/tags/%E6%9D%82%E8%B0%88/" />
        <updated>2022-07-01T03:01:42.000Z</updated>
    </entry>
</feed>
