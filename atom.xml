<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://HDqjl317.github.io</id>
    <title></title>
    <subtitle>加楽的小站</subtitle>
    <icon>https://hdqjl317.github.io/images/favicon.ico</icon>
    <link href="https://HDqjl317.github.io" />
    <author>
      <name>Caleb</name>
    </author>
    <updated>2023-06-30T08:50:54.000Z</updated>
    <entry>
        <id>https://hdqjl317.github.io/2023/06/30/computer-science/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</id>
        <title>编译原理</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2023/06/30/computer-science/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
        <content type="html"></content>
        <updated>2023-06-30T08:50:54.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2022/08/20/worktech/vscode%E9%80%9A%E8%BF%87%E5%AF%86%E9%92%A5%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
        <title>vscode通过密钥连接远程服务器</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2022/08/20/worktech/vscode%E9%80%9A%E8%BF%87%E5%AF%86%E9%92%A5%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
        <content type="html">&lt;p&gt;&lt;strong&gt;一，生成密钥，或者在购买服务器时选择ssh密匙登录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一种：通过指令ssh-keygen生成，具体的我就不说了&lt;/p&gt;
&lt;p&gt;第二种：通过服务商生成，阿里云，腾讯云，华为云的网站有创建密钥的，比如腾讯云&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/paperphone/image-20230204153756653.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二，将密钥绑定到服务器，也可以在网站直接操作，修改密码为密钥就好了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三，在vscode上安装Remote Development插件，然后将几个扩展包也安装一下&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四，点击远程资源管理器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/paperphone/image-20230204153918156.png&#34;&gt;&lt;br&gt;&lt;strong&gt;五，点击+号在输入框输入ssh 登录名@IP地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/paperphone/image-20230204153949670.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;六，输入完成后按回车会出现选择选择，选择C:User\XXX.ssh\config&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/paperphone/image-20230204154137681.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面三条是自动生成的，Host那条是本地名称，可以修改用来区分服务器，最后一条写的是私钥的地址，地址加上“”。然后点击下图这个符号就可以连接远程服务器了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/paperphone/image-20230204154455497.png&#34;&gt;&lt;/p&gt;
</content>
        <category term="工作技能" scheme="https://hdqjl317.github.io/categories/worktech/" />
        <category term="vscode" scheme="https://hdqjl317.github.io/tags/vscode/" />
        <updated>2022-08-20T08:28:27.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2022/08/10/codelanguage/cpp11%E6%96%B0%E7%89%B9%E6%80%A7%E7%AF%873/</id>
        <title>cpp11新特性篇3</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2022/08/10/codelanguage/cpp11%E6%96%B0%E7%89%B9%E6%80%A7%E7%AF%873/"/>
        <content type="html">&lt;h2 id=&#34;auto-amp-amp-decltype&#34;&gt;&lt;a href=&#34;#auto-amp-amp-decltype&#34; class=&#34;headerlink&#34; title=&#34;auto&amp;amp;&amp;amp;decltype&#34;&gt;&lt;/a&gt;auto&amp;amp;&amp;amp;decltype&lt;/h2&gt;&lt;p&gt;静态类型：类型检查在编译阶段&lt;/p&gt;
&lt;p&gt;动态类型：类型检查在运行阶段&lt;/p&gt;
&lt;p&gt;auto声明变量的类型必须由编译器在编译时期推导而得，其优势是在拥有初始化表达式的复杂类型变量声明时简化代码。&lt;/p&gt;
&lt;p&gt;decltype以一个普通的表达式为参数，返回该表达式的类型。&lt;/p&gt;
&lt;p&gt;用decltype(e)来获取类型时，编译器将依序判断以下四规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果e是一个没有带括号的标记符表达式或者类成员访问表达式，那么decltype(e)就是e所命名的实体的类型。如果e是一个被重载的函数，则会导致编译时错误。&lt;/li&gt;
&lt;li&gt;否则，假设e的类型是T，如果e是一个将亡值(xvalue)，那么decltype(e)为T&amp;amp;&amp;amp;。&lt;/li&gt;
&lt;li&gt;否则，假设e的类型是T，如果e是一个左值，则decltype(e)为T&amp;amp;。&lt;/li&gt;
&lt;li&gt;否则，假设e的类型是T，则decltype(e)为T。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;追踪返回类型&#34;&gt;&lt;a href=&#34;#追踪返回类型&#34; class=&#34;headerlink&#34; title=&#34;追踪返回类型&#34;&gt;&lt;/a&gt;追踪返回类型&lt;/h2&gt;&lt;p&gt;对返回类型进行类型推导：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;`template&amp;lt;typename T1, typename T2&amp;gt;			//直观的方案
decltype(t1 + t2) Sum(T1 &amp;amp; t1, T2 &amp;amp; t2) &amp;#123;
    return t1 + t2;
&amp;#125;

template&amp;lt;typename T1, typename T2&amp;gt;			//追踪返回类型的方案
auto Sum(T1 &amp;amp; t1, T2 &amp;amp; t2) -&amp;gt; decltype(t1 + t2) &amp;#123;
    return t1 + t2;
&amp;#125;

int func(char *a, int b);
auto func(char *a, int b) -&amp;gt; int ;`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;把原本的函数返回值移到参数声明之后，而原本的返回值的位置由auto关键字占据。auto占位符和return_type是构成追踪返回类型函数的两个基本元素。&lt;/p&gt;
&lt;p&gt;追踪返回类型另一个优势是简化函数的定义，提高代码可读性。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;`#include&amp;lt;type_traits&amp;gt;
#include&amp;lt;iostream&amp;gt;
using namespace std;

int (*(*pf()) ()) () &amp;#123;
    return nullptr;
&amp;#125;

//auto (*)() -&amp;gt; int(*) () 一个返回函数指针的函数（假设为a函数）
//auto pf1() -&amp;gt; auto(*)() -&amp;gt; int(*)() 一个返回a函数的指针的函数
auto pf1() -&amp;gt; auto (*)() -&amp;gt; int(*) &amp;#123;	//和上面等价
    return nullptr;
&amp;#125;

int main() &amp;#123;
    cout &amp;lt;&amp;lt; is_same&amp;lt;decltype(pf), decltype(pf1)&amp;gt;::value &amp;lt;&amp;lt; endl;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;追踪返回类&lt;/code&gt;型也常用于转发函数中：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;`#include &amp;lt;iostream&amp;gt;
using namespace std;

double foo(int a) &amp;#123;
    return (double)a + 0.1;
&amp;#125;

int foo(double) &amp;#123;
    return (int)b;
&amp;#125;

template &amp;lt;class T&amp;gt;
auto Forward(T t) -&amp;gt; decltype(foo(t)) &amp;#123;
    return foo(t);
&amp;#125;

int main() &amp;#123;
    cout &amp;lt;&amp;lt; Forward(2) &amp;lt;&amp;lt; endl;  //2.1
    cout &amp;lt;&amp;lt; Forward(0.5) &amp;lt;&amp;lt; endl; //0
&amp;#125;`
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="编程语言" scheme="https://hdqjl317.github.io/categories/codelanguage/" />
        <category term="cpp" scheme="https://hdqjl317.github.io/tags/cpp/" />
        <updated>2022-08-10T08:24:51.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2022/08/04/codelanguage/cpp11%E6%96%B0%E7%89%B9%E6%80%A7%E7%AF%872/</id>
        <title>cpp11新特性篇2</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2022/08/04/codelanguage/cpp11%E6%96%B0%E7%89%B9%E6%80%A7%E7%AF%872/"/>
        <content type="html">&lt;h3 id=&#34;继承构造函数&#34;&gt;&lt;a href=&#34;#继承构造函数&#34; class=&#34;headerlink&#34; title=&#34;继承构造函数&#34;&gt;&lt;/a&gt;继承构造函数&lt;/h3&gt;&lt;p&gt;如果基类有多个构造函数，使用继承构造函数可以让派生类免于重写各个基类的构造函数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;struct A &amp;#123;
    A(int i) &amp;#123;&amp;#125;
    A(double d, int i) &amp;#123;&amp;#125;
    A(float f, int i, const char *c) &amp;#123;&amp;#125;
    // ...
&amp;#125;;

struct B : A &amp;#123;
    using A : A;	// 继承构造函数
    // ...
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;c++11标准继承构造函数和默认构造函数、析构函数、拷贝构造一样，都是隐式声明的。不过继承构造函数只会初始化基类中的成员变量，对于派生类的成员变量无法初始化，这时候要结合初始化表达式为派生类的成员变量设定默认值。但是，&lt;strong&gt;继承构造函数不会继承基类的成员变量的默认值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当派生类的继承基类时，派生类的继承构造函数可能不只有一个结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;struct A &amp;#123;
    A (int a = 3, double 2.4) &amp;#123;&amp;#125;
&amp;#125;

struct B : A &amp;#123;
    using A::A;
&amp;#125;

可能生成的继承构造函数如下：
A(int=3, double=2.4)
A(int=3)
A(const A&amp;amp;)
A()
对应的B的构造函数将有：
B(int=3, double=2.4)
B(int=3)
B(const B&amp;amp;)
B()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其他的规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果基类的构造函数被声明为私有成员函数，或者派生类是从基类中虚继承的，则不能在派生类中声明继承构造函数。&lt;/li&gt;
&lt;li&gt;如果派生类一旦使用了继承构造函数，编译器则不会为派生类构造自己的默认构造函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;struct A &amp;#123;A(int) &amp;#123;&amp;#125;&amp;#125;;
struct B : A &amp;#123;using A::A;&amp;#125;;

B b;  //B没有默认构造函数，不能通过编译
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;委派构造函数&#34;&gt;&lt;a href=&#34;#委派构造函数&#34; class=&#34;headerlink&#34; title=&#34;委派构造函数&#34;&gt;&lt;/a&gt;委派构造函数&lt;/h3&gt;&lt;p&gt;所谓委托构造就是让类中的某个构造函数去委托另一个构造函数执行构造操作的机制。一个委托构造函数使用&lt;strong&gt;它所属类的其他构造函数&lt;/strong&gt;执行自己的初始化过程。调用者叫委派构造函数，被调用者叫目标构造函数。&lt;/p&gt;
&lt;h3 id=&#34;右值引用：移动语义和完美转发&#34;&gt;&lt;a href=&#34;#右值引用：移动语义和完美转发&#34; class=&#34;headerlink&#34; title=&#34;右值引用：移动语义和完美转发&#34;&gt;&lt;/a&gt;右值引用：移动语义和完美转发&lt;/h3&gt;&lt;p&gt;(1) 移动构造函数：移交所有权，析构自身。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;左值：可以取地址的，有名字的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;右值：不能取地址，无名字的。又可细分为纯右值和将亡值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;纯右值：辨识临时变量和一些不跟对象关联的值&lt;/li&gt;
&lt;li&gt;将亡值：C++11新增的跟右值引用相关的表达式，如右值引用T &amp;amp;&amp;amp;的函数返回值、std::move的返回值、或者转换为T &amp;amp;&amp;amp;的类型转换函数的返回值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为区别C++98的引用类型，之前的引用叫做左值引用，左值引用和右值引用都是引用类型，声明时都必须立即进行初始化。右值引用只能绑定右值，不能绑定任何左值。左值引用可以接受非常量左值、常量左值、右值对其进行初始化。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;T &amp;amp;&amp;amp; a = ReturnRvalue(); 		// √ 绑定右值&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;int c;&lt;/code&gt;&lt;br&gt;&lt;code&gt;int &amp;amp;&amp;amp; d = c;					// X 绑定左值&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用移动语义的前提下需要给类添加一个以右值引用为参数的移动构造函数。&lt;/p&gt;
&lt;p&gt;而通常情况下，在为类声明了一个移动构造函数后，可以声明一个常量左值为参数的拷贝构造函数，以保证在移动构造不成时，还可以进行拷贝构造（偶尔也有特殊用途的反例）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;引用类型\可以引用的值类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;非常量左值&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;常量左值&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;非常量右值&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;常量右值&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;注记&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;非常量左值引用&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;常量左值引用&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;全能类型、可用于拷贝语义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;非常量右值引用&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;用于移动语义、完美转发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;常量右值引用&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;暂无用途&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;如果不知道一个类型是否属于引用类型，可以用标准库&lt;type_traits&gt;头文件中的3个模板类进行判断：is_rvalue_reference、is_lvalue_reference、is_reference。如判断string &amp;amp;&amp;amp;的类型：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cout &amp;lt;&amp;lt; is_rvalue_reference&amp;lt;string &amp;amp;&amp;amp;&amp;gt;::value;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(2) std::move: 强制转化为右值&lt;/p&gt;
&lt;p&gt;std::move基本等同于一个类型转换：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;static_cast&amp;lt;T&amp;amp;&amp;amp;&amp;gt;(lvalue);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但注意：被std::move转化的左值，其生命期并没有随着左右值的转化而改变。&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;

class Moveable &amp;#123;
public:
    Moveable() : i(new int(3)) &amp;#123;&amp;#125;
    ~Moveable() &amp;#123; delete i; &amp;#125;
    Moveable(const Moveable &amp;amp;m) : i(new int(*m.i)) &amp;#123;&amp;#125;
    Moveable(Moveable &amp;amp;&amp;amp; m) : i(m.i) &amp;#123;
        m.i = nullptr;
    &amp;#125;
    int *i;
&amp;#125;;

int main() &amp;#123;
    Moveable a;
    Moveable c(move(a));   // 会调用移动构造函数
    cout &amp;lt;&amp;lt; *a.i &amp;lt;&amp;lt; endl;  // 运行时错误
    return 0;
&amp;#125;

/*
move(a)后，a.i就被移动构造函数设置为指针空值，所以后来使用会报错
*/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如上例，在大多数时候，我们需要将其转化为右值引用的还是一个确实生命期即将结束的对象。&lt;/p&gt;
&lt;p&gt;声明了移动构造函数、移动赋值函数、拷贝赋值函数和析构函数中的一个或多个，编译器不会再为程序员生成默认的拷贝构造函数。所以拷贝构造&amp;#x2F;赋值和移动构造&amp;#x2F;赋值函数必须同时提供，或者同时不提供，这才能保证类同时具备拷贝语义和移动语义。&lt;/p&gt;
&lt;p&gt;可以通过可以用标准库&lt;type_traits&gt;头文件中的is_move_constructible、is_trivially_move_constructible、is_nothrow_move_constructible判断一个类型是否可以移动：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cout &amp;lt;&amp;lt; is_move_constructible&amp;lt;UnknownType&amp;gt;::value;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(3) 完美转发（perfect forwarding）&lt;/p&gt;
&lt;p&gt;完美转发，是指在函数模板中，完全依照模板的参数的类型，将参数传递给函数模板中调用的另外一个函数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;template &amp;lt;typename T&amp;gt;&lt;/code&gt;&lt;br&gt;&lt;code&gt;void IamForwording(T t) &amp;#123; IrunCodeActually(t); &amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对于目标函数IrunCodeActually而言，它总是希望转发函数将参数按照传入lamForwarding时的类型传递(即传入lamForwording的是左值对象，IrunCodeActually就能获得左值对象，传入lamForwording的是右值对象，lrunCodeActually就能获得右值对象)，而不产生额外的开销，就好像转发者不存在一样。&lt;/p&gt;
&lt;p&gt;C++11通过使用“引用折叠”（reference collapsing），结合新的模板推导规则实现完美转发。&lt;/p&gt;
&lt;p&gt;引用折叠：即将复杂的未知表达式折叠为已知的简单表达式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;typedef const int T;&lt;/code&gt;&lt;br&gt;&lt;code&gt;typedef T&amp;amp; TR;&lt;/code&gt;&lt;br&gt;&lt;code&gt;TR&amp;amp; v = 1;		//该声明在C++98中会导致编译报错,而在c++11中会导致引用折叠&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​																	&lt;strong&gt;表  c++11中的引用折叠&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;TR的类型定义&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;声明v的类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;v的实际类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;T&amp;amp;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TR&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;A&amp;amp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;T&amp;amp;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TR&amp;amp;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;A&amp;amp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;T&amp;amp;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TR&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;A&amp;amp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;T&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TR&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;A&amp;amp;&amp;amp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;T&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TR&amp;amp;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;A&amp;amp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;T&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TR&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;A&amp;amp;&amp;amp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;将之前的例子改写：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;//改写为完美转发
template &amp;lt;typename T&amp;gt;
void IamForwording(T &amp;amp;&amp;amp; t) &amp;#123;
    IrunCodeActually(static_cast&amp;lt;T &amp;amp;&amp;amp;&amp;gt;(t));
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在c++11中用于完美转发的函数是forward，它和move的实际实现上差别不大，move也可以实现完美转发，但并不推荐。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;template &amp;lt;typename T&amp;gt;
void IamForwording(T &amp;amp;&amp;amp; t) &amp;#123;
    IrunCodeActually(forward(t));
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;显示转换操作符&#34;&gt;&lt;a href=&#34;#显示转换操作符&#34; class=&#34;headerlink&#34; title=&#34;显示转换操作符&#34;&gt;&lt;/a&gt;显示转换操作符&lt;/h3&gt;&lt;p&gt;explicit作用:在C++中，explicit关键字用来修饰类的构造函数，被修饰的构造函数的类，不能发生相应的隐式类型转换，只能以显示的方式进行类型转换。&lt;/p&gt;
&lt;p&gt;explicit使用注意事项:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;explicit 关键字只能用于类内部的构造函数声明上。&lt;/li&gt;
&lt;li&gt;explicit 关键字作用于单个参数的构造函数。&lt;/li&gt;
&lt;li&gt;explicit关键字用来修饰类的构造函数，被修饰的构造函数的类，不能发生相应的隐式类型转换&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;列表初始化&#34;&gt;&lt;a href=&#34;#列表初始化&#34; class=&#34;headerlink&#34; title=&#34;列表初始化&#34;&gt;&lt;/a&gt;列表初始化&lt;/h3&gt;&lt;p&gt;不仅能用于内置类型、标准库中的容器，只要#include了&lt;initializer_list&gt;头文件，并且声明一个以   initialize_list&amp;lt; T &amp;gt;模板类为参数的构造函数，同样可以使得自定义的类使用列表初始化。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
using namespace std;

enum Gender &amp;#123;boy, girl&amp;#125;;
class People &amp;#123;
public:
    People(initializer_list&amp;lt;pair&amp;lt;string, Gender&amp;gt; &amp;gt; l) &amp;#123;
        auto i = l.begin();
        for ( ; != l.end(); ++i)
            data.push_back(*i);
    &amp;#125;
private:
    vector&amp;lt;pair&amp;lt;string, Gender&amp;gt; &amp;gt; data;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;函数的参数列表也可以使用初始化列表。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;#include &amp;lt;initializer_list&amp;gt;
using namespace std;

void Fun(initializer_list&amp;lt;int&amp;gt; iv) &amp;#123;&amp;#125;

int main() &amp;#123;
    Func(&amp;#123;1, 2&amp;#125;);
    Func(&amp;#123;&amp;#125;);   //空列表
    return 0;
&amp;#125;`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同理，类和结构体的成员函数也可以使用初始化参数列表，包括一些操作符的重载函数。&lt;/p&gt;
&lt;p&gt;此外，初始化列表还可以用于函数返回的情况，返回一个初始化列表，通常会导致构造一个临时变量，比如：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vector&amp;lt;int&amp;gt; Func &amp;#123; return &amp;#123;1,3&amp;#125;; &amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用列表初始化的优势是可以防止类型收窄（narrowing）。&lt;/p&gt;
&lt;p&gt;类型收窄一般是指一些可以使得数据变化或者精度丢失的隐式类型转换。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;const int x = 1024;&lt;/code&gt;&lt;br&gt;&lt;code&gt;const int y = 10;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;char a = x;					// 收窄，但可以通过编译&lt;/code&gt;&lt;br&gt;&lt;code&gt;char *b = new char(1024);	// 收窄，但可以通过编译&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;char c = &amp;#123;x&amp;#125;;				// 收窄，无法通过编译&lt;/code&gt;&lt;br&gt;&lt;code&gt;char d = &amp;#123;y&amp;#125;;				// 可以通过编译，char的取值范围在-128~127&lt;/code&gt;&lt;br&gt;&lt;code&gt;unsigned char e &amp;#123;-1&amp;#125;;		// 收窄，无法通过编译&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;float f &amp;#123;7&amp;#125;;				// 可以通过编译，这个可以转换会原类型，没有发生精度丢失，所以可以通过&lt;/code&gt;&lt;br&gt;&lt;code&gt;int g &amp;#123; 2.0 f&amp;#125;;				// 收窄，无法通过编译，2.0f是一个有精度的浮点数值，转换成整数会丢失精度&lt;/code&gt;&lt;br&gt;&lt;code&gt;float *h = new float&amp;#123;1e48&amp;#125;; // 收窄，无法通过编译&lt;/code&gt;&lt;br&gt;&lt;code&gt;float i = 1.21;				// 可以通过编译&lt;/code&gt;&lt;/p&gt;
</content>
        <category term="编程语言" scheme="https://hdqjl317.github.io/categories/codelanguage/" />
        <category term="cpp" scheme="https://hdqjl317.github.io/tags/cpp/" />
        <updated>2022-08-04T05:01:42.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2022/08/01/codelanguage/cpp11%E6%96%B0%E7%89%B9%E6%80%A7%E7%AF%871/</id>
        <title>cpp11新特性篇1</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2022/08/01/codelanguage/cpp11%E6%96%B0%E7%89%B9%E6%80%A7%E7%AF%871/"/>
        <content type="html">&lt;h3 id=&#34;查验机器环境&#34;&gt;&lt;a href=&#34;#查验机器环境&#34; class=&#34;headerlink&#34; title=&#34;查验机器环境&#34;&gt;&lt;/a&gt;查验机器环境&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

int main() &amp;#123;
    cout &amp;lt;&amp;lt; &amp;quot;Standard Clib: &amp;quot; &amp;lt;&amp;lt; __STDC_HOSTED__ &amp;lt;&amp;lt; endl;
    cout &amp;lt;&amp;lt; &amp;quot;Standard C: &amp;quot; &amp;lt;&amp;lt; __STDC__ &amp;lt;&amp;lt; endl;
    // cout &amp;lt;&amp;lt; &amp;quot;C Standard version: &amp;quot; &amp;lt;&amp;lt; __STDC_VERSION__ &amp;lt;&amp;lt; endl;
    cout &amp;lt;&amp;lt; &amp;quot;ISO/IEC &amp;quot; &amp;lt;&amp;lt; __STDC_ISO_10646__ &amp;lt;&amp;lt; endl;
    return 0;
&amp;#125;

Standard Clib: 1
Standard C: 1
ISO/IEC 201706 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;返回函数的名字&#34;&gt;&lt;a href=&#34;#返回函数的名字&#34; class=&#34;headerlink&#34; title=&#34;返回函数的名字&#34;&gt;&lt;/a&gt;返回函数的名字&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;// 返回函数的名字，预定义标识符 __func__

#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;

using namespace std;

const char *hello() &amp;#123; return __func__; &amp;#125;
const char *world() &amp;#123; return __func__; &amp;#125;

struct TestStruct &amp;#123;
    TestStruct() : name(__func__) &amp;#123;&amp;#125;
   const char *name;
&amp;#125;;

int main() &amp;#123;
    cout &amp;lt;&amp;lt; hello() &amp;lt;&amp;lt; &amp;quot;, &amp;quot; &amp;lt;&amp;lt; world() &amp;lt;&amp;lt; endl;
    TestStruct ts;
    cout &amp;lt;&amp;lt; ts.name &amp;lt;&amp;lt; endl; 
   return 0;
&amp;#125;

hello, world
TestStruct
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;变长参数宏定义&#34;&gt;&lt;a href=&#34;#变长参数宏定义&#34; class=&#34;headerlink&#34; title=&#34;变长参数宏定义&#34;&gt;&lt;/a&gt;变长参数宏定义&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;// 变长参数宏定义 __VA_ARGS__

#include &amp;lt;stdio.h&amp;gt;

#define LOG(...) &amp;#123;  \
    fprintf(stderr, &amp;quot;%s: Line %d:\t&amp;quot;, __FILE__, __LINE__); \
    fprintf(stderr, __VA_ARGS__); \
    fprintf(stderr, &amp;quot;\n&amp;quot;); \
&amp;#125;

int main() &amp;#123;
    int x = 3;
    LOG(&amp;quot;x = %d&amp;quot;, x);
    return 0;
&amp;#125;


va_args.cpp: Line 13:   x = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;静态断言与static-assert&#34;&gt;&lt;a href=&#34;#静态断言与static-assert&#34; class=&#34;headerlink&#34; title=&#34;静态断言与static_assert&#34;&gt;&lt;/a&gt;静态断言与static_assert&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;断言宏assert只用于程序运行时&lt;/li&gt;
&lt;li&gt;#error 只在编译器预处理时有效&lt;/li&gt;
&lt;li&gt;static_assert用于程序编译时进行断言&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;static_assert接收两个参数，一个bool值，一个字符串警告信息。&lt;/p&gt;
&lt;p&gt;static_assert的断言表达式的结果必须时在编译时期就可以计算的表达式，及必须是常量表达式。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;#include &amp;lt;cstring&amp;gt;

using namespace std;

template &amp;lt;typename T, typename U&amp;gt; int bit_copy(T &amp;amp;a, U &amp;amp;b) &amp;#123;
    static_assert(sizeof(b) == sizeof(a), &amp;quot;the parameters of bit_copy must have same width.&amp;quot;);
    memcpy(&amp;amp;a, &amp;amp;b, sizeof(b));
&amp;#125;

int main() &amp;#123;
    int a = 0x2468;
    double b;
    bit_copy(a, b);
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;noexcept修饰符与noexcept操作符&#34;&gt;&lt;a href=&#34;#noexcept修饰符与noexcept操作符&#34; class=&#34;headerlink&#34; title=&#34;noexcept修饰符与noexcept操作符&#34;&gt;&lt;/a&gt;noexcept修饰符与noexcept操作符&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;noexcept不会抛出异常，通过调用std::terminate()来终止程序的运行，则这样可以减少异常机制带来的开销（比如，不用进行栈帧的一级一级的展开），有效的阻止了异常的传播与扩散。&lt;/li&gt;
&lt;li&gt;但也可能存在一些问题，比如noexcepet后无法保证对象的析构函数的正常调用，无法保证栈的自动释放等等。&lt;/li&gt;
&lt;li&gt;C++11默认将delete函数设置为noexcept，即nocept(true)，可以提高程序的安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;`void operator delete(void *) noexcept;
void operator delete[](void *) noexcept;
void *operator new(std::size_t) noexcept(false);  //可以抛出异常
void *operator new[](std::size_t) noexcept(false); //可以抛出异常

void except_func() noexcept;   //用于函数，默认noexcept(true)
void except_func() noexcept(常量表达式)  //用于函数

template &amp;lt;class T&amp;gt;
void fun() noexcept(noexcept(T(()))) &amp;#123;&amp;#125; //noexcept()用于模板`
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;快速初始化成员变量&#34;&gt;&lt;a href=&#34;#快速初始化成员变量&#34; class=&#34;headerlink&#34; title=&#34;快速初始化成员变量&#34;&gt;&lt;/a&gt;快速初始化成员变量&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;#include &amp;lt;string&amp;gt;

using namespace std;

struct C &amp;#123;
    C(int i) : c(i) &amp;#123;&amp;#125;;
    int c;
&amp;#125;;

struct Init &amp;#123;
    int a = 1;				//可以通过编译，以前的C++98不能通过编译
    string b(&amp;quot;hello&amp;quot;);		//无法通过编译
    C c(1);					//无法通过编译
&amp;#125;;

int main() &amp;#123;
    Init temp;
    return 0;
&amp;#125;`
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;override和final&#34;&gt;&lt;a href=&#34;#override和final&#34; class=&#34;headerlink&#34; title=&#34;override和final&#34;&gt;&lt;/a&gt;override和final&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;override：保证在派生类中声明的重载函数，与基类的虚函数有相同的签名（函数名，参数，const属性）；&lt;/li&gt;
&lt;li&gt;final：阻止类的进一步派生 和 虚函数的进一步重写。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;加了override，明确表示派生类的这个虚函数是要重写基类的，如果派生类与基类虚函数的签名不一致，编译器就会报错。一个虚函数被声明为final，则派生类不能再重写它。&lt;/p&gt;
&lt;h3 id=&#34;模板函数的默认模板参数&#34;&gt;&lt;a href=&#34;#模板函数的默认模板参数&#34; class=&#34;headerlink&#34; title=&#34;模板函数的默认模板参数&#34;&gt;&lt;/a&gt;模板函数的默认模板参数&lt;/h3&gt;&lt;p&gt;c++98不支持函数模板的默认模板参数，c++11支持。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;void Deparm(int m = 3) &amp;#123;&amp;#125;   //c++98编译通过， c++11编译通过
template &amp;lt;typename T = int &amp;gt;
    class DefClass &amp;#123;&amp;#125;;		//c++98编译通过， c++11编译通过
template &amp;lt;typename T = int &amp;gt;
    void DefTempParm() &amp;#123;&amp;#125;   //c++98编译不通过， c++11编译通过`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于类模板，如果定义模板类的默认模板参数，必须按照从左到右定义。而对于函数模板没有此要求。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;template&amp;lt;typename T1, typename T2 = int&amp;gt; class DefClass1;	//c++11可以通过编译
template&amp;lt;typename T1 = int, typename T2&amp;gt; class DefClass2;	//c++11不能通过编译

template&amp;lt;typename T, int i = 0&amp;gt; class DefClass1;  //c++11可以通过编译
template&amp;lt;int i= 0, typename T&amp;gt; class DefClass1;	  //c++11不能通过编译

template&amp;lt;typename T1 = int, typename T2&amp;gt; void DefFunc1(T1 a, T2 b);	//c++11可以通过编译
template&amp;lt;int i= 0, typename T&amp;gt; void DefFunc2(T a);					//c++11可以通过编译`
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="编程语言" scheme="https://hdqjl317.github.io/categories/codelanguage/" />
        <category term="cpp" scheme="https://hdqjl317.github.io/tags/cpp/" />
        <updated>2022-08-01T05:01:42.000Z</updated>
    </entry>
    <entry>
        <id>https://hdqjl317.github.io/2022/07/01/other/hello-world/</id>
        <title>Hello World</title>
        <link rel="alternate" href="https://hdqjl317.github.io/2022/07/01/other/hello-world/"/>
        <content type="html">&lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==&#34;&gt;GitHub&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Quick-Start&#34;&gt;&lt;a href=&#34;#Quick-Start&#34; class=&#34;headerlink&#34; title=&#34;Quick Start&#34;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&#34;Create-a-new-post&#34;&gt;&lt;a href=&#34;#Create-a-new-post&#34; class=&#34;headerlink&#34; title=&#34;Create a new post&#34;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo new &amp;quot;My New Post&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;Run-server&#34;&gt;&lt;a href=&#34;#Run-server&#34; class=&#34;headerlink&#34; title=&#34;Run server&#34;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;Generate-static-files&#34;&gt;&lt;a href=&#34;#Generate-static-files&#34; class=&#34;headerlink&#34; title=&#34;Generate static files&#34;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo generate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;Deploy-to-remote-sites&#34;&gt;&lt;a href=&#34;#Deploy-to-remote-sites&#34; class=&#34;headerlink&#34; title=&#34;Deploy to remote sites&#34;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="杂谈" scheme="https://hdqjl317.github.io/categories/other/" />
        <category term="其他" scheme="https://hdqjl317.github.io/tags/%E5%85%B6%E4%BB%96/" />
        <updated>2022-07-01T03:01:42.000Z</updated>
    </entry>
</feed>
